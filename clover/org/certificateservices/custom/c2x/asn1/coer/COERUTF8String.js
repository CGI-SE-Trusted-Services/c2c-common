var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":80,"id":1171,"methods":[{"el":34,"sc":2,"sl":32},{"el":41,"sc":2,"sl":39},{"el":48,"sc":2,"sl":46},{"el":55,"sc":2,"sl":53},{"el":67,"sc":2,"sl":61},{"el":77,"sc":2,"sl":74}],"name":"COERUTF8String","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_114":{"methods":[{"sl":46},{"sl":61},{"sl":74}],"name":"Verify toString","pass":true,"statements":[{"sl":47},{"sl":62},{"sl":63},{"sl":76}]},"test_128":{"methods":[{"sl":39}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":40}]},"test_136":{"methods":[{"sl":53}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":54}]},"test_16":{"methods":[{"sl":53}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":54}]},"test_163":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_172":{"methods":[{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_185":{"methods":[{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_226":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_239":{"methods":[{"sl":39}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_246":{"methods":[{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_248":{"methods":[{"sl":39}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":40}]},"test_261":{"methods":[{"sl":39}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":40}]},"test_278":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_312":{"methods":[{"sl":39}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":40}]},"test_324":{"methods":[{"sl":39}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":40}]},"test_325":{"methods":[{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_326":{"methods":[{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_35":{"methods":[{"sl":39}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_354":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_360":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_384":{"methods":[{"sl":39},{"sl":46},{"sl":53},{"sl":61}],"name":"Verify that constuctor and getter","pass":true,"statements":[{"sl":40},{"sl":47},{"sl":54},{"sl":62},{"sl":63}]},"test_385":{"methods":[{"sl":39}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_406":{"methods":[{"sl":39}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_417":{"methods":[{"sl":53}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":54}]},"test_422":{"methods":[{"sl":53}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":54}]},"test_43":{"methods":[{"sl":53}],"name":"Verify that CertificateId is correctly encoded for type name","pass":true,"statements":[{"sl":54}]},"test_437":{"methods":[{"sl":53}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":54}]},"test_455":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_459":{"methods":[{"sl":39},{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":62},{"sl":63}]},"test_465":{"methods":[{"sl":39}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":40}]},"test_482":{"methods":[{"sl":39}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_485":{"methods":[{"sl":39}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_486":{"methods":[{"sl":53}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":54}]},"test_493":{"methods":[{"sl":39},{"sl":53},{"sl":61}],"name":"Verify that Hostname has size boundraries 0 to 255","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":62},{"sl":63}]},"test_498":{"methods":[{"sl":39}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":40}]},"test_499":{"methods":[{"sl":39}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":40}]},"test_523":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_532":{"methods":[{"sl":39}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":40}]},"test_547":{"methods":[{"sl":39}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":40}]},"test_567":{"methods":[{"sl":39}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":40}]},"test_569":{"methods":[{"sl":39}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_587":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_608":{"methods":[{"sl":39}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_609":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_62":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_625":{"methods":[{"sl":39}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_650":{"methods":[{"sl":39}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":40}]},"test_665":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_670":{"methods":[{"sl":53}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":54}]},"test_686":{"methods":[{"sl":39}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":40}]},"test_689":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_708":{"methods":[{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_729":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_735":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_74":{"methods":[{"sl":39}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":40}]},"test_749":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_75":{"methods":[{"sl":39}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_756":{"methods":[{"sl":61}],"name":"Verify toString()","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_769":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_774":{"methods":[{"sl":39}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_79":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_818":{"methods":[{"sl":53}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":54}]},"test_829":{"methods":[{"sl":39}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":40}]},"test_901":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]},"test_946":{"methods":[{"sl":39}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40}]},"test_947":{"methods":[{"sl":61}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":63}]},"test_960":{"methods":[{"sl":39}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [625, 547, 587, 665, 239, 459, 406, 769, 74, 960, 128, 226, 465, 482, 686, 354, 455, 493, 523, 689, 774, 749, 384, 163, 62, 650, 498, 485, 261, 35, 901, 735, 385, 532, 79, 324, 312, 75, 360, 499, 946, 729, 567, 569, 829, 248, 278, 608, 0, 609], [625, 547, 587, 665, 239, 459, 406, 769, 74, 960, 128, 226, 465, 482, 686, 354, 455, 493, 523, 689, 774, 749, 384, 163, 62, 650, 498, 485, 261, 35, 901, 735, 385, 532, 79, 324, 312, 75, 360, 499, 946, 729, 567, 569, 829, 248, 278, 608, 0, 609], [], [], [], [], [], [384, 114], [384, 114], [], [], [], [], [], [16, 43, 422, 486, 417, 670, 136, 493, 384, 818, 437], [16, 43, 422, 486, 417, 670, 136, 493, 384, 818, 437], [], [], [], [], [], [], [325, 459, 756, 185, 246, 708, 326, 493, 384, 947, 114, 172], [325, 459, 756, 185, 246, 708, 326, 493, 384, 947, 114, 172], [325, 459, 756, 185, 246, 708, 326, 493, 384, 947, 114, 172], [], [], [], [], [], [], [], [], [], [], [114], [], [114], [], [], [], []]
