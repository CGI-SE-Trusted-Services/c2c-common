var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":104,"id":363,"methods":[{"el":42,"sc":2,"sl":40},{"el":52,"sc":2,"sl":50},{"el":61,"sc":2,"sl":59},{"el":66,"sc":2,"sl":63},{"el":72,"sc":2,"sl":68},{"el":80,"sc":2,"sl":74},{"el":97,"sc":2,"sl":82},{"el":102,"sc":2,"sl":99}],"name":"COEREnumeration","sl":27}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_1":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_1009":{"methods":[{"sl":40},{"sl":50},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60}]},"test_120":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_123":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_128":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_144":{"methods":[{"sl":40},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_146":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_150":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71}]},"test_16":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_164":{"methods":[{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":60}]},"test_167":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_168":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_182":{"methods":[{"sl":40},{"sl":50}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":41},{"sl":51}]},"test_196":{"methods":[{"sl":99}],"name":"Verify toString","pass":true,"statements":[{"sl":101}]},"test_207":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[{"sl":41}]},"test_214":{"methods":[{"sl":40},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that EncryptionKey is correctly encoded for type public_","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_238":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":41}]},"test_250":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_257":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_290":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_298":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_304":{"methods":[{"sl":40},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_307":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_309":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_321":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_325":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_332":{"methods":[{"sl":40},{"sl":50},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60}]},"test_364":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_367":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71}]},"test_377":{"methods":[{"sl":40},{"sl":50}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":41},{"sl":51}]},"test_386":{"methods":[{"sl":40},{"sl":50}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":41},{"sl":51}]},"test_40":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_412":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_42":{"methods":[{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":60}]},"test_421":{"methods":[{"sl":40},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_433":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_44":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_445":{"methods":[{"sl":40},{"sl":63},{"sl":68}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71}]},"test_447":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_461":{"methods":[{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":60}]},"test_470":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_471":{"methods":[{"sl":40},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":60}]},"test_473":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_479":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_490":{"methods":[{"sl":40},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that COEREnumeration is encoded and is decoded back to the same values[0]","pass":true,"statements":[{"sl":41},{"sl":60},{"sl":65},{"sl":71}]},"test_523":{"methods":[{"sl":50},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":51},{"sl":60}]},"test_549":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_57":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71}]},"test_577":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_58":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_585":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_590":{"methods":[{"sl":40},{"sl":50}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":41},{"sl":51}]},"test_60":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that IssuerIdentifier is correctly encoded for type self","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71}]},"test_61":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_614":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_639":{"methods":[{"sl":40},{"sl":50}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":41},{"sl":51}]},"test_656":{"methods":[{"sl":40},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_66":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_660":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_663":{"methods":[{"sl":40},{"sl":50},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60}]},"test_674":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_68":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":41}]},"test_687":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_69":{"methods":[{"sl":40},{"sl":50}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":41},{"sl":51}]},"test_694":{"methods":[{"sl":50},{"sl":74},{"sl":82}],"name":"Verify equals and hashcode","pass":true,"statements":[{"sl":51},{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":95},{"sl":96}]},"test_698":{"methods":[{"sl":40},{"sl":68},{"sl":82}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":41},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_711":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_719":{"methods":[{"sl":40},{"sl":68},{"sl":82}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":41},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_725":{"methods":[{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":60}]},"test_740":{"methods":[{"sl":40},{"sl":50},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60}]},"test_744":{"methods":[{"sl":40},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_778":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_806":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_81":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71}]},"test_815":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_822":{"methods":[{"sl":40},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":60}]},"test_825":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_836":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_850":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_851":{"methods":[{"sl":40},{"sl":63},{"sl":68},{"sl":82}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":41},{"sl":65},{"sl":71},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_856":{"methods":[{"sl":59}],"name":"Verify toString()","pass":true,"statements":[{"sl":60}]},"test_869":{"methods":[{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":60}]},"test_870":{"methods":[{"sl":40},{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":60}]},"test_871":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]},"test_876":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_877":{"methods":[{"sl":40},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":41},{"sl":60},{"sl":65},{"sl":71}]},"test_882":{"methods":[{"sl":40},{"sl":50}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":41},{"sl":51}]},"test_894":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_945":{"methods":[{"sl":40},{"sl":50},{"sl":63}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":65}]},"test_949":{"methods":[{"sl":40},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":41},{"sl":60},{"sl":65},{"sl":71}]},"test_953":{"methods":[{"sl":59}],"name":"Verify toString","pass":true,"statements":[{"sl":60}]},"test_96":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_962":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":71}]},"test_966":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":41}]},"test_979":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65}]},"test_991":{"methods":[{"sl":40},{"sl":50},{"sl":59},{"sl":63},{"sl":82}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41},{"sl":51},{"sl":60},{"sl":65},{"sl":84},{"sl":86},{"sl":88},{"sl":90},{"sl":91},{"sl":94},{"sl":96}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [815, 123, 447, 307, 479, 58, 744, 590, 945, 214, 146, 870, 876, 325, 962, 825, 150, 585, 0, 40, 871, 367, 490, 364, 96, 144, 66, 614, 663, 687, 549, 979, 850, 168, 298, 660, 473, 1, 69, 128, 182, 257, 57, 207, 332, 386, 966, 377, 719, 120, 16, 238, 445, 991, 421, 674, 806, 167, 250, 577, 60, 778, 470, 711, 882, 321, 61, 836, 822, 949, 656, 44, 471, 309, 412, 81, 877, 740, 290, 639, 433, 68, 851, 698, 304, 1009, 894], [815, 123, 447, 307, 479, 58, 744, 590, 945, 214, 146, 870, 876, 325, 962, 825, 150, 585, 0, 40, 871, 367, 490, 364, 96, 144, 66, 614, 663, 687, 549, 979, 850, 168, 298, 660, 473, 1, 69, 128, 182, 257, 57, 207, 332, 386, 966, 377, 719, 120, 16, 238, 445, 991, 421, 674, 806, 167, 250, 577, 60, 778, 470, 711, 882, 321, 61, 836, 822, 949, 656, 44, 471, 309, 412, 81, 877, 740, 290, 639, 433, 68, 851, 698, 304, 1009, 894], [], [], [], [], [], [], [], [], [815, 123, 447, 307, 479, 58, 590, 945, 146, 876, 325, 962, 825, 150, 585, 0, 40, 871, 367, 364, 96, 66, 614, 663, 687, 549, 979, 850, 694, 168, 298, 660, 473, 1, 69, 128, 182, 257, 57, 332, 386, 377, 120, 16, 991, 674, 523, 806, 167, 250, 577, 60, 778, 470, 711, 882, 321, 61, 836, 44, 309, 412, 81, 740, 290, 639, 433, 1009, 894], [815, 123, 447, 307, 479, 58, 590, 945, 146, 876, 325, 962, 825, 150, 585, 0, 40, 871, 367, 364, 96, 66, 614, 663, 687, 549, 979, 850, 694, 168, 298, 660, 473, 1, 69, 128, 182, 257, 57, 332, 386, 377, 120, 16, 991, 674, 523, 806, 167, 250, 577, 60, 778, 470, 711, 882, 321, 61, 836, 44, 309, 412, 81, 740, 290, 639, 433, 1009, 894], [], [], [], [], [], [], [], [815, 447, 42, 479, 58, 870, 876, 325, 962, 869, 150, 585, 0, 40, 871, 367, 490, 364, 164, 96, 66, 614, 663, 687, 549, 979, 850, 168, 298, 660, 128, 57, 332, 856, 461, 120, 16, 991, 674, 523, 806, 167, 250, 577, 60, 778, 470, 711, 953, 836, 822, 949, 44, 471, 309, 412, 81, 877, 740, 290, 433, 725, 1009, 894], [815, 447, 42, 479, 58, 870, 876, 325, 962, 869, 150, 585, 0, 40, 871, 367, 490, 364, 164, 96, 66, 614, 663, 687, 549, 979, 850, 168, 298, 660, 128, 57, 332, 856, 461, 120, 16, 991, 674, 523, 806, 167, 250, 577, 60, 778, 470, 711, 953, 836, 822, 949, 44, 471, 309, 412, 81, 877, 740, 290, 433, 725, 1009, 894], [], [], [815, 123, 447, 307, 479, 58, 744, 945, 214, 146, 876, 325, 962, 825, 150, 585, 0, 40, 871, 367, 490, 364, 96, 144, 66, 614, 687, 549, 979, 850, 168, 298, 660, 473, 1, 128, 257, 57, 120, 16, 445, 991, 421, 674, 806, 167, 250, 577, 60, 778, 470, 711, 321, 61, 836, 949, 656, 44, 309, 412, 81, 877, 290, 433, 851, 304, 894], [], [815, 123, 447, 307, 479, 58, 744, 945, 214, 146, 876, 325, 962, 825, 150, 585, 0, 40, 871, 367, 490, 364, 96, 144, 66, 614, 687, 549, 979, 850, 168, 298, 660, 473, 1, 128, 257, 57, 120, 16, 445, 991, 421, 674, 806, 167, 250, 577, 60, 778, 470, 711, 321, 61, 836, 949, 656, 44, 309, 412, 81, 877, 290, 433, 851, 304, 894], [], [], [744, 214, 962, 150, 367, 490, 144, 298, 57, 719, 445, 421, 250, 60, 949, 656, 81, 877, 851, 698, 304], [], [], [744, 214, 962, 150, 367, 490, 144, 298, 57, 719, 445, 421, 250, 60, 949, 656, 81, 877, 851, 698, 304], [], [], [694], [], [694], [694], [694], [694], [], [], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [], [], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [694], [744, 214, 871, 144, 614, 850, 694, 298, 660, 719, 991, 421, 674, 250, 656, 309, 290, 851, 698, 304], [], [], [196], [], [196], [], [], []]
