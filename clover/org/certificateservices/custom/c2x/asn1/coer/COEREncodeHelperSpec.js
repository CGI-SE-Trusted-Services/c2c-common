var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":177,"id":10365,"methods":[{"el":57,"sc":2,"sl":30},{"el":81,"sc":2,"sl":59},{"el":111,"sc":2,"sl":83},{"el":135,"sc":2,"sl":113},{"el":145,"sc":2,"sl":137},{"el":165,"sc":2,"sl":147},{"el":174,"sc":2,"sl":167}],"name":"COEREncodeHelperSpec","sl":27}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_241":{"methods":[{"sl":30}],"name":"Verify that writeLengthDeterminant generates encoding 8802ad5adfd445b0cb for value 192910276432343243 and readLengthDeterminant converts it back correctly","pass":true,"statements":[{"sl":33},{"sl":34},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":44},{"sl":46}]},"test_245":{"methods":[{"sl":30}],"name":"Verify that writeLengthDeterminant generates encoding 01 for value 1 and readLengthDeterminant converts it back correctly","pass":true,"statements":[{"sl":33},{"sl":34},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":44},{"sl":46}]},"test_275":{"methods":[{"sl":30}],"name":"Verify that writeLengthDeterminant generates encoding 00 for value 0 and readLengthDeterminant converts it back correctly","pass":true,"statements":[{"sl":33},{"sl":34},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":44},{"sl":46}]},"test_330":{"methods":[{"sl":137}],"name":"Verify that writeLengthDeterminant doesn't accept negative numbers","pass":true,"statements":[{"sl":139},{"sl":140},{"sl":142},{"sl":144}]},"test_337":{"methods":[{"sl":83}],"name":"Verify that writeEnumerationValue generates encoding 00 for value 0 and readEnumerationValue converts it back correctly","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":96},{"sl":97},{"sl":99}]},"test_39":{"methods":[{"sl":83}],"name":"Verify that writeEnumerationValue generates encoding 8802ad5adfd445b0cb for value 192910276432343243 and readEnumerationValue converts it back correctly","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":96},{"sl":97},{"sl":99}]},"test_420":{"methods":[{"sl":83}],"name":"Verify that writeEnumerationValue generates encoding 01 for value 1 and readEnumerationValue converts it back correctly","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":96},{"sl":97},{"sl":99}]},"test_424":{"methods":[{"sl":83}],"name":"Verify that writeEnumerationValue generates encoding 8180 for value -128 and readEnumerationValue converts it back correctly","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":96},{"sl":97},{"sl":99}]},"test_534":{"methods":[{"sl":147}],"name":"Verify that write and read enumeration value from COEREnumeration is correct encoded and decoded","pass":true,"statements":[{"sl":149},{"sl":150},{"sl":152},{"sl":153},{"sl":154},{"sl":156},{"sl":159},{"sl":160},{"sl":162}]},"test_564":{"methods":[{"sl":83}],"name":"Verify that writeEnumerationValue generates encoding 85017f65c4cb for value 6432343243 and readEnumerationValue converts it back correctly","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":96},{"sl":97},{"sl":99}]},"test_601":{"methods":[{"sl":167}],"name":"Verify that padZerosToByteArray inserts required number of zeros in beginning of byte array","pass":true,"statements":[{"sl":168},{"sl":171},{"sl":172},{"sl":173}]},"test_615":{"methods":[{"sl":30}],"name":"Verify that writeLengthDeterminant generates encoding 8180 for value 128 and readLengthDeterminant converts it back correctly","pass":true,"statements":[{"sl":33},{"sl":34},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":44},{"sl":46}]},"test_668":{"methods":[{"sl":30}],"name":"Verify that writeLengthDeterminant generates encoding 7f for value 127 and readLengthDeterminant converts it back correctly","pass":true,"statements":[{"sl":33},{"sl":34},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":44},{"sl":46}]},"test_733":{"methods":[{"sl":30}],"name":"Verify that writeLengthDeterminant generates encoding 85017f65c4cb for value 6432343243 and readLengthDeterminant converts it back correctly","pass":true,"statements":[{"sl":33},{"sl":34},{"sl":36},{"sl":37},{"sl":38},{"sl":40},{"sl":43},{"sl":44},{"sl":46}]},"test_741":{"methods":[{"sl":83}],"name":"Verify that writeEnumerationValue generates encoding 84fe9ac1a9 for value -23412311 and readEnumerationValue converts it back correctly","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":96},{"sl":97},{"sl":99}]},"test_76":{"methods":[{"sl":113}],"name":"Verify that writeEnumerationValue generates encoding 84fe9ac1a9 for value -23412311 and readEnumerationValue converts it back correctly for long values as well","pass":true,"statements":[{"sl":116},{"sl":117},{"sl":119},{"sl":120},{"sl":121},{"sl":123},{"sl":126},{"sl":127},{"sl":129}]},"test_850":{"methods":[{"sl":59}],"name":"Verify that writeLengthDeterminant generates encoding 85017f65c4cb for value 6432343243 and readLengthDeterminant converts it back correctly for long values as well","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":65},{"sl":66},{"sl":67},{"sl":69},{"sl":72},{"sl":73},{"sl":75}]},"test_927":{"methods":[{"sl":83}],"name":"Verify that writeEnumerationValue generates encoding 7f for value 127 and readEnumerationValue converts it back correctly","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":96},{"sl":97},{"sl":99}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines
