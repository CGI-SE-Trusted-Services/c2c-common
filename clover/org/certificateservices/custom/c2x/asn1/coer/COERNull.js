var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":68,"id":593,"methods":[{"el":35,"sc":2,"sl":34},{"el":40,"sc":2,"sl":37},{"el":51,"sc":2,"sl":42},{"el":57,"sc":2,"sl":54},{"el":62,"sc":2,"sl":59},{"el":67,"sc":2,"sl":64}],"name":"COERNull","sl":26}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_1":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[]},"test_120":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_123":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[]},"test_128":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[]},"test_144":{"methods":[{"sl":34}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[]},"test_146":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[]},"test_16":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[]},"test_167":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_168":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_182":{"methods":[{"sl":34}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[]},"test_205":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that SignerIdentifier is correctly encoded for type self","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_207":{"methods":[{"sl":34}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[]},"test_220":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type crl","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_238":{"methods":[{"sl":34}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[]},"test_250":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_252":{"methods":[{"sl":34}],"name":"Verify that getSignerId throws IllegalArgumentException if SignerIdentifier is self","pass":true,"statements":[]},"test_253":{"methods":[{"sl":34},{"sl":37},{"sl":42}],"name":"Verify equals and hashcode","pass":true,"statements":[{"sl":39},{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_257":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[]},"test_286":{"methods":[{"sl":34}],"name":"Verify that CertificateId is correctly encoded for type linkageData","pass":true,"statements":[]},"test_290":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_298":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_304":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_307":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[]},"test_309":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_318":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that CertificateId is correctly encoded for type none","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_321":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[]},"test_325":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_329":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_332":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_364":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[]},"test_367":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[]},"test_377":{"methods":[{"sl":34}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[]},"test_384":{"methods":[{"sl":34},{"sl":64}],"name":"Verify toString","pass":true,"statements":[{"sl":66}]},"test_397":{"methods":[{"sl":34},{"sl":42},{"sl":59}],"name":"Verify that SequenceOfPsidGroupPermissions is initialized properly","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_40":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[]},"test_412":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[]},"test_421":{"methods":[{"sl":34}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[]},"test_433":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[]},"test_44":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[]},"test_445":{"methods":[{"sl":34}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[]},"test_447":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_470":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_471":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_473":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[]},"test_479":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_499":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that SubjectPermissions is correctly encoded for type all","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_501":{"methods":[{"sl":34},{"sl":54},{"sl":59}],"name":"Verify that SspRange is correctly encoded for type all","pass":true,"statements":[]},"test_524":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_549":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_557":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_57":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_577":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_58":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[]},"test_582":{"methods":[{"sl":34}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is self","pass":true,"statements":[]},"test_585":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[]},"test_59":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that SubjectPermissions is correctly encoded for type explicit","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_590":{"methods":[{"sl":34}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[]},"test_61":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[]},"test_614":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_618":{"methods":[{"sl":34},{"sl":54},{"sl":59}],"name":"Verify that COERNull with value #value returns #encoded encoded and encoded #encoded generates a #value value","pass":true,"statements":[]},"test_62":{"methods":[{"sl":34}],"name":"Verify that CertificateId is correctly encoded for type name","pass":true,"statements":[]},"test_656":{"methods":[{"sl":34}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[]},"test_66":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[]},"test_660":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_674":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_68":{"methods":[{"sl":34}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[]},"test_687":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_698":{"methods":[{"sl":34}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[]},"test_711":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[]},"test_717":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_719":{"methods":[{"sl":34}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[]},"test_72":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_727":{"methods":[{"sl":34},{"sl":42},{"sl":59}],"name":"Verify that SequenceOfPsidSspRange is initialized properly","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_740":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_744":{"methods":[{"sl":34}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[]},"test_748":{"methods":[{"sl":34}],"name":"Verify that CertificateId is correctly encoded for type binaryId","pass":true,"statements":[]},"test_775":{"methods":[{"sl":34}],"name":"Verify that SignerIdentifier is correctly encoded for type digest","pass":true,"statements":[]},"test_778":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[]},"test_800":{"methods":[{"sl":34}],"name":"Verify toString()","pass":true,"statements":[]},"test_806":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_81":{"methods":[{"sl":34}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[]},"test_815":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[]},"test_822":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_825":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_836":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_850":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[]},"test_851":{"methods":[{"sl":34},{"sl":42},{"sl":54},{"sl":59}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":44},{"sl":46},{"sl":48},{"sl":50}]},"test_859":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_864":{"methods":[{"sl":34}],"name":"Verify constructor","pass":true,"statements":[]},"test_869":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_870":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_871":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_876":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[]},"test_877":{"methods":[{"sl":34}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[]},"test_882":{"methods":[{"sl":34}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[]},"test_894":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_910":{"methods":[{"sl":34}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[]},"test_945":{"methods":[{"sl":34},{"sl":54}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[]},"test_949":{"methods":[{"sl":34}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[]},"test_953":{"methods":[{"sl":34}],"name":"Verify toString","pass":true,"statements":[]},"test_96":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[]},"test_966":{"methods":[{"sl":34}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[]},"test_979":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[]},"test_991":{"methods":[{"sl":34},{"sl":54}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [815, 123, 59, 205, 447, 307, 479, 58, 744, 590, 945, 146, 864, 870, 876, 325, 800, 825, 869, 585, 0, 40, 871, 367, 364, 96, 144, 66, 614, 72, 687, 549, 979, 850, 168, 298, 660, 499, 473, 1, 252, 501, 128, 182, 257, 57, 207, 727, 910, 717, 62, 332, 318, 966, 377, 719, 120, 582, 16, 238, 445, 524, 991, 421, 674, 557, 806, 167, 250, 577, 778, 286, 470, 748, 711, 882, 329, 321, 397, 61, 253, 953, 836, 822, 949, 656, 220, 44, 471, 775, 309, 412, 81, 877, 740, 859, 290, 618, 384, 433, 68, 851, 698, 304, 894], [], [], [253], [], [253], [], [], [59, 205, 72, 298, 499, 727, 717, 318, 557, 250, 397, 253, 220, 851, 304], [], [59, 205, 72, 298, 499, 727, 717, 318, 557, 250, 397, 253, 220, 851, 304], [], [59, 205, 72, 298, 499, 727, 717, 318, 557, 250, 397, 253, 220, 851, 304], [], [59, 205, 72, 298, 499, 727, 717, 318, 557, 250, 397, 253, 220, 851, 304], [], [59, 205, 72, 298, 499, 727, 717, 318, 557, 250, 397, 253, 220, 851, 304], [], [], [], [815, 123, 59, 205, 447, 307, 479, 58, 945, 146, 876, 325, 825, 585, 0, 40, 871, 367, 364, 96, 66, 614, 72, 687, 549, 979, 850, 168, 298, 660, 499, 473, 1, 501, 128, 257, 57, 717, 318, 120, 16, 991, 674, 557, 806, 167, 250, 577, 778, 470, 711, 321, 61, 836, 220, 44, 309, 412, 290, 618, 433, 851, 304, 894], [], [], [], [], [59, 205, 72, 298, 499, 501, 727, 717, 318, 557, 250, 397, 220, 618, 851, 304], [], [], [], [], [384], [], [384], [], []]
