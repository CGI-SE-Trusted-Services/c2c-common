var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":92,"id":11838,"methods":[{"el":53,"sc":2,"sl":44},{"el":63,"sc":2,"sl":55},{"el":90,"sc":2,"sl":68}],"name":"BaseStructSpec","sl":42}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_104":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_105":{"methods":[{"sl":55}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_11":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 9223372036854775807 returns 7fffffffffffffff encoded and decoded 7fffffffffffffff generates a 9223372036854775807 value with minvalue -9223372036854775808 and maxvalue 9223372036854775807","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_111":{"methods":[{"sl":44}],"name":"Verify that IOException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48}]},"test_112":{"methods":[{"sl":44}],"name":"Verify serialization of EccPoint","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_119":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequence is encoded and is decoded back to the same values and that preample is correct.[0]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_121":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 40 returns 000000a0 encoded and decoded 000000a0 generates a 40 value with length 30 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_129":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 0 returns 00 encoded and decoded 00 generates a 0 value with length 8 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_130":{"methods":[{"sl":55}],"name":"Verify that deserialize decodes the value 0x8888 properly into: 2184","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_131":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEROctedStream with value #Error:value returns 00 encoded and decoded 00 generates a #Error:value value with lower bound 1 and upper bound 1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_132":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_133":{"methods":[{"sl":44}],"name":"Verify that serialization produces correct output[0]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_134":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_135":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that HashedId8 only stores the 8 least significant bytes","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_137":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_14":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_140":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_141":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_144":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_145":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 127 returns 007f encoded and decoded 007f generates a 127 value with minvalue -129 and maxvalue 127","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_148":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type milliseconds and value 10","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_15":{"methods":[{"sl":55}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_150":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_153":{"methods":[{"sl":55}],"name":"Verify that SequenceOfUint8 is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_157":{"methods":[{"sl":55}],"name":"Verify that SequenceOfRecipientInfo is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_159":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_161":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_163":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_169":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 1 returns 04 encoded and decoded 04 generates a 1 value with length 6 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_17":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ElevInt encodes -5000 to f001 and decodes back correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_170":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_173":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EndEntityType is correctly encoded 1000000 for app false and enroll true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_175":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that PublicVerificationKey is correctly encoded for type ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_177":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_18":{"methods":[{"sl":55}],"name":"Verify that SequenceOfOctetString is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_183":{"methods":[{"sl":55}],"name":"Verify that SequenceOfRectangularRegion is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_184":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_186":{"methods":[{"sl":44}],"name":"Verify that serialization produces correct output[2]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_19":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ElevInt encodes 61439 to efff and decodes back correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_191":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CrlContentsType is correctly encoded for type deltaHashCrl","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_197":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_201":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type sixtyHours and value 10","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_205":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SignerIdentifier is correctly encoded for type self","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_21":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value -128 returns 80 encoded and decoded 80 generates a -128 value with minvalue -128 and maxvalue 127","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_210":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERTag with tagClass 0 and tagNumber 0 returns 00 and is decoded back to the same values","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_212":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_214":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EncryptionKey is correctly encoded for type public_","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_217":{"methods":[{"sl":55}],"name":"Verify deserialization of EcdsaSignature","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_219":{"methods":[{"sl":44}],"name":"Verify that serialization produces correct output[0]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_220":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type crl","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_225":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_226":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_228":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 32767 returns 7fff encoded and decoded 7fff generates a 32767 value with minvalue -32768 and maxvalue 32767","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_229":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 16650241 returns 00fe1001 encoded and decoded 00fe1001 generates a 16650241 value with length 32 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_231":{"methods":[{"sl":55}],"name":"Verify deserialization of SubjectInfo","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_232":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_233":{"methods":[{"sl":55}],"name":"Verify that PermissibleCrls is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_235":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_237":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_241":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that LinkageSeed stores the data correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_243":{"methods":[{"sl":55}],"name":"Verify that IOException is thrown when deserializing invalid COER boolean value","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59}]},"test_246":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_247":{"methods":[{"sl":44}],"name":"Verify serialization of EcdsaSignature","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_249":{"methods":[{"sl":55}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_25":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_250":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_254":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_258":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_259":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_26":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CrlContentsType is correctly encoded for type fullLinkedCrl","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_260":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 1 returns 020001 encoded and decoded 020001 generates a 1 value with length 8 and fixed size :false","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_262":{"methods":[{"sl":44}],"name":"Verify serialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_263":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 2147483647 returns 7fffffff encoded and decoded 7fffffff generates a 2147483647 value with minvalue -2147483648 and maxvalue 2147483647","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_264":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that GeographicRegion is correctly encoded for type identifiedRegion and value SequenceOfIdentifiedRegion [[CountryOnly [10]]]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_266":{"methods":[{"sl":55}],"name":"Verify that SequenceOfUint3 is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_275":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequenceOf is encoded and is decoded back to the same values and that the length is correct.[1]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_277":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 4097 returns 1001 encoded and decoded 1001 generates a 4097 value with length 16 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_280":{"methods":[{"sl":55}],"name":"Verify deserialization of PublicKey","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_282":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 127 returns 000000000000007f encoded and decoded 000000000000007f generates a 127 value with minvalue -9223372036854775808 and maxvalue 9223372036854775807","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_284":{"methods":[{"sl":55}],"name":"Verify that SequenceOfIMaxGroup is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_285":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERTag with tagClass 128 and tagNumber 500 returns bf8374 and is decoded back to the same values","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_286":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CertificateId is correctly encoded for type linkageData","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_287":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_289":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value -2147483648 returns 80000000 encoded and decoded 80000000 generates a -2147483648 value with minvalue -2147483648 and maxvalue 2147483647","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_29":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that BasePublicEncryptionKey is correctly encoded for type ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_292":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 10 returns 0a encoded and decoded 0a generates a 10 value with minvalue 0 and maxvalue 255","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_293":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EndEntityType is correctly encoded 00000000 for app false and enroll false","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_298":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_30":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 257 returns 020101 encoded and decoded 020101 generates a 257 value with minvalue 0 and maxvalue null","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_301":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 1 returns 10 encoded and decoded 10 generates a 1 value with length 4 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_302":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ServiceSpecificPermissions is correctly encoded for type opaque","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_304":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_305":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Time64 converts date correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_306":{"methods":[{"sl":55}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_312":{"methods":[{"sl":55}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_316":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_318":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CertificateId is correctly encoded for type none","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_319":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_327":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_33":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_330":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_331":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_333":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_334":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_337":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEROctedStream with value #Error:value returns 060df3acf45678 encoded and decoded 060df3acf45678 generates a #Error:value value with lower bound 5 and upper bound null","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_343":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type seconds and value 10","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_345":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_346":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedCertificateRequest","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_348":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EccP256CurvePoint is correctly encoded for type compressedy1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_349":{"methods":[{"sl":55}],"name":"Verify deserialization of a hash value","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_35":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_350":{"methods":[{"sl":55}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_355":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 255 returns ff encoded and decoded ff generates a 255 value with length 8 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_36":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CrlContentsType is correctly encoded for type deltaLinkedCrl","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_360":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that IdentifiedRegion is correctly encoded for type countryAndRegions and value CountryAndRegions [countryOnly=5, regions=12,13]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_361":{"methods":[{"sl":55}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_363":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_365":{"methods":[{"sl":44}],"name":"Verify that serialization produces correct output[1]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_372":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ElevInt encodes 99999 to efff and decodes back correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_374":{"methods":[{"sl":55}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_379":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 9223372036854775807 returns 087fffffffffffffff encoded and decoded 087fffffffffffffff generates a 9223372036854775807 value with minvalue -9223372036854775808 and maxvalue 9223372036854775808","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_38":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_380":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EncryptionKey is correctly encoded for type symmetric","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_381":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 127 returns 007f encoded and decoded 007f generates a 127 value with minvalue -128 and maxvalue 256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_383":{"methods":[{"sl":44}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_385":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 71512240582168577 returns 00fe100100fe1001 encoded and decoded 00fe100100fe1001 generates a 71512240582168577 value with length 64 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_387":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 0 returns 00 encoded and decoded 00 generates a 0 value with minvalue -128 and maxvalue 127","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_39":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERTag with tagClass 64 and tagNumber 50000 returns 7f838650 and is decoded back to the same values","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_395":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 257 returns 00000101 encoded and decoded 00000101 generates a 257 value with minvalue 0 and maxvalue 4294967295","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_396":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_397":{"methods":[{"sl":55}],"name":"Verify that SequenceOfPsidGroupPermissions is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_399":{"methods":[{"sl":55}],"name":"Verify that PolygonalRegion is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_402":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SymmetricCiphertext is correctly encoded for type aes128ccm","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_403":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 9223372036854775807 returns 087fffffffffffffff encoded and decoded 087fffffffffffffff generates a 9223372036854775807 value with minvalue null and maxvalue null","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_406":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value -9223372036854775808 returns 8000000000000000 encoded and decoded 8000000000000000 generates a -9223372036854775808 value with minvalue -9223372036854775808 and maxvalue 9223372036854775807","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_408":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEROctedStream with value #Error:value returns 060df3acf45678 encoded and decoded 060df3acf45678 generates a #Error:value value with lower bound 5 and upper bound 6","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_409":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 65535 returns ffff encoded and decoded ffff generates a 65535 value with minvalue 0 and maxvalue 65535","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_41":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type microseconds and value 10","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_410":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 0 returns 0100 encoded and decoded 0100 generates a 0 value with minvalue 0 and maxvalue null","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_414":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_418":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_419":{"methods":[{"sl":55}],"name":"Verify deserialization of CrlSeries","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_421":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_422":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that HashedId10 only stores the 10 least significant bytes","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_425":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_427":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequence is encoded and is decoded back to the same values and that preample is correct.[4]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_428":{"methods":[{"sl":55}],"name":"Verify that SequenceOfUint16 is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_432":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 0 returns 0100 encoded and decoded 0100 generates a 0 value with length 8 and fixed size :false","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_435":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SymmetricEncryptionKey is correctly encoded for type aes128Ccm","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_436":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_437":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 1 returns 020204 encoded and decoded 020204 generates a 1 value with length 6 and fixed size :false","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_438":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_440":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERChoice is encoded and is decoded back to the same values[0]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_445":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_455":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 16650241 returns 0000000000fe1001 encoded and decoded 0000000000fe1001 generates a 16650241 value with length 64 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_458":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_46":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that IdentifiedRegion is correctly encoded for type countryOnly and value CountryOnly [10]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_460":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that HashedId3 only stores the 3 least significant bytes","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_47":{"methods":[{"sl":44},{"sl":55}],"name":"Verify constructors","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_475":{"methods":[{"sl":44},{"sl":55}],"name":"Verify constructors","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_476":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 0 returns 0000 encoded and decoded 0000 generates a 0 value with minvalue 0 and maxvalue 65535","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_480":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that LaId stores the data correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_481":{"methods":[{"sl":55}],"name":"Verify that SequenceOfLAGroup is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_483":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequenceOf is encoded and is decoded back to the same values and that the length is correct.[2]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_485":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type hours and value 10","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_490":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEREnumeration is encoded and is decoded back to the same values[0]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_491":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 257 returns 0101 encoded and decoded 0101 generates a 257 value with minvalue 0 and maxvalue 65535","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_496":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that RecipientInfo is correctly encoded for type pskRecipInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_498":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value -128 returns 0180 encoded and decoded 0180 generates a -128 value with minvalue null and maxvalue null","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_499":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SubjectPermissions is correctly encoded for type all","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_500":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEROctedStream with value #Error:value returns 060df3acf45678 encoded and decoded 060df3acf45678 generates a #Error:value value with lower bound 6 and upper bound 7","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_501":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SspRange is correctly encoded for type all","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_503":{"methods":[{"sl":44}],"name":"Verify that serialize ecodes the value 0x0888 properly into: 0x8888","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_508":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 257 returns 0000000000000101 encoded and decoded 0000000000000101 generates a 257 value with minvalue 0 and maxvalue 18446744073709551615","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_509":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_511":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_514":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 4294967295 returns ffffffff encoded and decoded ffffffff generates a 4294967295 value with minvalue 0 and maxvalue 4294967295","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_517":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequence is encoded and is decoded back to the same values and that preample is correct.[2]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_521":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_527":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that PublicVerificationKey is correctly encoded for type ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_53":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_531":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 4294967296 returns 0000000100000000 encoded and decoded 0000000100000000 generates a 4294967296 value with minvalue 0 and maxvalue 18446744073709551615","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_532":{"methods":[{"sl":55}],"name":"Verify that deserialize decodes the value 0x01 properly into: 1","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_533":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that HashedId32 only stores the 32 least significant bytes","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_537":{"methods":[{"sl":55}],"name":"Verify that deserialize decodes the value 0x00 properly into: 0","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_539":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EndEntityType is correctly encoded 11000000 for app true and enroll true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_54":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 16650241 returns fe1001 encoded and decoded fe1001 generates a 16650241 value with length 24 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_542":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EncryptedDataEncryptionKey is correctly encoded for type eciesBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_55":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ElevInt encodes 0 to 0000 and decodes back correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_557":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_56":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_560":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEROctedStream with value #Error:value returns 0df3acf45678 encoded and decoded 0df3acf45678 generates a #Error:value value with lower bound 6 and upper bound 6","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_561":{"methods":[{"sl":44}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_562":{"methods":[{"sl":55}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_565":{"methods":[{"sl":44}],"name":"Verify that IOException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48}]},"test_568":{"methods":[{"sl":55}],"name":"Verify that SequenceOfHashBasedRevocationInfo is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_578":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBoolean with value true returns 00 encoded and encoded 00 generates a true value","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_581":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EccP256CurvePoint is correctly encoded for type xonly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_583":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EccP256CurvePoint is correctly encoded for type uncompressed","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_587":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that RecipientInfo is correctly encoded for type symmRecipInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_589":{"methods":[{"sl":44}],"name":"Verify that serialization produces correct output[2]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_59":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SubjectPermissions is correctly encoded for type explicit","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_592":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_594":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that GeographicRegion is correctly encoded for type rectangularRegion and value SequenceOfRectangularRegion [[northwest=[latitude=123, longitude=234], southeast=[latitude=124, longitude=235]],[northwest=[latitude=124, longitude=235], southeast=[latitude=125, longitude=236]]]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_596":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ElevInt encodes 61440 to efff and decodes back correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_598":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBoolean with value false returns ff encoded and encoded ff generates a false value","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_60":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that IssuerIdentifier is correctly encoded for type self","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_600":{"methods":[{"sl":44},{"sl":55}],"name":"Verify constructors","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_605":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_607":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that VerificationKeyIndicator is correctly encoded for type reconstructionValue","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_608":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_612":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 18446744073709551615 returns ffffffffffffffff encoded and decoded ffffffffffffffff generates a 18446744073709551615 value with minvalue 0 and maxvalue 18446744073709551615","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_613":{"methods":[{"sl":55}],"name":"Verify that SequenceOfRegionAndSubregions is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_615":{"methods":[{"sl":55}],"name":"Verify that SequenceOfGroupCrlEntry is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_618":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERNull with value #value returns #encoded encoded and encoded #encoded generates a #value value","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_62":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CertificateId is correctly encoded for type name","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_622":{"methods":[{"sl":44}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_63":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 10 returns 0a encoded and decoded 0a generates a 10 value with length 8 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_631":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequence is encoded and is decoded back to the same values and that preample is correct.[1]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_635":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_637":{"methods":[{"sl":55}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_638":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERChoice is encoded and is decoded back to the same values[1]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_641":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that HashedId4 only stores the 4 least significant bytes","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_647":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type years and value 10","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_650":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_655":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 255 returns ff encoded and decoded ff generates a 255 value with minvalue 0 and maxvalue 255","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_658":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 0 returns 00 encoded and decoded 00 generates a 0 value with minvalue 0 and maxvalue 255","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_661":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_662":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that GeographicRegion is correctly encoded for type circularRegion and value CircularRegion [center=[latitude=123, longitude=234], radius=5]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_664":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_673":{"methods":[{"sl":44},{"sl":55}],"name":"Verify constructors","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_677":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that IdentifiedRegion is correctly encoded for type countryAndSubregions and value CountryAndSubregions [country=5, region and subregions=RegionAndSubregions [region=5, subregions=12,13],RegionAndSubregions [region=6, subregions=14,15]]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_678":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 18446744073709551615 returns 08ffffffffffffffff encoded and decoded 08ffffffffffffffff generates a 18446744073709551615 value with minvalue 0 and maxvalue null","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_681":{"methods":[{"sl":55}],"name":"Verify that deserialize decodes the value 0x0a properly into: 10","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_688":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that BasePublicEncryptionKey is correctly encoded for type ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_689":{"methods":[{"sl":55}],"name":"Verify that SequenceOfIdentifiedRegion is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_698":{"methods":[{"sl":55}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_7":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 71512240582168577 returns 090000fe100100fe1001 encoded and decoded 090000fe100100fe1001 generates a 71512240582168577 value with length 64 and fixed size :false","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_700":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 0 returns 0000000000000000 encoded and decoded 0000000000000000 generates a 0 value with minvalue 0 and maxvalue 18446744073709551615","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_701":{"methods":[{"sl":44}],"name":"Verify serialization of CrlSeries","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_703":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_704":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_706":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_710":{"methods":[{"sl":55}],"name":"Verify deserialization of EccPoint","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_713":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that IssuerIdentifier is correctly encoded for type sha256AndDigest","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_714":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SspRange is correctly encoded for type opaque","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_715":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_716":{"methods":[{"sl":44}],"name":"Verify that serialize ecodes the value 0x0a properly into: 0x0a","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_717":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_718":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_719":{"methods":[{"sl":55}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_72":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_720":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that HashedData is correctly encoded for type sha256HashedData","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_724":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_726":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ElevInt encodes 1000 to 03e8 and decodes back correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_727":{"methods":[{"sl":55}],"name":"Verify that SequenceOfPsidSspRange is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_728":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 127 returns 7f encoded and decoded 7f generates a 127 value with minvalue -128 and maxvalue 127","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_733":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_735":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_736":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_74":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_743":{"methods":[{"sl":44}],"name":"Verify constructors","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_746":{"methods":[{"sl":55}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_748":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CertificateId is correctly encoded for type binaryId","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_749":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_750":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEROctedStream with value #Error:value returns 060df3acf45678 encoded and decoded 060df3acf45678 generates a #Error:value value with lower bound null and upper bound null","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_751":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value -32768 returns 8000 encoded and decoded 8000 generates a -32768 value with minvalue -32768 and maxvalue 32767","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_760":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EncryptedDataEncryptionKey is correctly encoded for type eciesNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_763":{"methods":[{"sl":44}],"name":"Verify that serialization produces correct output[1]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_769":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_771":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type minutes and value 10","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_772":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERChoice is encoded and is decoded back to the same values[2]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_775":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that SignerIdentifier is correctly encoded for type digest","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_780":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Time32 converts date correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_785":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 40 returns 0502000000a0 encoded and decoded 0502000000a0 generates a 40 value with length 30 and fixed size :false","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_786":{"methods":[{"sl":44}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_789":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that CrlContentsType is correctly encoded for type fullHashCrl","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_790":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_801":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 255 returns 00ff encoded and decoded 00ff generates a 255 value with minvalue 200 and maxvalue 65535","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_803":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 127 returns 0000007f encoded and decoded 0000007f generates a 127 value with minvalue -2147483648 and maxvalue 2147483647","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_804":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_81":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_816":{"methods":[{"sl":44}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_817":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERBitString with value 0 returns 00 encoded and decoded 00 generates a 0 value with length 6 and fixed size :true","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_821":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COEROctedStream with value #Error:value returns 060df3acf45678 encoded and decoded 060df3acf45678 generates a #Error:value value with lower bound null and upper bound 7","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_826":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Signature is correctly encoded for type ecdsaNistP256Signature","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_829":{"methods":[{"sl":55}],"name":"Verify that SequenceOfPsid is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_83":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_843":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_857":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 0 returns 0100 encoded and decoded 0100 generates a 0 value with minvalue 0 and maxvalue 18446744073709551616","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_873":{"methods":[{"sl":55}],"name":"Verify that SequenceOfIndividualRevocation is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_874":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that EndEntityType is correctly encoded 10000000 for app true and enroll false","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_875":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequence is encoded and is decoded back to the same values and that preample is correct.[3]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_891":{"methods":[{"sl":44}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_893":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that LinkageValue stores the data correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_897":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_9":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_901":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that ElevInt encodes -1 to ffff and decodes back correctly","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_907":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_911":{"methods":[{"sl":55}],"name":"Verify that SequenceOfJMaxGroup is initialized properly","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_916":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERInteger with value 0 returns 00000000 encoded and decoded 00000000 generates a 0 value with minvalue 0 and maxvalue 4294967295","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_917":{"methods":[{"sl":44}],"name":"Verify serialization of a hash value","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_919":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that GeographicRegion is correctly encoded for type polygonalRegion and value PolygonalRegion [[latitude=123, longitude=234],[latitude=124, longitude=235],[latitude=125, longitude=236]]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_923":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_924":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Duration is correctly encoded for type microseconds and value 0","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_927":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERSequenceOf is encoded and is decoded back to the same values and that the length is correct.[0]","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_935":{"methods":[{"sl":55}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_946":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_95":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type unsecuredData","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_950":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_960":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that VerificationKeyIndicator is correctly encoded for type verificationKey","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_962":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_968":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that COERTag with tagClass 128 and tagNumber 15 returns 8f and is decoded back to the same values","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_97":{"methods":[{"sl":55}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_98":{"methods":[{"sl":44}],"name":"Verify that serialize ecodes the value 0x00 properly into: 0x00","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_982":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]},"test_985":{"methods":[{"sl":44},{"sl":55}],"name":"Verify that Signature is correctly encoded for type ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52},{"sl":56},{"sl":57},{"sl":59},{"sl":60},{"sl":62}]},"test_988":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":52}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [25, 897, 383, 496, 184, 59, 148, 205, 212, 132, 517, 246, 688, 319, 111, 483, 893, 163, 598, 743, 817, 331, 917, 214, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 247, 285, 54, 491, 821, 33, 561, 962, 35, 509, 41, 408, 316, 226, 186, 150, 658, 455, 706, 490, 422, 343, 396, 346, 857, 144, 293, 414, 83, 622, 968, 21, 131, 874, 733, 14, 372, 72, 440, 816, 254, 600, 173, 924, 305, 527, 780, 438, 592, 982, 197, 119, 565, 583, 298, 927, 499, 345, 641, 302, 891, 735, 501, 677, 476, 751, 387, 631, 514, 137, 843, 177, 985, 327, 771, 750, 403, 717, 62, 360, 716, 161, 318, 260, 511, 140, 581, 277, 988, 385, 133, 790, 262, 673, 701, 638, 662, 445, 901, 330, 421, 175, 145, 9, 557, 95, 250, 19, 724, 760, 282, 60, 475, 11, 427, 678, 607, 259, 286, 785, 748, 458, 379, 55, 425, 159, 263, 789, 210, 946, 916, 380, 104, 229, 63, 647, 608, 30, 56, 121, 355, 749, 228, 720, 135, 381, 410, 36, 219, 763, 29, 508, 395, 365, 220, 348, 907, 533, 46, 700, 500, 775, 98, 333, 521, 406, 191, 7, 112, 289, 704, 47, 432, 594, 605, 435, 402, 81, 498, 786, 301, 264, 485, 950, 141, 539, 53, 655, 232, 292, 17, 612, 618, 560, 960, 275, 409, 726, 169, 728, 460, 26, 437, 736, 589, 480, 713, 503, 201, 587, 39, 875, 578, 304, 772, 919, 714, 237, 334], [25, 897, 383, 496, 184, 59, 148, 205, 212, 132, 517, 246, 688, 319, 111, 483, 893, 163, 598, 743, 817, 331, 917, 214, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 247, 285, 54, 491, 821, 33, 561, 962, 35, 509, 41, 408, 316, 226, 186, 150, 658, 455, 706, 490, 422, 343, 396, 346, 857, 144, 293, 414, 83, 622, 968, 21, 131, 874, 733, 14, 372, 72, 440, 816, 254, 600, 173, 924, 305, 527, 780, 438, 592, 982, 197, 119, 565, 583, 298, 927, 499, 345, 641, 302, 891, 735, 501, 677, 476, 751, 387, 631, 514, 137, 843, 177, 985, 327, 771, 750, 403, 717, 62, 360, 716, 161, 318, 260, 511, 140, 581, 277, 988, 385, 133, 790, 262, 673, 701, 638, 662, 445, 901, 330, 421, 175, 145, 9, 557, 95, 250, 19, 724, 760, 282, 60, 475, 11, 427, 678, 607, 259, 286, 785, 748, 458, 379, 55, 425, 159, 263, 789, 210, 946, 916, 380, 104, 229, 63, 647, 608, 30, 56, 121, 355, 749, 228, 720, 135, 381, 410, 36, 219, 763, 29, 508, 395, 365, 220, 348, 907, 533, 46, 700, 500, 775, 98, 333, 521, 406, 191, 7, 112, 289, 704, 47, 432, 594, 605, 435, 402, 81, 498, 786, 301, 264, 485, 950, 141, 539, 53, 655, 232, 292, 17, 612, 618, 560, 960, 275, 409, 726, 169, 728, 460, 26, 437, 736, 589, 480, 713, 503, 201, 587, 39, 875, 578, 304, 772, 919, 714, 237, 334], [25, 897, 383, 496, 184, 59, 148, 205, 212, 132, 517, 246, 688, 319, 111, 483, 893, 163, 598, 743, 817, 331, 917, 214, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 247, 285, 54, 491, 821, 33, 561, 962, 35, 509, 41, 408, 316, 226, 186, 150, 658, 455, 706, 490, 422, 343, 396, 346, 857, 144, 293, 414, 83, 622, 968, 21, 131, 874, 733, 14, 372, 72, 440, 816, 254, 600, 173, 924, 305, 527, 780, 438, 592, 982, 197, 119, 565, 583, 298, 927, 499, 345, 641, 302, 891, 735, 501, 677, 476, 751, 387, 631, 514, 137, 843, 177, 985, 327, 771, 750, 403, 717, 62, 360, 716, 161, 318, 260, 511, 140, 581, 277, 988, 385, 133, 790, 262, 673, 701, 638, 662, 445, 901, 330, 421, 175, 145, 9, 557, 95, 250, 19, 724, 760, 282, 60, 475, 11, 427, 678, 607, 259, 286, 785, 748, 458, 379, 55, 425, 159, 263, 789, 210, 946, 916, 380, 104, 229, 63, 647, 608, 30, 56, 121, 355, 749, 228, 720, 135, 381, 410, 36, 219, 763, 29, 508, 395, 365, 220, 348, 907, 533, 46, 700, 500, 775, 98, 333, 521, 406, 191, 7, 112, 289, 704, 47, 432, 594, 605, 435, 402, 81, 498, 786, 301, 264, 485, 950, 141, 539, 53, 655, 232, 292, 17, 612, 618, 560, 960, 275, 409, 726, 169, 728, 460, 26, 437, 736, 589, 480, 713, 503, 201, 587, 39, 875, 578, 304, 772, 919, 714, 237, 334], [], [25, 897, 383, 496, 184, 59, 148, 205, 212, 132, 517, 246, 688, 319, 111, 483, 893, 163, 598, 743, 817, 331, 917, 214, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 247, 285, 54, 491, 821, 33, 561, 962, 35, 509, 41, 408, 316, 226, 186, 150, 658, 455, 706, 490, 422, 343, 396, 346, 857, 144, 293, 414, 83, 622, 968, 21, 131, 874, 733, 14, 372, 72, 440, 816, 254, 600, 173, 924, 305, 527, 780, 438, 592, 982, 197, 119, 565, 583, 298, 927, 499, 345, 641, 302, 891, 735, 501, 677, 476, 751, 387, 631, 514, 137, 843, 177, 985, 327, 771, 750, 403, 717, 62, 360, 716, 161, 318, 260, 511, 140, 581, 277, 988, 385, 133, 790, 262, 673, 701, 638, 662, 445, 901, 330, 421, 175, 145, 9, 557, 95, 250, 19, 724, 760, 282, 60, 475, 11, 427, 678, 607, 259, 286, 785, 748, 458, 379, 55, 425, 159, 263, 789, 210, 946, 916, 380, 104, 229, 63, 647, 608, 30, 56, 121, 355, 749, 228, 720, 135, 381, 410, 36, 219, 763, 29, 508, 395, 365, 220, 348, 907, 533, 46, 700, 500, 775, 98, 333, 521, 406, 191, 7, 112, 289, 704, 47, 432, 594, 605, 435, 402, 81, 498, 786, 301, 264, 485, 950, 141, 539, 53, 655, 232, 292, 17, 612, 618, 560, 960, 275, 409, 726, 169, 728, 460, 26, 437, 736, 589, 480, 713, 503, 201, 587, 39, 875, 578, 304, 772, 919, 714, 237, 334], [25, 897, 383, 496, 184, 59, 148, 205, 212, 132, 517, 246, 688, 319, 483, 893, 163, 598, 743, 817, 331, 917, 214, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 247, 285, 54, 491, 821, 33, 561, 962, 35, 509, 41, 408, 316, 226, 186, 150, 658, 455, 706, 490, 422, 343, 396, 346, 857, 144, 293, 414, 83, 622, 968, 21, 131, 874, 733, 14, 372, 72, 440, 816, 254, 600, 173, 924, 305, 527, 780, 438, 592, 982, 197, 119, 583, 298, 927, 499, 345, 641, 302, 891, 735, 501, 677, 476, 751, 387, 631, 514, 137, 843, 177, 985, 327, 771, 750, 403, 717, 62, 360, 716, 161, 318, 260, 511, 140, 581, 277, 988, 385, 133, 790, 262, 673, 701, 638, 662, 445, 901, 330, 421, 175, 145, 9, 557, 95, 250, 19, 724, 760, 282, 60, 475, 11, 427, 678, 607, 259, 286, 785, 748, 458, 379, 55, 425, 159, 263, 789, 210, 946, 916, 380, 104, 229, 63, 647, 608, 30, 56, 121, 355, 749, 228, 720, 135, 381, 410, 36, 219, 763, 29, 508, 395, 365, 220, 348, 907, 533, 46, 700, 500, 775, 98, 333, 521, 406, 191, 7, 112, 289, 704, 47, 432, 594, 605, 435, 402, 81, 498, 786, 301, 264, 485, 950, 141, 539, 53, 655, 232, 292, 17, 612, 618, 560, 960, 275, 409, 726, 169, 728, 460, 26, 437, 736, 589, 480, 713, 503, 201, 587, 39, 875, 578, 304, 772, 919, 714, 237, 334], [], [], [25, 897, 383, 496, 184, 59, 148, 205, 212, 132, 517, 246, 688, 319, 483, 893, 163, 598, 743, 817, 331, 917, 214, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 247, 285, 54, 491, 821, 33, 561, 962, 35, 509, 41, 408, 316, 226, 186, 150, 658, 455, 706, 490, 422, 343, 396, 346, 857, 144, 293, 414, 83, 622, 968, 21, 131, 874, 733, 14, 372, 72, 440, 816, 254, 600, 173, 924, 305, 527, 780, 438, 592, 982, 197, 119, 583, 298, 927, 499, 345, 641, 302, 891, 735, 501, 677, 476, 751, 387, 631, 514, 137, 843, 177, 985, 327, 771, 750, 403, 717, 62, 360, 716, 161, 318, 260, 511, 140, 581, 277, 988, 385, 133, 790, 262, 673, 701, 638, 662, 445, 901, 330, 421, 175, 145, 9, 557, 95, 250, 19, 724, 760, 282, 60, 475, 11, 427, 678, 607, 259, 286, 785, 748, 458, 379, 55, 425, 159, 263, 789, 210, 946, 916, 380, 104, 229, 63, 647, 608, 30, 56, 121, 355, 749, 228, 720, 135, 381, 410, 36, 219, 763, 29, 508, 395, 365, 220, 348, 907, 533, 46, 700, 500, 775, 98, 333, 521, 406, 191, 7, 112, 289, 704, 47, 432, 594, 605, 435, 402, 81, 498, 786, 301, 264, 485, 950, 141, 539, 53, 655, 232, 292, 17, 612, 618, 560, 960, 275, 409, 726, 169, 728, 460, 26, 437, 736, 589, 480, 713, 503, 201, 587, 39, 875, 578, 304, 772, 919, 714, 237, 334], [], [], [25, 897, 496, 59, 148, 205, 374, 212, 132, 517, 873, 246, 688, 483, 893, 163, 598, 817, 331, 214, 664, 801, 129, 243, 596, 337, 241, 225, 803, 826, 531, 542, 363, 170, 183, 285, 54, 491, 821, 962, 35, 15, 509, 41, 408, 316, 150, 658, 455, 706, 490, 422, 343, 346, 857, 144, 293, 562, 968, 21, 287, 131, 874, 312, 14, 372, 72, 440, 254, 600, 173, 924, 305, 306, 527, 780, 592, 266, 197, 923, 119, 583, 298, 927, 499, 345, 641, 718, 302, 428, 501, 677, 681, 476, 751, 387, 631, 217, 514, 843, 177, 703, 985, 327, 727, 771, 750, 403, 717, 62, 360, 350, 318, 260, 140, 581, 277, 537, 385, 719, 715, 790, 130, 673, 638, 280, 662, 445, 901, 330, 419, 421, 175, 145, 650, 9, 235, 710, 557, 532, 95, 361, 250, 19, 18, 724, 760, 282, 60, 475, 11, 427, 678, 607, 157, 286, 785, 748, 105, 458, 231, 379, 399, 55, 425, 233, 263, 789, 613, 210, 946, 916, 380, 104, 397, 229, 436, 63, 647, 608, 30, 153, 38, 56, 121, 355, 749, 228, 769, 720, 637, 135, 381, 410, 418, 36, 29, 508, 395, 220, 348, 907, 533, 46, 284, 249, 700, 500, 775, 74, 333, 521, 134, 258, 406, 97, 191, 7, 911, 289, 704, 689, 47, 432, 594, 935, 568, 435, 402, 81, 349, 498, 301, 661, 264, 485, 141, 539, 635, 615, 655, 232, 292, 17, 612, 618, 560, 960, 481, 275, 409, 829, 726, 169, 728, 460, 26, 437, 736, 804, 480, 746, 713, 201, 587, 39, 875, 698, 578, 304, 772, 919, 714, 237], [25, 897, 496, 59, 148, 205, 374, 212, 132, 517, 873, 246, 688, 483, 893, 163, 598, 817, 331, 214, 664, 801, 129, 243, 596, 337, 241, 225, 803, 826, 531, 542, 363, 170, 183, 285, 54, 491, 821, 962, 35, 15, 509, 41, 408, 316, 150, 658, 455, 706, 490, 422, 343, 346, 857, 144, 293, 562, 968, 21, 287, 131, 874, 312, 14, 372, 72, 440, 254, 600, 173, 924, 305, 306, 527, 780, 592, 266, 197, 923, 119, 583, 298, 927, 499, 345, 641, 718, 302, 428, 501, 677, 681, 476, 751, 387, 631, 217, 514, 843, 177, 703, 985, 327, 727, 771, 750, 403, 717, 62, 360, 350, 318, 260, 140, 581, 277, 537, 385, 719, 715, 790, 130, 673, 638, 280, 662, 445, 901, 330, 419, 421, 175, 145, 650, 9, 235, 710, 557, 532, 95, 361, 250, 19, 18, 724, 760, 282, 60, 475, 11, 427, 678, 607, 157, 286, 785, 748, 105, 458, 231, 379, 399, 55, 425, 233, 263, 789, 613, 210, 946, 916, 380, 104, 397, 229, 436, 63, 647, 608, 30, 153, 38, 56, 121, 355, 749, 228, 769, 720, 637, 135, 381, 410, 418, 36, 29, 508, 395, 220, 348, 907, 533, 46, 284, 249, 700, 500, 775, 74, 333, 521, 134, 258, 406, 97, 191, 7, 911, 289, 704, 689, 47, 432, 594, 935, 568, 435, 402, 81, 349, 498, 301, 661, 264, 485, 141, 539, 635, 615, 655, 232, 292, 17, 612, 618, 560, 960, 481, 275, 409, 829, 726, 169, 728, 460, 26, 437, 736, 804, 480, 746, 713, 201, 587, 39, 875, 698, 578, 304, 772, 919, 714, 237], [25, 897, 496, 59, 148, 205, 374, 212, 132, 517, 873, 246, 688, 483, 893, 163, 598, 817, 331, 214, 664, 801, 129, 243, 596, 337, 241, 225, 803, 826, 531, 542, 363, 170, 183, 285, 54, 491, 821, 962, 35, 15, 509, 41, 408, 316, 150, 658, 455, 706, 490, 422, 343, 346, 857, 144, 293, 562, 968, 21, 287, 131, 874, 312, 14, 372, 72, 440, 254, 600, 173, 924, 305, 306, 527, 780, 592, 266, 197, 923, 119, 583, 298, 927, 499, 345, 641, 718, 302, 428, 501, 677, 681, 476, 751, 387, 631, 217, 514, 843, 177, 703, 985, 327, 727, 771, 750, 403, 717, 62, 360, 350, 318, 260, 140, 581, 277, 537, 385, 719, 715, 790, 130, 673, 638, 280, 662, 445, 901, 330, 419, 421, 175, 145, 650, 9, 235, 710, 557, 532, 95, 361, 250, 19, 18, 724, 760, 282, 60, 475, 11, 427, 678, 607, 157, 286, 785, 748, 105, 458, 231, 379, 399, 55, 425, 233, 263, 789, 613, 210, 946, 916, 380, 104, 397, 229, 436, 63, 647, 608, 30, 153, 38, 56, 121, 355, 749, 228, 769, 720, 637, 135, 381, 410, 418, 36, 29, 508, 395, 220, 348, 907, 533, 46, 284, 249, 700, 500, 775, 74, 333, 521, 134, 258, 406, 97, 191, 7, 911, 289, 704, 689, 47, 432, 594, 935, 568, 435, 402, 81, 349, 498, 301, 661, 264, 485, 141, 539, 635, 615, 655, 232, 292, 17, 612, 618, 560, 960, 481, 275, 409, 829, 726, 169, 728, 460, 26, 437, 736, 804, 480, 746, 713, 201, 587, 39, 875, 698, 578, 304, 772, 919, 714, 237], [], [25, 897, 496, 59, 148, 205, 374, 212, 132, 517, 873, 246, 688, 483, 893, 163, 598, 817, 331, 214, 664, 801, 129, 243, 596, 337, 241, 225, 803, 826, 531, 542, 363, 170, 183, 285, 54, 491, 821, 962, 35, 15, 509, 41, 408, 316, 150, 658, 455, 706, 490, 422, 343, 346, 857, 144, 293, 562, 968, 21, 287, 131, 874, 312, 14, 372, 72, 440, 254, 600, 173, 924, 305, 306, 527, 780, 592, 266, 197, 923, 119, 583, 298, 927, 499, 345, 641, 718, 302, 428, 501, 677, 681, 476, 751, 387, 631, 217, 514, 843, 177, 703, 985, 327, 727, 771, 750, 403, 717, 62, 360, 350, 318, 260, 140, 581, 277, 537, 385, 719, 715, 790, 130, 673, 638, 280, 662, 445, 901, 330, 419, 421, 175, 145, 650, 9, 235, 710, 557, 532, 95, 361, 250, 19, 18, 724, 760, 282, 60, 475, 11, 427, 678, 607, 157, 286, 785, 748, 105, 458, 231, 379, 399, 55, 425, 233, 263, 789, 613, 210, 946, 916, 380, 104, 397, 229, 436, 63, 647, 608, 30, 153, 38, 56, 121, 355, 749, 228, 769, 720, 637, 135, 381, 410, 418, 36, 29, 508, 395, 220, 348, 907, 533, 46, 284, 249, 700, 500, 775, 74, 333, 521, 134, 258, 406, 97, 191, 7, 911, 289, 704, 689, 47, 432, 594, 935, 568, 435, 402, 81, 349, 498, 301, 661, 264, 485, 141, 539, 635, 615, 655, 232, 292, 17, 612, 618, 560, 960, 481, 275, 409, 829, 726, 169, 728, 460, 26, 437, 736, 804, 480, 746, 713, 201, 587, 39, 875, 698, 578, 304, 772, 919, 714, 237], [25, 897, 496, 59, 148, 205, 374, 212, 132, 517, 873, 246, 688, 483, 893, 163, 598, 817, 331, 214, 664, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 363, 170, 183, 285, 54, 491, 821, 962, 35, 15, 509, 41, 408, 316, 150, 658, 455, 706, 490, 422, 343, 346, 857, 144, 293, 562, 968, 21, 287, 131, 874, 312, 14, 372, 72, 440, 254, 600, 173, 924, 305, 306, 527, 780, 592, 266, 197, 923, 119, 583, 298, 927, 499, 345, 641, 718, 302, 428, 501, 677, 681, 476, 751, 387, 631, 217, 514, 843, 177, 703, 985, 327, 727, 771, 750, 403, 717, 62, 360, 350, 318, 260, 140, 581, 277, 537, 385, 719, 715, 790, 130, 673, 638, 280, 662, 445, 901, 330, 419, 421, 175, 145, 650, 9, 235, 710, 557, 532, 95, 361, 250, 19, 18, 724, 760, 282, 60, 475, 11, 427, 678, 607, 157, 286, 785, 748, 105, 458, 231, 379, 399, 55, 425, 233, 263, 789, 613, 210, 946, 916, 380, 104, 397, 229, 436, 63, 647, 608, 30, 153, 38, 56, 121, 355, 749, 228, 769, 720, 637, 135, 381, 410, 418, 36, 29, 508, 395, 220, 348, 907, 533, 46, 284, 249, 700, 500, 775, 74, 333, 521, 134, 258, 406, 97, 191, 7, 911, 289, 704, 689, 47, 432, 594, 935, 568, 435, 402, 81, 349, 498, 301, 661, 264, 485, 141, 539, 635, 615, 655, 232, 292, 17, 612, 618, 560, 960, 481, 275, 409, 829, 726, 169, 728, 460, 26, 437, 736, 804, 480, 746, 713, 201, 587, 39, 875, 698, 578, 304, 772, 919, 714, 237], [], [25, 897, 496, 59, 148, 205, 374, 212, 132, 517, 873, 246, 688, 483, 893, 163, 598, 817, 331, 214, 664, 801, 129, 596, 337, 241, 225, 803, 826, 531, 542, 363, 170, 183, 285, 54, 491, 821, 962, 35, 15, 509, 41, 408, 316, 150, 658, 455, 706, 490, 422, 343, 346, 857, 144, 293, 562, 968, 21, 287, 131, 874, 312, 14, 372, 72, 440, 254, 600, 173, 924, 305, 306, 527, 780, 592, 266, 197, 923, 119, 583, 298, 927, 499, 345, 641, 718, 302, 428, 501, 677, 681, 476, 751, 387, 631, 217, 514, 843, 177, 703, 985, 327, 727, 771, 750, 403, 717, 62, 360, 350, 318, 260, 140, 581, 277, 537, 385, 719, 715, 790, 130, 673, 638, 280, 662, 445, 901, 330, 419, 421, 175, 145, 650, 9, 235, 710, 557, 532, 95, 361, 250, 19, 18, 724, 760, 282, 60, 475, 11, 427, 678, 607, 157, 286, 785, 748, 105, 458, 231, 379, 399, 55, 425, 233, 263, 789, 613, 210, 946, 916, 380, 104, 397, 229, 436, 63, 647, 608, 30, 153, 38, 56, 121, 355, 749, 228, 769, 720, 637, 135, 381, 410, 418, 36, 29, 508, 395, 220, 348, 907, 533, 46, 284, 249, 700, 500, 775, 74, 333, 521, 134, 258, 406, 97, 191, 7, 911, 289, 704, 689, 47, 432, 594, 935, 568, 435, 402, 81, 349, 498, 301, 661, 264, 485, 141, 539, 635, 615, 655, 232, 292, 17, 612, 618, 560, 960, 481, 275, 409, 829, 726, 169, 728, 460, 26, 437, 736, 804, 480, 746, 713, 201, 587, 39, 875, 698, 578, 304, 772, 919, 714, 237], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
