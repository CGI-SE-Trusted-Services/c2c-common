var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":89,"id":3556,"methods":[{"el":64,"sc":2,"sl":62},{"el":72,"sc":2,"sl":70},{"el":79,"sc":2,"sl":77},{"el":87,"sc":2,"sl":81}],"name":"SubjectPermissions","sl":39},{"el":55,"id":3556,"methods":[{"el":54,"sc":3,"sl":48}],"name":"SubjectPermissions.SubjectPermissionsChoices","sl":44}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_128":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_136":{"methods":[{"sl":70}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":71}]},"test_16":{"methods":[{"sl":48},{"sl":70}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":50},{"sl":53},{"sl":71}]},"test_163":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_168":{"methods":[{"sl":62},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":63},{"sl":83},{"sl":84},{"sl":86}]},"test_172":{"methods":[{"sl":70},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":71},{"sl":83},{"sl":84}]},"test_185":{"methods":[{"sl":70}],"name":"Verify toString","pass":true,"statements":[{"sl":71}]},"test_199":{"methods":[{"sl":70}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[{"sl":71}]},"test_226":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_239":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_246":{"methods":[{"sl":70},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":71},{"sl":83},{"sl":84}]},"test_248":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_261":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_278":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_312":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_324":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_35":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_354":{"methods":[{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71},{"sl":78}]},"test_360":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_373":{"methods":[{"sl":48},{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that SubjectPermissions is correctly encoded for type all","pass":true,"statements":[{"sl":50},{"sl":53},{"sl":63},{"sl":71},{"sl":78}]},"test_385":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_406":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_417":{"methods":[{"sl":70}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":71}]},"test_422":{"methods":[{"sl":48},{"sl":70}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":50},{"sl":53},{"sl":71}]},"test_437":{"methods":[{"sl":48},{"sl":70}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":50},{"sl":53},{"sl":71}]},"test_455":{"methods":[{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71},{"sl":78}]},"test_465":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_482":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_483":{"methods":[{"sl":70},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":71},{"sl":83},{"sl":84}]},"test_485":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_486":{"methods":[{"sl":48},{"sl":70}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":50},{"sl":53},{"sl":71}]},"test_498":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_499":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_523":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_532":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_54":{"methods":[{"sl":70}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":71}]},"test_547":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_55":{"methods":[{"sl":70}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":71}]},"test_557":{"methods":[{"sl":48},{"sl":70}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":50},{"sl":53},{"sl":71}]},"test_567":{"methods":[{"sl":62},{"sl":70}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_569":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_587":{"methods":[{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71},{"sl":78}]},"test_608":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_609":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_616":{"methods":[{"sl":70}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":71}]},"test_62":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_625":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_637":{"methods":[{"sl":70}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":71}]},"test_650":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_654":{"methods":[{"sl":48},{"sl":70}],"name":"Verify that SequenceOfPsidGroupPermissions is initialized properly","pass":true,"statements":[{"sl":50},{"sl":53},{"sl":71}]},"test_656":{"methods":[{"sl":70}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":71}]},"test_665":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_670":{"methods":[{"sl":70}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":71}]},"test_685":{"methods":[{"sl":70}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":71}]},"test_686":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_689":{"methods":[{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71},{"sl":78}]},"test_696":{"methods":[{"sl":48},{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that SubjectPermissions is correctly encoded for type explicit","pass":true,"statements":[{"sl":50},{"sl":51},{"sl":63},{"sl":71},{"sl":78}]},"test_729":{"methods":[{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71},{"sl":78}]},"test_735":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_74":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_749":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_75":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_769":{"methods":[{"sl":62},{"sl":70},{"sl":77}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71},{"sl":78}]},"test_774":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_79":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_818":{"methods":[{"sl":70}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":71}]},"test_829":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_901":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_923":{"methods":[{"sl":70},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":71},{"sl":83},{"sl":84}]},"test_939":{"methods":[{"sl":70}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":71}]},"test_946":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":63},{"sl":71}]},"test_947":{"methods":[{"sl":70}],"name":"Verify toString","pass":true,"statements":[{"sl":71}]},"test_960":{"methods":[{"sl":62},{"sl":70}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":63},{"sl":71}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [16, 422, 557, 486, 373, 654, 437, 696], [], [16, 422, 557, 486, 373, 654, 437, 696], [696], [], [16, 422, 557, 486, 373, 654, 437], [], [], [], [], [], [], [], [], [261, 35, 625, 901, 547, 587, 665, 239, 735, 385, 532, 79, 324, 312, 406, 75, 360, 769, 168, 74, 960, 128, 373, 226, 499, 465, 482, 946, 686, 354, 455, 729, 567, 569, 829, 523, 689, 248, 774, 749, 278, 163, 608, 62, 650, 696, 0, 498, 609, 485], [261, 35, 625, 901, 547, 587, 665, 239, 735, 385, 532, 79, 324, 312, 406, 75, 360, 769, 168, 74, 960, 128, 373, 226, 499, 465, 482, 946, 686, 354, 455, 729, 567, 569, 829, 523, 689, 248, 774, 749, 278, 163, 608, 62, 650, 696, 0, 498, 609, 485], [], [], [], [], [], [], [16, 261, 35, 625, 901, 547, 587, 665, 422, 55, 239, 735, 385, 557, 532, 79, 637, 324, 947, 312, 406, 185, 75, 360, 246, 939, 486, 769, 74, 960, 417, 128, 373, 226, 499, 465, 482, 818, 946, 686, 354, 670, 136, 455, 729, 656, 567, 654, 569, 829, 437, 523, 685, 689, 248, 483, 923, 774, 749, 278, 163, 54, 608, 172, 62, 650, 616, 696, 0, 199, 498, 609, 485], [16, 261, 35, 625, 901, 547, 587, 665, 422, 55, 239, 735, 385, 557, 532, 79, 637, 324, 947, 312, 406, 185, 75, 360, 246, 939, 486, 769, 74, 960, 417, 128, 373, 226, 499, 465, 482, 818, 946, 686, 354, 670, 136, 455, 729, 656, 567, 654, 569, 829, 437, 523, 685, 689, 248, 483, 923, 774, 749, 278, 163, 54, 608, 172, 62, 650, 616, 696, 0, 199, 498, 609, 485], [], [], [], [], [], [587, 769, 373, 354, 455, 729, 689, 696], [587, 769, 373, 354, 455, 729, 689, 696], [], [], [246, 168, 483, 923, 172], [], [246, 168, 483, 923, 172], [246, 168, 483, 923, 172], [], [168], [], [], []]
