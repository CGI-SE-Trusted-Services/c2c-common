var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":381,"id":9946,"methods":[{"el":363,"sc":2,"sl":331},{"el":121,"sc":2,"sl":96},{"el":142,"sc":2,"sl":123},{"el":175,"sc":2,"sl":144},{"el":202,"sc":2,"sl":177},{"el":223,"sc":2,"sl":205},{"el":234,"sc":2,"sl":225},{"el":241,"sc":2,"sl":236},{"el":273,"sc":2,"sl":246},{"el":328,"sc":2,"sl":324}],"name":"CertificateSpec","sl":86}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_128":{"methods":[{"sl":123}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":126},{"sl":127},{"sl":129},{"sl":130},{"sl":131},{"sl":132},{"sl":135},{"sl":136},{"sl":138},{"sl":139}]},"test_238":{"methods":[{"sl":236}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":238},{"sl":240}]},"test_250":{"methods":[{"sl":96}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":99},{"sl":101},{"sl":103},{"sl":105},{"sl":106},{"sl":107},{"sl":108},{"sl":109},{"sl":114},{"sl":116},{"sl":118},{"sl":120}]},"test_298":{"methods":[{"sl":177}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":180},{"sl":182},{"sl":184},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190},{"sl":194},{"sl":197},{"sl":199},{"sl":201}]},"test_332":{"methods":[{"sl":324}],"name":"Verify toString","pass":true,"statements":[{"sl":326},{"sl":327}]},"test_364":{"methods":[{"sl":123}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":126},{"sl":127},{"sl":129},{"sl":130},{"sl":131},{"sl":132},{"sl":135},{"sl":136},{"sl":138},{"sl":139}]},"test_585":{"methods":[{"sl":144}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":146},{"sl":147},{"sl":148},{"sl":150},{"sl":151},{"sl":152},{"sl":153},{"sl":155},{"sl":157},{"sl":159},{"sl":161},{"sl":163},{"sl":165},{"sl":167},{"sl":169},{"sl":171},{"sl":173}]},"test_590":{"methods":[{"sl":205}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":208},{"sl":210},{"sl":212},{"sl":214},{"sl":216},{"sl":218},{"sl":220},{"sl":222}]},"test_877":{"methods":[{"sl":246}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":248},{"sl":250},{"sl":271}]},"test_966":{"methods":[{"sl":225}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":227},{"sl":229},{"sl":231},{"sl":233}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines
