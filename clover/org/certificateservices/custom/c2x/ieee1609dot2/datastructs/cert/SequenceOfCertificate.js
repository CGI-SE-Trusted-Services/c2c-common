var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":70,"id":3510,"methods":[{"el":36,"sc":2,"sl":34},{"el":43,"sc":2,"sl":41},{"el":50,"sc":2,"sl":48},{"el":69,"sc":2,"sl":53}],"name":"SequenceOfCertificate","sl":27}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_128":{"methods":[{"sl":41}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":42}]},"test_136":{"methods":[{"sl":34}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":35}]},"test_185":{"methods":[{"sl":34},{"sl":48},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":35},{"sl":49},{"sl":55},{"sl":56},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_248":{"methods":[{"sl":48}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":49}]},"test_326":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_417":{"methods":[{"sl":34},{"sl":41},{"sl":48}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":35},{"sl":42},{"sl":49}]},"test_465":{"methods":[{"sl":41}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":42}]},"test_482":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_485":{"methods":[{"sl":41}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_608":{"methods":[{"sl":41}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_616":{"methods":[{"sl":34},{"sl":53}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":35},{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_670":{"methods":[{"sl":34}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":35}]},"test_708":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_74":{"methods":[{"sl":48}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":49}]},"test_75":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_756":{"methods":[{"sl":53}],"name":"Verify toString()","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_818":{"methods":[{"sl":34},{"sl":41},{"sl":48}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":35},{"sl":42},{"sl":49}]},"test_947":{"methods":[{"sl":34},{"sl":48},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":35},{"sl":49},{"sl":55},{"sl":56},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [947, 185, 417, 818, 670, 136, 616], [947, 185, 417, 818, 670, 136, 616], [], [], [], [], [], [75, 417, 128, 465, 482, 818, 608, 485], [75, 417, 128, 465, 482, 818, 608, 485], [], [], [], [], [], [947, 185, 74, 417, 818, 248], [947, 185, 74, 417, 818, 248], [], [], [], [756, 947, 185, 708, 326, 616], [], [756, 947, 185, 708, 326, 616], [947, 185], [], [756, 947, 185, 708, 326, 616], [756, 947, 185, 708, 326, 616], [756, 947, 185, 708, 326, 616], [756, 947, 185, 708, 326], [], [756, 947, 185, 708, 326, 616], [756, 947, 185, 708, 326, 616], [], [], [756, 947, 185, 708, 326, 616], [756, 947, 185, 708, 326, 616], [], []]
