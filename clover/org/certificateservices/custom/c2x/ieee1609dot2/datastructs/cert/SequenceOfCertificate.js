var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":70,"id":3655,"methods":[{"el":36,"sc":2,"sl":34},{"el":43,"sc":2,"sl":41},{"el":50,"sc":2,"sl":48},{"el":69,"sc":2,"sl":53}],"name":"SequenceOfCertificate","sl":27}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_123":{"methods":[{"sl":48}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":49}]},"test_144":{"methods":[{"sl":34}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":35}]},"test_307":{"methods":[{"sl":41}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":42}]},"test_40":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_421":{"methods":[{"sl":34}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":35}]},"test_447":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_471":{"methods":[{"sl":34},{"sl":48},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":35},{"sl":49},{"sl":55},{"sl":56},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_473":{"methods":[{"sl":48}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":49}]},"test_549":{"methods":[{"sl":41}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_61":{"methods":[{"sl":41}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":42}]},"test_698":{"methods":[{"sl":34},{"sl":41},{"sl":48}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":35},{"sl":42},{"sl":49}]},"test_719":{"methods":[{"sl":34},{"sl":41},{"sl":48}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":35},{"sl":42},{"sl":49}]},"test_815":{"methods":[{"sl":41}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_856":{"methods":[{"sl":53}],"name":"Verify toString()","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_869":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_870":{"methods":[{"sl":34},{"sl":48},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":35},{"sl":49},{"sl":55},{"sl":56},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_949":{"methods":[{"sl":34},{"sl":53}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":35},{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]},"test_953":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":63},{"sl":64},{"sl":67},{"sl":68}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [421, 870, 144, 698, 719, 949, 471], [421, 870, 144, 698, 719, 949, 471], [], [], [], [], [], [815, 549, 447, 307, 61, 40, 698, 719], [815, 549, 447, 307, 61, 40, 698, 719], [], [], [], [], [], [123, 473, 870, 698, 719, 471], [123, 473, 870, 698, 719, 471], [], [], [], [870, 869, 856, 953, 949, 471], [], [870, 869, 856, 953, 949, 471], [870, 471], [], [870, 869, 856, 953, 949, 471], [870, 869, 856, 953, 949, 471], [870, 869, 856, 953, 949, 471], [870, 869, 856, 953, 471], [], [870, 869, 856, 953, 949, 471], [870, 869, 856, 953, 949, 471], [], [], [870, 869, 856, 953, 949, 471], [870, 869, 856, 953, 949, 471], [], []]
