var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":106,"id":4326,"methods":[{"el":70,"sc":2,"sl":68},{"el":77,"sc":2,"sl":75},{"el":84,"sc":2,"sl":82},{"el":92,"sc":2,"sl":90},{"el":99,"sc":2,"sl":97},{"el":104,"sc":2,"sl":101}],"name":"RecipientInfo","sl":40},{"el":63,"id":4326,"methods":[{"el":62,"sc":3,"sl":52}],"name":"RecipientInfo.RecipientInfoChoices","sl":45}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_239":{"methods":[{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":83},{"sl":91},{"sl":98}]},"test_240":{"methods":[{"sl":52},{"sl":90}],"name":"Verify that SequenceOfRecipientInfo is initialized properly","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56},{"sl":91}]},"test_286":{"methods":[{"sl":68},{"sl":90},{"sl":97}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":69},{"sl":91},{"sl":98}]},"test_289":{"methods":[{"sl":90},{"sl":101}],"name":"Verify toString","pass":true,"statements":[{"sl":91},{"sl":103}]},"test_304":{"methods":[{"sl":75},{"sl":90},{"sl":97}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":76},{"sl":91},{"sl":98}]},"test_319":{"methods":[{"sl":52},{"sl":90},{"sl":97}],"name":"Verify that RecipientInfo is correctly encoded for type symmRecipInfo","pass":true,"statements":[{"sl":54},{"sl":57},{"sl":58},{"sl":91},{"sl":98}]},"test_35":{"methods":[{"sl":52},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":59},{"sl":60},{"sl":83},{"sl":91},{"sl":98}]},"test_396":{"methods":[{"sl":52},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56},{"sl":91}]},"test_40":{"methods":[{"sl":52},{"sl":90},{"sl":97}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":54},{"sl":59},{"sl":60},{"sl":91},{"sl":98}]},"test_400":{"methods":[{"sl":52},{"sl":90},{"sl":97}],"name":"Verify that RecipientInfo is correctly encoded for type pskRecipInfo","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56},{"sl":91},{"sl":98}]},"test_412":{"methods":[{"sl":52},{"sl":90},{"sl":97}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":54},{"sl":59},{"sl":60},{"sl":91},{"sl":98}]},"test_413":{"methods":[{"sl":68},{"sl":90}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":69},{"sl":91}]},"test_418":{"methods":[{"sl":90}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":91}]},"test_460":{"methods":[{"sl":52},{"sl":90}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56},{"sl":91}]},"test_485":{"methods":[{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":83},{"sl":91},{"sl":98}]},"test_569":{"methods":[{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":83},{"sl":91},{"sl":98}]},"test_608":{"methods":[{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":83},{"sl":91},{"sl":98}]},"test_625":{"methods":[{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":83},{"sl":91},{"sl":98}]},"test_693":{"methods":[{"sl":68},{"sl":90}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":69},{"sl":91}]},"test_774":{"methods":[{"sl":52},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":59},{"sl":60},{"sl":83},{"sl":91},{"sl":98}]},"test_882":{"methods":[{"sl":52},{"sl":90},{"sl":97}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":54},{"sl":59},{"sl":60},{"sl":91},{"sl":98}]},"test_930":{"methods":[{"sl":90},{"sl":101}],"name":"Verify toString","pass":true,"statements":[{"sl":91},{"sl":103}]},"test_943":{"methods":[{"sl":68},{"sl":75},{"sl":82},{"sl":101}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":69},{"sl":76},{"sl":83},{"sl":103}]},"test_946":{"methods":[{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":83},{"sl":91},{"sl":98}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 412, 774, 319, 400, 882, 40, 240, 460, 396], [], [35, 412, 774, 319, 400, 882, 40, 240, 460, 396], [400, 240, 460, 396], [400, 240, 460, 396], [319], [319], [35, 412, 774, 882, 40], [35, 412, 774, 882, 40], [], [], [], [], [], [], [], [286, 413, 943, 693], [286, 413, 943, 693], [], [], [], [], [], [304, 943], [304, 943], [], [], [], [], [], [946, 35, 625, 774, 239, 608, 943, 569, 485], [946, 35, 625, 774, 239, 608, 943, 569, 485], [], [], [], [], [], [], [286, 946, 35, 625, 413, 304, 412, 774, 319, 400, 882, 239, 608, 40, 693, 289, 569, 240, 418, 460, 930, 396, 485], [286, 946, 35, 625, 413, 304, 412, 774, 319, 400, 882, 239, 608, 40, 693, 289, 569, 240, 418, 460, 930, 396, 485], [], [], [], [], [], [286, 946, 35, 625, 304, 412, 774, 319, 400, 882, 239, 608, 40, 569, 485], [286, 946, 35, 625, 304, 412, 774, 319, 400, 882, 239, 608, 40, 569, 485], [], [], [943, 289, 930], [], [943, 289, 930], [], [], []]
