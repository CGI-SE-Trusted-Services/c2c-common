var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":78,"id":4384,"methods":[{"el":56,"sc":2,"sl":54},{"el":64,"sc":2,"sl":62},{"el":71,"sc":2,"sl":69},{"el":76,"sc":2,"sl":73}],"name":"SymmetricCiphertext","sl":32},{"el":49,"id":4384,"methods":[{"el":43,"sc":3,"sl":40},{"el":48,"sc":3,"sl":45}],"name":"SymmetricCiphertext.SymmetricCiphertextChoices","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_239":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_250":{"methods":[{"sl":54},{"sl":73}],"name":"Verify SymmetricCiphertext","pass":true,"statements":[{"sl":55},{"sl":75}]},"test_281":{"methods":[{"sl":62}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":63}]},"test_286":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_289":{"methods":[{"sl":62},{"sl":73}],"name":"Verify toString","pass":true,"statements":[{"sl":63},{"sl":75}]},"test_304":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_319":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that RecipientInfo is correctly encoded for type symmRecipInfo","pass":true,"statements":[{"sl":42},{"sl":63}]},"test_329":{"methods":[{"sl":40},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that SymmetricCiphertext is correctly encoded for type aes128ccm","pass":true,"statements":[{"sl":42},{"sl":55},{"sl":63},{"sl":70}]},"test_35":{"methods":[{"sl":40},{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42},{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_396":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":42},{"sl":63}]},"test_413":{"methods":[{"sl":54},{"sl":62}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":55},{"sl":63}]},"test_418":{"methods":[{"sl":62}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":63}]},"test_460":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":42},{"sl":63}]},"test_485":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_56":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":42},{"sl":63}]},"test_569":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_608":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_625":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_693":{"methods":[{"sl":54},{"sl":62}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":55},{"sl":63}]},"test_774":{"methods":[{"sl":40},{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42},{"sl":47},{"sl":55},{"sl":63},{"sl":70}]},"test_932":{"methods":[{"sl":62},{"sl":73}],"name":"Verify toString","pass":true,"statements":[{"sl":63},{"sl":75}]},"test_943":{"methods":[{"sl":73}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":75}]},"test_946":{"methods":[{"sl":45},{"sl":54},{"sl":62},{"sl":69}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":55},{"sl":63},{"sl":70}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 319, 460, 396, 56, 774, 329], [], [35, 319, 460, 396, 56, 774, 329], [], [], [946, 35, 625, 239, 569, 286, 304, 774, 608, 485], [], [946, 35, 625, 239, 569, 286, 304, 774, 608, 485], [], [], [], [], [], [], [946, 35, 625, 239, 250, 569, 286, 413, 304, 774, 329, 608, 693, 485], [946, 35, 625, 239, 250, 569, 286, 413, 304, 774, 329, 608, 693, 485], [], [], [], [], [], [], [946, 35, 625, 281, 319, 932, 239, 569, 418, 460, 396, 286, 413, 304, 56, 774, 329, 608, 693, 289, 485], [946, 35, 625, 281, 319, 932, 239, 569, 418, 460, 396, 286, 413, 304, 56, 774, 329, 608, 693, 289, 485], [], [], [], [], [], [946, 35, 625, 239, 569, 286, 304, 774, 329, 608, 485], [946, 35, 625, 239, 569, 286, 304, 774, 329, 608, 485], [], [], [932, 250, 943, 289], [], [932, 250, 943, 289], [], [], []]
