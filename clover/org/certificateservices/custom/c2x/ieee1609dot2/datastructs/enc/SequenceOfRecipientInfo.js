var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":67,"id":4346,"methods":[{"el":35,"sc":2,"sl":33},{"el":42,"sc":2,"sl":40},{"el":49,"sc":2,"sl":47},{"el":66,"sc":2,"sl":52}],"name":"SequenceOfRecipientInfo","sl":26}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_239":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_240":{"methods":[{"sl":33},{"sl":40},{"sl":47}],"name":"Verify that SequenceOfRecipientInfo is initialized properly","pass":true,"statements":[{"sl":34},{"sl":41},{"sl":48}]},"test_286":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_289":{"methods":[{"sl":33},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":34},{"sl":55},{"sl":56},{"sl":57},{"sl":58},{"sl":60},{"sl":61},{"sl":64},{"sl":65}]},"test_304":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_35":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_396":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]},"test_413":{"methods":[{"sl":33},{"sl":47}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":34},{"sl":48}]},"test_418":{"methods":[{"sl":33}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":34}]},"test_460":{"methods":[{"sl":33}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":34}]},"test_485":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_569":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_608":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_625":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_693":{"methods":[{"sl":33},{"sl":47}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":34},{"sl":48}]},"test_774":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34},{"sl":41}]},"test_930":{"methods":[{"sl":33},{"sl":47},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":34},{"sl":48},{"sl":55},{"sl":56},{"sl":57},{"sl":58},{"sl":60},{"sl":61},{"sl":64},{"sl":65}]},"test_946":{"methods":[{"sl":33},{"sl":40}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34},{"sl":41}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [286, 946, 35, 625, 413, 304, 774, 239, 608, 693, 289, 569, 240, 418, 460, 930, 396, 485], [286, 946, 35, 625, 413, 304, 774, 239, 608, 693, 289, 569, 240, 418, 460, 930, 396, 485], [], [], [], [], [], [286, 946, 35, 625, 304, 774, 239, 608, 569, 240, 485], [286, 946, 35, 625, 304, 774, 239, 608, 569, 240, 485], [], [], [], [], [], [413, 693, 240, 930], [413, 693, 240, 930], [], [], [], [289, 930], [], [], [289, 930], [289, 930], [289, 930], [289, 930], [], [289, 930], [289, 930], [], [], [289, 930], [289, 930], [], []]
