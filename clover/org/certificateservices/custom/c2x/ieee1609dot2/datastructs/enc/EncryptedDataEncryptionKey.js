var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":106,"id":4275,"methods":[{"el":84,"sc":2,"sl":82},{"el":92,"sc":2,"sl":90},{"el":99,"sc":2,"sl":97},{"el":104,"sc":2,"sl":101}],"name":"EncryptedDataEncryptionKey","sl":34},{"el":77,"id":4275,"methods":[{"el":46,"sc":3,"sl":43},{"el":55,"sc":3,"sl":48},{"el":64,"sc":3,"sl":57},{"el":75,"sc":3,"sl":66}],"name":"EncryptedDataEncryptionKey.EncryptedDataEncryptionKeyChoices","sl":39}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_180":{"methods":[{"sl":82},{"sl":101}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":83},{"sl":103}]},"test_223":{"methods":[{"sl":90},{"sl":101}],"name":"Verify toString","pass":true,"statements":[{"sl":91},{"sl":103}]},"test_239":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_35":{"methods":[{"sl":43},{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]},"test_40":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_412":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_485":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]},"test_569":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]},"test_579":{"methods":[{"sl":43},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that EncryptedDataEncryptionKey is correctly encoded for type eciesBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":83},{"sl":91},{"sl":98}]},"test_608":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_625":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_71":{"methods":[{"sl":43},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that EncryptedDataEncryptionKey is correctly encoded for type eciesNistP256","pass":true,"statements":[{"sl":45},{"sl":83},{"sl":91},{"sl":98}]},"test_715":{"methods":[{"sl":66}],"name":"Verify that getPublicVerificationAlgorithm returns correct PublicVerificationKeyChoice ecdsaBrainpoolP256r1 for alg: eciesBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":71},{"sl":73}]},"test_738":{"methods":[{"sl":90}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":91}]},"test_774":{"methods":[{"sl":43},{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_882":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_895":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_943":{"methods":[{"sl":101}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":103}]},"test_946":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]},"test_951":{"methods":[{"sl":66}],"name":"Verify that getPublicVerificationAlgorithm returns correct PublicVerificationKeyChoice ecdsaNistP256 for alg: eciesNistP256","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [895, 35, 71, 412, 774, 882, 40, 579], [], [895, 35, 71, 412, 774, 882, 40, 579], [], [], [946, 35, 625, 774, 239, 608, 569, 485], [946, 35, 625, 774, 239, 608, 569, 485], [946, 35, 569, 485], [625, 774, 239, 608], [], [946, 35, 625, 774, 239, 608, 569, 485], [], [], [], [946, 35, 625, 774, 239, 608, 569, 485], [946, 35, 625, 774, 239, 608, 569, 485], [946, 35, 569, 485], [625, 774, 239, 608], [], [946, 35, 625, 774, 239, 608, 569, 485], [], [], [], [946, 35, 625, 774, 239, 608, 951, 715, 569, 485], [], [946, 35, 625, 774, 239, 608, 951, 715, 569, 485], [946, 35, 951, 569, 485], [946, 35, 951, 569, 485], [625, 774, 239, 608, 715], [], [625, 774, 239, 608, 715], [], [], [], [], [], [], [], [], [946, 35, 625, 71, 774, 239, 608, 569, 579, 180, 485], [946, 35, 625, 71, 774, 239, 608, 569, 579, 180, 485], [], [], [], [], [], [], [895, 946, 35, 625, 71, 412, 774, 882, 239, 608, 40, 738, 569, 579, 223, 485], [895, 946, 35, 625, 71, 412, 774, 882, 239, 608, 40, 738, 569, 579, 223, 485], [], [], [], [], [], [946, 35, 625, 71, 774, 239, 608, 569, 579, 485], [946, 35, 625, 71, 774, 239, 608, 569, 579, 485], [], [], [943, 180, 223], [], [943, 180, 223], [], [], []]
