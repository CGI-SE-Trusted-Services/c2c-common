var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":106,"id":4420,"methods":[{"el":84,"sc":2,"sl":82},{"el":92,"sc":2,"sl":90},{"el":99,"sc":2,"sl":97},{"el":104,"sc":2,"sl":101}],"name":"EncryptedDataEncryptionKey","sl":34},{"el":77,"id":4420,"methods":[{"el":46,"sc":3,"sl":43},{"el":55,"sc":3,"sl":48},{"el":64,"sc":3,"sl":57},{"el":75,"sc":3,"sl":66}],"name":"EncryptedDataEncryptionKey.EncryptedDataEncryptionKeyChoices","sl":39}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_211":{"methods":[{"sl":90},{"sl":101}],"name":"Verify toString","pass":true,"statements":[{"sl":91},{"sl":103}]},"test_213":{"methods":[{"sl":101}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":103}]},"test_254":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_321":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]},"test_345":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_367":{"methods":[{"sl":43},{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]},"test_443":{"methods":[{"sl":90}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":91}]},"test_469":{"methods":[{"sl":66}],"name":"Verify that getPublicVerificationAlgorithm returns correct PublicVerificationKeyChoice ecdsaBrainpoolP256r1 for alg: eciesBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":71},{"sl":73}]},"test_502":{"methods":[{"sl":82},{"sl":101}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":83},{"sl":103}]},"test_542":{"methods":[{"sl":43},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that EncryptedDataEncryptionKey is correctly encoded for type eciesBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":83},{"sl":91},{"sl":98}]},"test_549":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_57":{"methods":[{"sl":43},{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_649":{"methods":[{"sl":66}],"name":"Verify that getPublicVerificationAlgorithm returns correct PublicVerificationKeyChoice ecdsaNistP256 for alg: eciesNistP256","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_736":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_760":{"methods":[{"sl":43},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that EncryptedDataEncryptionKey is correctly encoded for type eciesNistP256","pass":true,"statements":[{"sl":45},{"sl":83},{"sl":91},{"sl":98}]},"test_815":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]},"test_825":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":51},{"sl":53},{"sl":58},{"sl":60},{"sl":62},{"sl":68},{"sl":71},{"sl":73},{"sl":83},{"sl":91},{"sl":98}]},"test_843":{"methods":[{"sl":43},{"sl":90}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":45},{"sl":91}]},"test_876":{"methods":[{"sl":48},{"sl":57},{"sl":66},{"sl":82},{"sl":90},{"sl":97}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":58},{"sl":59},{"sl":62},{"sl":68},{"sl":69},{"sl":70},{"sl":83},{"sl":91},{"sl":98}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [367, 345, 760, 843, 57, 736, 542, 254], [], [367, 345, 760, 843, 57, 736, 542, 254], [], [], [367, 876, 815, 549, 825, 321, 57, 0], [367, 876, 815, 549, 825, 321, 57, 0], [367, 876, 815, 321], [549, 825, 57, 0], [], [367, 876, 815, 549, 825, 321, 57, 0], [], [], [], [367, 876, 815, 549, 825, 321, 57, 0], [367, 876, 815, 549, 825, 321, 57, 0], [367, 876, 815, 321], [549, 825, 57, 0], [], [367, 876, 815, 549, 825, 321, 57, 0], [], [], [], [367, 876, 815, 549, 825, 321, 469, 57, 649, 0], [], [367, 876, 815, 549, 825, 321, 469, 57, 649, 0], [367, 876, 815, 321, 649], [367, 876, 815, 321, 649], [549, 825, 469, 57, 0], [], [549, 825, 469, 57, 0], [], [], [], [], [], [], [], [], [367, 876, 502, 815, 549, 825, 321, 760, 57, 542, 0], [367, 876, 502, 815, 549, 825, 321, 760, 57, 542, 0], [], [], [], [], [], [], [367, 876, 815, 549, 345, 825, 321, 760, 843, 211, 443, 57, 736, 542, 0, 254], [367, 876, 815, 549, 345, 825, 321, 760, 843, 211, 443, 57, 736, 542, 0, 254], [], [], [], [], [], [367, 876, 815, 549, 825, 321, 760, 57, 542, 0], [367, 876, 815, 549, 825, 321, 760, 57, 542, 0], [], [], [502, 211, 213], [], [502, 211, 213], [], [], []]
