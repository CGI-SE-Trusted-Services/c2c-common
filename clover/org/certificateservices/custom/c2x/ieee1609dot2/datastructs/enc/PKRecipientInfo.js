var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":80,"id":4449,"methods":[{"el":39,"sc":2,"sl":36},{"el":50,"sc":2,"sl":44},{"el":58,"sc":2,"sl":56},{"el":66,"sc":2,"sl":64},{"el":73,"sc":2,"sl":70},{"el":78,"sc":2,"sl":75}],"name":"PKRecipientInfo","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_211":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70},{"sl":75}],"name":"Verify toString","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72},{"sl":77}]},"test_213":{"methods":[{"sl":56},{"sl":64},{"sl":75}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":57},{"sl":65},{"sl":77}]},"test_254":{"methods":[{"sl":36},{"sl":70}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":71},{"sl":72}]},"test_321":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_345":{"methods":[{"sl":36},{"sl":70}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":71},{"sl":72}]},"test_367":{"methods":[{"sl":36},{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_443":{"methods":[{"sl":44},{"sl":70}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":71},{"sl":72}]},"test_549":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_57":{"methods":[{"sl":36},{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_736":{"methods":[{"sl":36},{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_815":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_825":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_843":{"methods":[{"sl":36},{"sl":70}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":71},{"sl":72}]},"test_876":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [843, 57, 736, 367, 345, 254], [843, 57, 736, 367, 345, 254], [843, 57, 736, 367, 345, 254], [], [], [], [], [], [876, 815, 549, 825, 321, 443, 57, 736, 0, 367, 211], [876, 815, 549, 825, 321, 443, 57, 736, 0, 367, 211], [876, 815, 549, 825, 321, 443, 57, 736, 0, 367, 211], [876, 815, 549, 825, 321, 443, 57, 736, 0, 367, 211], [876, 815, 549, 825, 321, 443, 57, 736, 0, 367, 211], [], [], [], [], [], [], [], [876, 815, 549, 825, 321, 57, 736, 0, 367, 211, 213], [876, 815, 549, 825, 321, 57, 736, 0, 367, 211, 213], [], [], [], [], [], [], [876, 815, 549, 825, 321, 57, 736, 0, 367, 211, 213], [876, 815, 549, 825, 321, 57, 736, 0, 367, 211, 213], [], [], [], [], [876, 815, 549, 825, 321, 843, 443, 57, 736, 0, 367, 345, 211, 254], [876, 815, 549, 825, 321, 843, 443, 57, 736, 0, 367, 345, 211, 254], [876, 815, 549, 825, 321, 843, 443, 57, 736, 0, 367, 345, 211, 254], [], [], [211, 213], [], [211, 213], [], [], []]
