var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":80,"id":4304,"methods":[{"el":39,"sc":2,"sl":36},{"el":50,"sc":2,"sl":44},{"el":58,"sc":2,"sl":56},{"el":66,"sc":2,"sl":64},{"el":73,"sc":2,"sl":70},{"el":78,"sc":2,"sl":75}],"name":"PKRecipientInfo","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_223":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70},{"sl":75}],"name":"Verify toString","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72},{"sl":77}]},"test_239":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_35":{"methods":[{"sl":36},{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_40":{"methods":[{"sl":36},{"sl":70}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":71},{"sl":72}]},"test_412":{"methods":[{"sl":36},{"sl":70}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":71},{"sl":72}]},"test_485":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_569":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_608":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_625":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_738":{"methods":[{"sl":44},{"sl":70}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":71},{"sl":72}]},"test_774":{"methods":[{"sl":36},{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_882":{"methods":[{"sl":36},{"sl":70}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":71},{"sl":72}]},"test_895":{"methods":[{"sl":36},{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":37},{"sl":38},{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]},"test_943":{"methods":[{"sl":56},{"sl":64},{"sl":75}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":57},{"sl":65},{"sl":77}]},"test_946":{"methods":[{"sl":44},{"sl":56},{"sl":64},{"sl":70}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":57},{"sl":65},{"sl":71},{"sl":72}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [895, 35, 412, 882, 774, 40], [895, 35, 412, 882, 774, 40], [895, 35, 412, 882, 774, 40], [], [], [], [], [], [895, 946, 35, 625, 239, 738, 569, 774, 608, 223, 485], [895, 946, 35, 625, 239, 738, 569, 774, 608, 223, 485], [895, 946, 35, 625, 239, 738, 569, 774, 608, 223, 485], [895, 946, 35, 625, 239, 738, 569, 774, 608, 223, 485], [895, 946, 35, 625, 239, 738, 569, 774, 608, 223, 485], [], [], [], [], [], [], [], [895, 946, 35, 625, 239, 569, 774, 608, 943, 223, 485], [895, 946, 35, 625, 239, 569, 774, 608, 943, 223, 485], [], [], [], [], [], [], [895, 946, 35, 625, 239, 569, 774, 608, 943, 223, 485], [895, 946, 35, 625, 239, 569, 774, 608, 943, 223, 485], [], [], [], [], [895, 946, 35, 625, 412, 882, 239, 738, 569, 774, 608, 40, 223, 485], [895, 946, 35, 625, 412, 882, 239, 738, 569, 774, 608, 40, 223, 485], [895, 946, 35, 625, 412, 882, 239, 738, 569, 774, 608, 40, 223, 485], [], [], [943, 223], [], [943, 223], [], [], []]
