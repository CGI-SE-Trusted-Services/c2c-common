var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":87,"id":3816,"methods":[{"el":45,"sc":2,"sl":42},{"el":55,"sc":2,"sl":50},{"el":63,"sc":2,"sl":61},{"el":71,"sc":2,"sl":69},{"el":78,"sc":2,"sl":75},{"el":85,"sc":2,"sl":81}],"name":"IMaxGroup","sl":31}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_123":{"methods":[{"sl":50},{"sl":61},{"sl":69},{"sl":75},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":62},{"sl":70},{"sl":76},{"sl":77},{"sl":83}]},"test_155":{"methods":[{"sl":42},{"sl":61},{"sl":69},{"sl":75},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":62},{"sl":70},{"sl":76},{"sl":77},{"sl":83}]},"test_209":{"methods":[{"sl":42},{"sl":61},{"sl":69},{"sl":75},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":62},{"sl":70},{"sl":76},{"sl":77},{"sl":83}]},"test_288":{"methods":[{"sl":42},{"sl":61},{"sl":69},{"sl":75},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":62},{"sl":70},{"sl":76},{"sl":77},{"sl":83}]},"test_308":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that CrlContentsType is correctly encoded for type fullLinkedCrl","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_333":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_368":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that IllegalArgumentException is thrown if both individual and groups are null","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_441":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_443":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_491":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that SequenceOfIMaxGroup is initialized properly","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_529":{"methods":[{"sl":61},{"sl":69},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":70},{"sl":83}]},"test_553":{"methods":[{"sl":42},{"sl":61},{"sl":69},{"sl":75},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":62},{"sl":70},{"sl":76},{"sl":77},{"sl":83}]},"test_565":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_633":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that SequenceOfJMaxGroup is initialized properly","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_65":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_653":{"methods":[{"sl":50},{"sl":75}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":76},{"sl":77}]},"test_686":{"methods":[{"sl":42},{"sl":50},{"sl":75}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":76},{"sl":77}]},"test_691":{"methods":[{"sl":42},{"sl":61},{"sl":69},{"sl":75},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":62},{"sl":70},{"sl":76},{"sl":77},{"sl":83}]},"test_72":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that SequenceOfLAGroup is initialized properly","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_815":{"methods":[{"sl":61},{"sl":69},{"sl":81}],"name":"Verify toString()","pass":true,"statements":[{"sl":62},{"sl":70},{"sl":83}]},"test_885":{"methods":[{"sl":42},{"sl":61},{"sl":69},{"sl":75},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":62},{"sl":70},{"sl":76},{"sl":77},{"sl":83}]},"test_889":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that CrlContentsType is correctly encoded for type deltaLinkedCrl","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]},"test_954":{"methods":[{"sl":42},{"sl":50},{"sl":61},{"sl":69},{"sl":75}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":62},{"sl":70},{"sl":76},{"sl":77}]},"test_967":{"methods":[{"sl":42},{"sl":75}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":76},{"sl":77}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [72, 686, 691, 885, 288, 443, 308, 633, 209, 368, 954, 65, 441, 553, 565, 333, 889, 967, 491, 155], [72, 686, 691, 885, 288, 443, 308, 633, 209, 368, 954, 65, 441, 553, 565, 333, 889, 967, 491, 155], [72, 686, 691, 885, 288, 443, 308, 633, 209, 368, 954, 65, 441, 553, 565, 333, 889, 967, 491, 155], [], [], [], [], [], [686, 123, 954, 653], [686, 123, 954, 653], [686, 123, 954, 653], [686, 123, 954, 653], [686, 123, 954, 653], [], [], [], [], [], [], [529, 691, 885, 288, 123, 209, 954, 553, 815, 155], [529, 691, 885, 288, 123, 209, 954, 553, 815, 155], [], [], [], [], [], [], [529, 691, 885, 288, 123, 209, 954, 553, 815, 155], [529, 691, 885, 288, 123, 209, 954, 553, 815, 155], [], [], [], [], [72, 686, 691, 885, 288, 443, 308, 633, 123, 209, 368, 954, 65, 441, 553, 565, 333, 889, 653, 967, 491, 155], [72, 686, 691, 885, 288, 443, 308, 633, 123, 209, 368, 954, 65, 441, 553, 565, 333, 889, 653, 967, 491, 155], [72, 686, 691, 885, 288, 443, 308, 633, 123, 209, 368, 954, 65, 441, 553, 565, 333, 889, 653, 967, 491, 155], [], [], [], [529, 691, 885, 288, 123, 209, 553, 815, 155], [], [529, 691, 885, 288, 123, 209, 553, 815, 155], [], [], [], []]
