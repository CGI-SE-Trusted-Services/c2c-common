var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":101,"id":4704,"methods":[{"el":66,"sc":2,"sl":64},{"el":73,"sc":2,"sl":71},{"el":80,"sc":2,"sl":78},{"el":87,"sc":2,"sl":85},{"el":94,"sc":2,"sl":92},{"el":99,"sc":2,"sl":96}],"name":"Ieee1609Dot2Content","sl":35},{"el":59,"id":4704,"methods":[{"el":58,"sc":3,"sl":46}],"name":"Ieee1609Dot2Content.Ieee1609Dot2ContentChoices","sl":40}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":79},{"sl":86},{"sl":93}]},"test_100":{"methods":[{"sl":85}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":86}]},"test_110":{"methods":[{"sl":85}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":86}]},"test_164":{"methods":[{"sl":85},{"sl":92},{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":86},{"sl":93},{"sl":98}]},"test_182":{"methods":[{"sl":64},{"sl":71},{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":79},{"sl":86},{"sl":93}]},"test_237":{"methods":[{"sl":46},{"sl":85},{"sl":92}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":48},{"sl":51},{"sl":52},{"sl":86},{"sl":93}]},"test_310":{"methods":[{"sl":85}],"name":"Verify toString","pass":true,"statements":[{"sl":86}]},"test_321":{"methods":[{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":79},{"sl":86},{"sl":93}]},"test_325":{"methods":[{"sl":64},{"sl":71},{"sl":85},{"sl":92}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":86},{"sl":93}]},"test_331":{"methods":[{"sl":46},{"sl":85}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":48},{"sl":53},{"sl":56},{"sl":86}]},"test_346":{"methods":[{"sl":46},{"sl":85},{"sl":92}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedCertificateRequest","pass":true,"statements":[{"sl":48},{"sl":54},{"sl":56},{"sl":86},{"sl":93}]},"test_354":{"methods":[{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":79},{"sl":86},{"sl":93}]},"test_367":{"methods":[{"sl":46},{"sl":64},{"sl":71},{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":56},{"sl":65},{"sl":72},{"sl":79},{"sl":86},{"sl":93}]},"test_377":{"methods":[{"sl":85}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":86}]},"test_378":{"methods":[{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":79},{"sl":86},{"sl":93}]},"test_40":{"methods":[{"sl":71},{"sl":85},{"sl":92}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":72},{"sl":86},{"sl":93}]},"test_412":{"methods":[{"sl":64},{"sl":71},{"sl":85},{"sl":92}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":86},{"sl":93}]},"test_445":{"methods":[{"sl":46},{"sl":85},{"sl":92}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":86},{"sl":93}]},"test_447":{"methods":[{"sl":71},{"sl":85},{"sl":92}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":72},{"sl":86},{"sl":93}]},"test_461":{"methods":[{"sl":85},{"sl":92},{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":86},{"sl":93},{"sl":98}]},"test_549":{"methods":[{"sl":64},{"sl":71},{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":79},{"sl":86},{"sl":93}]},"test_57":{"methods":[{"sl":46},{"sl":64},{"sl":71},{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":56},{"sl":65},{"sl":72},{"sl":79},{"sl":86},{"sl":93}]},"test_58":{"methods":[{"sl":64},{"sl":71},{"sl":85},{"sl":92}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":86},{"sl":93}]},"test_592":{"methods":[{"sl":46},{"sl":85}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":48},{"sl":53},{"sl":56},{"sl":86}]},"test_597":{"methods":[{"sl":85},{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":86},{"sl":98}]},"test_633":{"methods":[{"sl":85}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":86}]},"test_656":{"methods":[{"sl":46},{"sl":85},{"sl":92}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":86},{"sl":93}]},"test_66":{"methods":[{"sl":64},{"sl":71},{"sl":85}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":86}]},"test_67":{"methods":[{"sl":85}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":86}]},"test_725":{"methods":[{"sl":64},{"sl":71},{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":98}]},"test_740":{"methods":[{"sl":85}],"name":"Verify toString","pass":true,"statements":[{"sl":86}]},"test_744":{"methods":[{"sl":46},{"sl":85},{"sl":92}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":86},{"sl":93}]},"test_757":{"methods":[{"sl":46},{"sl":64},{"sl":85},{"sl":92}],"name":"Verify that constructor throws Exception if content doesn't fullfill requirements","pass":true,"statements":[{"sl":48},{"sl":53},{"sl":56},{"sl":65},{"sl":86},{"sl":93}]},"test_790":{"methods":[{"sl":85}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":86}]},"test_81":{"methods":[{"sl":85}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":86}]},"test_815":{"methods":[{"sl":64},{"sl":71},{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":79},{"sl":86},{"sl":93}]},"test_825":{"methods":[{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":79},{"sl":86},{"sl":93}]},"test_828":{"methods":[{"sl":46},{"sl":64},{"sl":85},{"sl":92}],"name":"Verify that constructor throws Exception if content doesn't fullfill requirements","pass":true,"statements":[{"sl":48},{"sl":53},{"sl":56},{"sl":65},{"sl":86},{"sl":93}]},"test_876":{"methods":[{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":79},{"sl":86},{"sl":93}]},"test_882":{"methods":[{"sl":64},{"sl":71},{"sl":78},{"sl":85},{"sl":92}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":65},{"sl":72},{"sl":79},{"sl":86},{"sl":93}]},"test_908":{"methods":[{"sl":85},{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":86},{"sl":98}]},"test_949":{"methods":[{"sl":46},{"sl":85},{"sl":96}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":86},{"sl":98}]},"test_95":{"methods":[{"sl":46},{"sl":85},{"sl":92}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type unsecuredData","pass":true,"statements":[{"sl":48},{"sl":53},{"sl":56},{"sl":86},{"sl":93}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [757, 445, 592, 57, 367, 331, 744, 346, 95, 828, 949, 656, 237], [], [757, 445, 592, 57, 367, 331, 744, 346, 95, 828, 949, 656, 237], [445, 57, 367, 744, 949, 656], [445, 57, 367, 744, 949, 656], [57, 367, 237], [57, 367, 237], [757, 592, 57, 367, 331, 744, 95, 828, 949], [346], [], [757, 592, 57, 367, 331, 744, 346, 95, 828, 949], [], [], [], [], [], [], [], [815, 325, 757, 882, 549, 182, 412, 57, 58, 367, 725, 828, 66], [815, 325, 757, 882, 549, 182, 412, 57, 58, 367, 725, 828, 66], [], [], [], [], [], [815, 325, 882, 549, 447, 182, 412, 57, 58, 40, 367, 725, 66], [815, 325, 882, 549, 447, 182, 412, 57, 58, 40, 367, 725, 66], [], [], [], [], [], [876, 815, 882, 549, 825, 321, 182, 354, 57, 378, 0, 367], [876, 815, 882, 549, 825, 321, 182, 354, 57, 378, 0, 367], [], [], [], [], [], [876, 100, 815, 310, 325, 757, 882, 549, 447, 110, 908, 825, 321, 182, 445, 592, 354, 412, 57, 378, 0, 58, 633, 40, 367, 164, 331, 744, 346, 95, 81, 377, 828, 66, 67, 949, 656, 461, 790, 237, 597, 740], [876, 100, 815, 310, 325, 757, 882, 549, 447, 110, 908, 825, 321, 182, 445, 592, 354, 412, 57, 378, 0, 58, 633, 40, 367, 164, 331, 744, 346, 95, 81, 377, 828, 66, 67, 949, 656, 461, 790, 237, 597, 740], [], [], [], [], [], [876, 815, 325, 757, 882, 549, 447, 825, 321, 182, 445, 354, 412, 57, 378, 0, 58, 40, 367, 164, 744, 346, 95, 828, 656, 461, 237], [876, 815, 325, 757, 882, 549, 447, 825, 321, 182, 445, 354, 412, 57, 378, 0, 58, 40, 367, 164, 744, 346, 95, 828, 656, 461, 237], [], [], [908, 164, 725, 949, 461, 597], [], [908, 164, 725, 949, 461, 597], [], [], []]
