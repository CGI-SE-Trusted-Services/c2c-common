var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":81,"id":4755,"methods":[{"el":42,"sc":2,"sl":39},{"el":53,"sc":2,"sl":47},{"el":61,"sc":2,"sl":59},{"el":69,"sc":2,"sl":67},{"el":74,"sc":2,"sl":71},{"el":79,"sc":2,"sl":76}],"name":"MissingCrlIdentifier","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_110":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_182":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_310":{"methods":[{"sl":39},{"sl":71}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_316":{"methods":[{"sl":39},{"sl":47},{"sl":59},{"sl":67},{"sl":71}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":60},{"sl":68},{"sl":72},{"sl":73}]},"test_325":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_367":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_377":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_386":{"methods":[{"sl":39},{"sl":47},{"sl":59},{"sl":67},{"sl":71}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":60},{"sl":68},{"sl":72},{"sl":73}]},"test_40":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_412":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_445":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_447":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_509":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_549":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_57":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_58":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_593":{"methods":[{"sl":47},{"sl":71}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":72},{"sl":73}]},"test_633":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_656":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_66":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_667":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_740":{"methods":[{"sl":39},{"sl":71}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_744":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_790":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_81":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_815":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_820":{"methods":[{"sl":39},{"sl":59},{"sl":67},{"sl":71},{"sl":76}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":60},{"sl":68},{"sl":72},{"sl":73},{"sl":78}]},"test_840":{"methods":[{"sl":47},{"sl":59},{"sl":67},{"sl":71},{"sl":76}],"name":"Verify toString","pass":true,"statements":[{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":60},{"sl":68},{"sl":72},{"sl":73},{"sl":78}]},"test_882":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]},"test_949":{"methods":[{"sl":39},{"sl":71}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":72},{"sl":73}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [815, 310, 325, 882, 549, 447, 110, 509, 820, 316, 182, 445, 412, 57, 58, 633, 40, 367, 386, 744, 667, 81, 377, 66, 949, 656, 790, 740], [815, 310, 325, 882, 549, 447, 110, 509, 820, 316, 182, 445, 412, 57, 58, 633, 40, 367, 386, 744, 667, 81, 377, 66, 949, 656, 790, 740], [815, 310, 325, 882, 549, 447, 110, 509, 820, 316, 182, 445, 412, 57, 58, 633, 40, 367, 386, 744, 667, 81, 377, 66, 949, 656, 790, 740], [], [], [], [], [], [593, 316, 386, 840], [593, 316, 386, 840], [593, 316, 386, 840], [593, 316, 386, 840], [593, 316, 386, 840], [], [], [], [], [], [], [], [820, 316, 386, 840], [820, 316, 386, 840], [], [], [], [], [], [], [820, 316, 386, 840], [820, 316, 386, 840], [], [], [815, 310, 325, 882, 549, 593, 447, 110, 509, 820, 316, 182, 445, 412, 57, 58, 633, 40, 367, 386, 744, 667, 840, 81, 377, 66, 949, 656, 790, 740], [815, 310, 325, 882, 549, 593, 447, 110, 509, 820, 316, 182, 445, 412, 57, 58, 633, 40, 367, 386, 744, 667, 840, 81, 377, 66, 949, 656, 790, 740], [815, 310, 325, 882, 549, 593, 447, 110, 509, 820, 316, 182, 445, 412, 57, 58, 633, 40, 367, 386, 744, 667, 840, 81, 377, 66, 949, 656, 790, 740], [], [], [820, 840], [], [820, 840], [], [], []]
