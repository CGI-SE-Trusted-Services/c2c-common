var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":111,"id":4828,"methods":[{"el":73,"sc":2,"sl":71},{"el":80,"sc":2,"sl":78},{"el":89,"sc":2,"sl":86},{"el":96,"sc":2,"sl":94},{"el":109,"sc":2,"sl":98}],"name":"SignerIdentifier","sl":43},{"el":65,"id":4828,"methods":[{"el":64,"sc":3,"sl":53}],"name":"SignerIdentifier.SignerIdentifierChoices","sl":48}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":71},{"sl":94}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":72},{"sl":95}]},"test_123":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_146":{"methods":[{"sl":71},{"sl":94}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":72},{"sl":95}]},"test_164":{"methods":[{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_182":{"methods":[{"sl":71},{"sl":86}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88}]},"test_205":{"methods":[{"sl":53},{"sl":86},{"sl":94}],"name":"Verify that SignerIdentifier is correctly encoded for type self","pass":true,"statements":[{"sl":55},{"sl":60},{"sl":62},{"sl":87},{"sl":88},{"sl":95}]},"test_252":{"methods":[{"sl":86},{"sl":94}],"name":"Verify that getSignerId throws IllegalArgumentException if SignerIdentifier is self","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":95}]},"test_257":{"methods":[{"sl":71},{"sl":94}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":72},{"sl":95}]},"test_307":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_325":{"methods":[{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_367":{"methods":[{"sl":53},{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_377":{"methods":[{"sl":86}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":87},{"sl":88}]},"test_40":{"methods":[{"sl":78},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88},{"sl":95}]},"test_412":{"methods":[{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_421":{"methods":[{"sl":53},{"sl":86},{"sl":94}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":87},{"sl":88},{"sl":95}]},"test_445":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]},"test_447":{"methods":[{"sl":78},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88},{"sl":95}]},"test_461":{"methods":[{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_473":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_549":{"methods":[{"sl":78},{"sl":86}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88}]},"test_57":{"methods":[{"sl":53},{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_58":{"methods":[{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_582":{"methods":[{"sl":86},{"sl":94}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is self","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":95}]},"test_61":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_656":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]},"test_66":{"methods":[{"sl":71},{"sl":86}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88}]},"test_725":{"methods":[{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_740":{"methods":[{"sl":86},{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_744":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]},"test_775":{"methods":[{"sl":53},{"sl":86},{"sl":94}],"name":"Verify that SignerIdentifier is correctly encoded for type digest","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88},{"sl":95}]},"test_81":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]},"test_815":{"methods":[{"sl":78},{"sl":86}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88}]},"test_869":{"methods":[{"sl":71},{"sl":78},{"sl":86},{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":72},{"sl":79},{"sl":87},{"sl":88},{"sl":95},{"sl":100},{"sl":101},{"sl":102},{"sl":103},{"sl":104},{"sl":105},{"sl":107}]},"test_882":{"methods":[{"sl":71},{"sl":86}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88}]},"test_949":{"methods":[{"sl":53},{"sl":86},{"sl":94},{"sl":98}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":87},{"sl":88},{"sl":95},{"sl":100},{"sl":105},{"sl":107}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [775, 205, 445, 57, 421, 367, 744, 81, 949, 656], [], [775, 205, 445, 57, 421, 367, 744, 81, 949, 656], [775, 445, 57, 367, 744, 81, 656], [775, 445, 57, 367, 744, 81, 656], [421, 949], [421, 949], [205], [], [205], [], [], [], [], [], [], [], [], [325, 882, 182, 869, 257, 412, 57, 58, 367, 66, 1, 146], [325, 882, 182, 869, 257, 412, 57, 58, 367, 66, 1, 146], [], [], [], [], [], [815, 549, 123, 447, 869, 307, 61, 40, 473], [815, 549, 123, 447, 869, 307, 61, 40, 473], [], [], [], [], [], [], [775, 815, 325, 882, 549, 205, 447, 582, 182, 869, 445, 412, 57, 421, 58, 40, 367, 744, 81, 377, 66, 949, 656, 252, 740], [775, 815, 325, 882, 549, 205, 447, 582, 182, 869, 445, 412, 57, 421, 58, 40, 367, 744, 81, 377, 66, 949, 656, 252, 740], [775, 815, 325, 882, 549, 205, 447, 582, 182, 869, 445, 412, 57, 421, 58, 40, 367, 744, 81, 377, 66, 949, 656, 252, 740], [], [], [], [], [], [775, 325, 123, 205, 447, 582, 869, 257, 412, 307, 61, 57, 421, 58, 40, 367, 164, 725, 473, 1, 949, 146, 461, 252, 740], [775, 325, 123, 205, 447, 582, 869, 257, 412, 307, 61, 57, 421, 58, 40, 367, 164, 725, 473, 1, 949, 146, 461, 252, 740], [], [], [869, 164, 725, 949, 461, 740], [], [869, 164, 725, 949, 461, 740], [869], [869], [869, 164, 725, 461, 740], [869, 164, 725, 461, 740], [869, 949], [], [869, 949], [], [], [], []]
