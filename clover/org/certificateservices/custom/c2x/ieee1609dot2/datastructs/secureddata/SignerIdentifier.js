var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":111,"id":4683,"methods":[{"el":73,"sc":2,"sl":71},{"el":80,"sc":2,"sl":78},{"el":89,"sc":2,"sl":86},{"el":96,"sc":2,"sl":94},{"el":109,"sc":2,"sl":98}],"name":"SignerIdentifier","sl":43},{"el":65,"id":4683,"methods":[{"el":64,"sc":3,"sl":53}],"name":"SignerIdentifier.SignerIdentifierChoices","sl":48}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_128":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_248":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_249":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]},"test_257":{"methods":[{"sl":86}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":87},{"sl":88}]},"test_324":{"methods":[{"sl":71},{"sl":94}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":72},{"sl":95}]},"test_35":{"methods":[{"sl":53},{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_381":{"methods":[{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_385":{"methods":[{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_406":{"methods":[{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_413":{"methods":[{"sl":71},{"sl":86}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88}]},"test_465":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_482":{"methods":[{"sl":78},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88},{"sl":95}]},"test_485":{"methods":[{"sl":78},{"sl":86}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88}]},"test_517":{"methods":[{"sl":53},{"sl":86},{"sl":94}],"name":"Verify that SignerIdentifier is correctly encoded for type self","pass":true,"statements":[{"sl":55},{"sl":60},{"sl":62},{"sl":87},{"sl":88},{"sl":95}]},"test_532":{"methods":[{"sl":71},{"sl":94}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":72},{"sl":95}]},"test_542":{"methods":[{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_547":{"methods":[{"sl":71},{"sl":86}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88}]},"test_563":{"methods":[{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_59":{"methods":[{"sl":53},{"sl":86},{"sl":94}],"name":"Verify that SignerIdentifier is correctly encoded for type digest","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88},{"sl":95}]},"test_608":{"methods":[{"sl":78},{"sl":86}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88}]},"test_616":{"methods":[{"sl":53},{"sl":86},{"sl":94},{"sl":98}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":87},{"sl":88},{"sl":95},{"sl":100},{"sl":105},{"sl":107}]},"test_670":{"methods":[{"sl":53},{"sl":86},{"sl":94}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":59},{"sl":87},{"sl":88},{"sl":95}]},"test_681":{"methods":[{"sl":86},{"sl":94}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is self","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":95}]},"test_686":{"methods":[{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_693":{"methods":[{"sl":71},{"sl":86}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":72},{"sl":87},{"sl":88}]},"test_708":{"methods":[{"sl":71},{"sl":78},{"sl":86},{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":72},{"sl":79},{"sl":87},{"sl":88},{"sl":95},{"sl":100},{"sl":101},{"sl":102},{"sl":103},{"sl":104},{"sl":105},{"sl":107}]},"test_74":{"methods":[{"sl":78},{"sl":94}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":79},{"sl":95}]},"test_746":{"methods":[{"sl":86},{"sl":94},{"sl":98}],"name":"Verify toString","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":95},{"sl":100},{"sl":103},{"sl":104}]},"test_75":{"methods":[{"sl":78},{"sl":86},{"sl":94}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":79},{"sl":87},{"sl":88},{"sl":95}]},"test_774":{"methods":[{"sl":53},{"sl":71},{"sl":86},{"sl":94}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":72},{"sl":87},{"sl":88},{"sl":95}]},"test_78":{"methods":[{"sl":86},{"sl":94}],"name":"Verify that getSignerId throws IllegalArgumentException if SignerIdentifier is self","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":95}]},"test_829":{"methods":[{"sl":71},{"sl":94}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":72},{"sl":95}]},"test_942":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]},"test_955":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]},"test_974":{"methods":[{"sl":53},{"sl":86}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57},{"sl":87},{"sl":88}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 670, 974, 942, 249, 774, 59, 517, 616, 955], [], [35, 670, 974, 942, 249, 774, 59, 517, 616, 955], [35, 974, 942, 249, 774, 59, 955], [35, 974, 942, 249, 774, 59, 955], [670, 616], [670, 616], [517], [], [517], [], [], [], [], [], [], [], [], [708, 35, 686, 547, 829, 385, 532, 324, 413, 406, 774, 693], [708, 35, 686, 547, 829, 385, 532, 324, 413, 406, 774, 693], [], [], [], [], [], [708, 248, 75, 608, 74, 128, 465, 485, 482], [708, 248, 75, 608, 74, 128, 465, 485, 482], [], [], [], [], [], [], [708, 35, 686, 547, 670, 974, 746, 385, 681, 942, 249, 413, 406, 75, 774, 257, 59, 608, 517, 78, 693, 616, 485, 955, 482], [708, 35, 686, 547, 670, 974, 746, 385, 681, 942, 249, 413, 406, 75, 774, 257, 59, 608, 517, 78, 693, 616, 485, 955, 482], [708, 35, 686, 547, 670, 974, 746, 385, 681, 942, 249, 413, 406, 75, 774, 257, 59, 608, 517, 78, 693, 616, 485, 955, 482], [], [], [], [], [], [708, 35, 686, 670, 746, 829, 542, 385, 681, 532, 324, 248, 406, 75, 774, 59, 563, 517, 78, 381, 74, 616, 128, 465, 482], [708, 35, 686, 670, 746, 829, 542, 385, 681, 532, 324, 248, 406, 75, 774, 59, 563, 517, 78, 381, 74, 616, 128, 465, 482], [], [], [708, 746, 542, 563, 381, 616], [], [708, 746, 542, 563, 381, 616], [708], [708], [708, 746, 542, 563, 381], [708, 746, 542, 563, 381], [708, 616], [], [708, 616], [], [], [], []]
