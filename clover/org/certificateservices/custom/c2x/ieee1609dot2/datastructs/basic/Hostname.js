var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":51,"id":2684,"methods":[{"el":34,"sc":2,"sl":32},{"el":43,"sc":2,"sl":41},{"el":48,"sc":2,"sl":45}],"name":"Hostname","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":41}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_1":{"methods":[{"sl":41}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":42}]},"test_120":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_123":{"methods":[{"sl":41}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":42}]},"test_128":{"methods":[{"sl":41}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":42}]},"test_144":{"methods":[{"sl":32}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":33}]},"test_146":{"methods":[{"sl":41}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":42}]},"test_16":{"methods":[{"sl":41}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":42}]},"test_167":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_168":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_250":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":33}]},"test_257":{"methods":[{"sl":41}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":42}]},"test_290":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_298":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":33}]},"test_304":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_307":{"methods":[{"sl":41}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":42}]},"test_309":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_321":{"methods":[{"sl":41}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_325":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_329":{"methods":[{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":47}]},"test_332":{"methods":[{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":47}]},"test_364":{"methods":[{"sl":41}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":42}]},"test_367":{"methods":[{"sl":41}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_40":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_412":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_421":{"methods":[{"sl":32}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":33}]},"test_433":{"methods":[{"sl":41}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":42}]},"test_44":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_447":{"methods":[{"sl":41}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_470":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_471":{"methods":[{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":47}]},"test_473":{"methods":[{"sl":41}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":42}]},"test_479":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_494":{"methods":[{"sl":32},{"sl":41}],"name":"Verify that Hostname has size boundraries 0 to 255","pass":true,"statements":[{"sl":33},{"sl":42}]},"test_549":{"methods":[{"sl":41}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_57":{"methods":[{"sl":41}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_577":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_58":{"methods":[{"sl":41}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":42}]},"test_585":{"methods":[{"sl":41}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":42}]},"test_61":{"methods":[{"sl":41}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":42}]},"test_614":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_62":{"methods":[{"sl":32}],"name":"Verify that CertificateId is correctly encoded for type name","pass":true,"statements":[{"sl":33}]},"test_66":{"methods":[{"sl":41}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":42}]},"test_660":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_674":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_687":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_698":{"methods":[{"sl":32}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":33}]},"test_711":{"methods":[{"sl":41}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":42}]},"test_719":{"methods":[{"sl":32}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":33}]},"test_778":{"methods":[{"sl":41}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":42}]},"test_806":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_815":{"methods":[{"sl":41}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_822":{"methods":[{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":47}]},"test_825":{"methods":[{"sl":41}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_836":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_850":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_851":{"methods":[{"sl":32}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":33}]},"test_856":{"methods":[{"sl":45}],"name":"Verify toString()","pass":true,"statements":[{"sl":47}]},"test_869":{"methods":[{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":47}]},"test_870":{"methods":[{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":47}]},"test_871":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_876":{"methods":[{"sl":41}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]},"test_894":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_945":{"methods":[{"sl":41}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":42}]},"test_953":{"methods":[{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":47}]},"test_956":{"methods":[{"sl":41},{"sl":45}],"name":"Verify toString","pass":true,"statements":[{"sl":42},{"sl":47}]},"test_96":{"methods":[{"sl":41}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":42}]},"test_979":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42}]},"test_991":{"methods":[{"sl":41}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [421, 298, 250, 494, 62, 851, 144, 698, 304, 719], [421, 298, 250, 494, 62, 851, 144, 698, 304, 719], [], [], [], [], [], [], [], [815, 687, 549, 309, 979, 123, 447, 120, 16, 850, 412, 307, 991, 956, 479, 58, 168, 674, 806, 945, 167, 660, 473, 1, 146, 577, 778, 494, 290, 876, 470, 325, 711, 128, 825, 321, 257, 61, 57, 585, 0, 433, 40, 871, 367, 364, 96, 836, 66, 614, 894, 44], [815, 687, 549, 309, 979, 123, 447, 120, 16, 850, 412, 307, 991, 956, 479, 58, 168, 674, 806, 945, 167, 660, 473, 1, 146, 577, 778, 494, 290, 876, 470, 325, 711, 128, 825, 321, 257, 61, 57, 585, 0, 433, 40, 871, 367, 364, 96, 836, 66, 614, 894, 44], [], [], [956, 870, 329, 869, 332, 856, 953, 822, 471], [], [956, 870, 329, 869, 332, 856, 953, 822, 471], [], [], [], []]
