var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":44,"id":2284,"methods":[{"el":31,"sc":2,"sl":29},{"el":38,"sc":2,"sl":36},{"el":43,"sc":2,"sl":40}],"name":"CrlSeries","sl":22}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_128":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_136":{"methods":[{"sl":29}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":30}]},"test_16":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":30}]},"test_163":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_172":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_185":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_19":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_199":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[{"sl":30}]},"test_226":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_228":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":30}]},"test_239":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_246":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_248":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_249":{"methods":[{"sl":29}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":30}]},"test_257":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":30}]},"test_259":{"methods":[{"sl":29}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":30}]},"test_261":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_278":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_312":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_324":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_326":{"methods":[{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":42}]},"test_35":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_354":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_360":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_385":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_406":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_409":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_413":{"methods":[{"sl":29}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":30}]},"test_417":{"methods":[{"sl":29}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":30}]},"test_422":{"methods":[{"sl":29}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":30}]},"test_437":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":30}]},"test_447":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":30}]},"test_455":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_465":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_470":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_48":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":30}]},"test_482":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_485":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_486":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_498":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_499":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_52":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_523":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_529":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_532":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_54":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":30}]},"test_547":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_55":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":30}]},"test_550":{"methods":[{"sl":29}],"name":"Verify toString","pass":true,"statements":[{"sl":30}]},"test_567":{"methods":[{"sl":29},{"sl":36}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_569":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_587":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_608":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_609":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_616":{"methods":[{"sl":29},{"sl":40}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_62":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_625":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_627":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_634":{"methods":[{"sl":29},{"sl":36}],"name":"Verify constructors","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_637":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":30}]},"test_639":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":30}]},"test_65":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_650":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_658":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":30}]},"test_662":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_665":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_670":{"methods":[{"sl":29}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":30}]},"test_685":{"methods":[{"sl":29},{"sl":40}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_686":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_689":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_693":{"methods":[{"sl":29}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":30}]},"test_705":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_708":{"methods":[{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":42}]},"test_729":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_735":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_74":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_746":{"methods":[{"sl":29}],"name":"Verify toString","pass":true,"statements":[{"sl":30}]},"test_749":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_75":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_756":{"methods":[{"sl":40}],"name":"Verify toString()","pass":true,"statements":[{"sl":42}]},"test_765":{"methods":[{"sl":36},{"sl":40}],"name":"Verify CrlSeries toString","pass":true,"statements":[{"sl":37},{"sl":42}]},"test_769":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_774":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_788":{"methods":[{"sl":29}],"name":"Verify that PermissibleCrls is initialized properly","pass":true,"statements":[{"sl":30}]},"test_79":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_818":{"methods":[{"sl":29}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":30}]},"test_829":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_901":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_91":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_939":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":30}]},"test_942":{"methods":[{"sl":29}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":30}]},"test_946":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_947":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_955":{"methods":[{"sl":29}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":30}]},"test_960":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_968":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_974":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [16, 625, 658, 547, 587, 665, 422, 55, 239, 550, 637, 249, 470, 406, 185, 246, 486, 769, 74, 960, 417, 128, 52, 226, 465, 482, 686, 529, 354, 19, 91, 670, 136, 455, 974, 639, 705, 65, 523, 685, 689, 774, 749, 257, 163, 54, 48, 693, 62, 650, 616, 199, 498, 485, 261, 35, 447, 901, 627, 735, 385, 942, 532, 79, 662, 324, 947, 312, 75, 360, 939, 409, 499, 818, 946, 729, 567, 746, 569, 829, 634, 437, 968, 248, 413, 278, 608, 228, 172, 259, 0, 788, 609, 955], [16, 625, 658, 547, 587, 665, 422, 55, 239, 550, 637, 249, 470, 406, 185, 246, 486, 769, 74, 960, 417, 128, 52, 226, 465, 482, 686, 529, 354, 19, 91, 670, 136, 455, 974, 639, 705, 65, 523, 685, 689, 774, 749, 257, 163, 54, 48, 693, 62, 650, 616, 199, 498, 485, 261, 35, 447, 901, 627, 735, 385, 942, 532, 79, 662, 324, 947, 312, 75, 360, 939, 409, 499, 818, 946, 729, 567, 746, 569, 829, 634, 437, 968, 248, 413, 278, 608, 228, 172, 259, 0, 788, 609, 955], [], [], [], [], [], [625, 547, 587, 665, 239, 765, 406, 769, 74, 960, 128, 226, 465, 482, 686, 354, 455, 523, 689, 774, 749, 163, 62, 650, 498, 485, 261, 35, 901, 627, 735, 385, 532, 79, 324, 312, 75, 360, 499, 946, 729, 567, 569, 829, 634, 248, 278, 608, 0, 609], [625, 547, 587, 665, 239, 765, 406, 769, 74, 960, 128, 226, 465, 482, 686, 354, 455, 523, 689, 774, 749, 163, 62, 650, 498, 485, 261, 35, 901, 627, 735, 385, 532, 79, 324, 312, 75, 360, 499, 946, 729, 567, 569, 829, 634, 248, 278, 608, 0, 609], [], [], [756, 765, 185, 246, 52, 708, 529, 326, 19, 685, 616, 947, 409, 968, 172], [], [756, 765, 185, 246, 52, 708, 529, 326, 19, 685, 616, 947, 409, 968, 172], [], []]
