var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":85,"id":2489,"methods":[{"el":41,"sc":2,"sl":38},{"el":57,"sc":2,"sl":46},{"el":65,"sc":2,"sl":63},{"el":73,"sc":2,"sl":71},{"el":78,"sc":2,"sl":75},{"el":83,"sc":2,"sl":80}],"name":"GroupLinkageValue","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_211":{"methods":[{"sl":38},{"sl":75}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":76},{"sl":77}]},"test_234":{"methods":[{"sl":38},{"sl":46},{"sl":63},{"sl":71},{"sl":75}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":47},{"sl":48},{"sl":49},{"sl":52},{"sl":55},{"sl":56},{"sl":64},{"sl":72},{"sl":76},{"sl":77}]},"test_431":{"methods":[{"sl":38},{"sl":75}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":76},{"sl":77}]},"test_445":{"methods":[{"sl":46},{"sl":75}],"name":"Verify that IllegalArgument is thrown when jvalue or value has wrong size","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":50},{"sl":52},{"sl":53},{"sl":76},{"sl":77}]},"test_584":{"methods":[{"sl":46},{"sl":75}],"name":"Verify that IOException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":52},{"sl":55},{"sl":56},{"sl":76},{"sl":77}]},"test_616":{"methods":[{"sl":38},{"sl":63},{"sl":71},{"sl":75},{"sl":80}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":64},{"sl":72},{"sl":76},{"sl":77},{"sl":82}]},"test_685":{"methods":[{"sl":38},{"sl":63},{"sl":71},{"sl":75},{"sl":80}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":64},{"sl":72},{"sl":76},{"sl":77},{"sl":82}]},"test_714":{"methods":[{"sl":38},{"sl":75}],"name":"Verify that CertificateId is correctly encoded for type linkageData","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":76},{"sl":77}]},"test_887":{"methods":[{"sl":38},{"sl":63},{"sl":71},{"sl":75},{"sl":80}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":64},{"sl":72},{"sl":76},{"sl":77},{"sl":82}]},"test_982":{"methods":[{"sl":46},{"sl":63},{"sl":71},{"sl":75},{"sl":80}],"name":"Verify toString","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":52},{"sl":55},{"sl":56},{"sl":64},{"sl":72},{"sl":76},{"sl":77},{"sl":82}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines
