var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":57,"id":2818,"methods":[{"el":34,"sc":2,"sl":32},{"el":42,"sc":2,"sl":40},{"el":51,"sc":2,"sl":49},{"el":56,"sc":2,"sl":53}],"name":"Psid","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_1":{"methods":[{"sl":32}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":33}]},"test_110":{"methods":[{"sl":32}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":33}]},"test_120":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_123":{"methods":[{"sl":32}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":33}]},"test_128":{"methods":[{"sl":32}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":33}]},"test_141":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_144":{"methods":[{"sl":32}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":33}]},"test_146":{"methods":[{"sl":32}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":33}]},"test_16":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_165":{"methods":[{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":41}]},"test_167":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_168":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_182":{"methods":[{"sl":32}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":33}]},"test_207":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[{"sl":33}]},"test_238":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":33}]},"test_250":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":33}]},"test_257":{"methods":[{"sl":32}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":33}]},"test_269":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_290":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_298":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":33}]},"test_304":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_307":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_309":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_310":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_321":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_325":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_332":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_364":{"methods":[{"sl":32}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":33}]},"test_367":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_375":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_377":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":33}]},"test_386":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_40":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_412":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_421":{"methods":[{"sl":32}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":33}]},"test_433":{"methods":[{"sl":32}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":33}]},"test_44":{"methods":[{"sl":32}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33}]},"test_445":{"methods":[{"sl":32}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":33}]},"test_447":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_461":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55}]},"test_470":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_471":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_473":{"methods":[{"sl":32}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":33}]},"test_478":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_479":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_509":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_520":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":33}]},"test_524":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55}]},"test_549":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_57":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_577":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_58":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_585":{"methods":[{"sl":32}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":33}]},"test_59":{"methods":[{"sl":32}],"name":"Verify that SubjectPermissions is correctly encoded for type explicit","pass":true,"statements":[{"sl":33}]},"test_590":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":33}]},"test_608":{"methods":[{"sl":40}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41}]},"test_61":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_614":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_633":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":33}]},"test_656":{"methods":[{"sl":32}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":33}]},"test_66":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_660":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_667":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":33}]},"test_674":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_68":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":33}]},"test_687":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_698":{"methods":[{"sl":32}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":33}]},"test_711":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_717":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_719":{"methods":[{"sl":32}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":33}]},"test_725":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55}]},"test_727":{"methods":[{"sl":32}],"name":"Verify that SequenceOfPsidSspRange is initialized properly","pass":true,"statements":[{"sl":33}]},"test_740":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_743":{"methods":[{"sl":40},{"sl":49}],"name":"Verify constructors","pass":true,"statements":[{"sl":41},{"sl":50}]},"test_744":{"methods":[{"sl":32}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":33}]},"test_778":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_790":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_794":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_806":{"methods":[{"sl":32}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33}]},"test_81":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_815":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_820":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_822":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_825":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_829":{"methods":[{"sl":32}],"name":"Verify that SequenceOfPsid is initialized properly","pass":true,"statements":[{"sl":33}]},"test_836":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_850":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_851":{"methods":[{"sl":32}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":33}]},"test_856":{"methods":[{"sl":53}],"name":"Verify toString()","pass":true,"statements":[{"sl":55}]},"test_869":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55}]},"test_870":{"methods":[{"sl":32},{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_871":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_876":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_877":{"methods":[{"sl":32},{"sl":53}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_882":{"methods":[{"sl":32}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":33}]},"test_894":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_945":{"methods":[{"sl":32}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":33}]},"test_949":{"methods":[{"sl":32},{"sl":53}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":33},{"sl":55}]},"test_953":{"methods":[{"sl":53}],"name":"Verify toString","pass":true,"statements":[{"sl":55}]},"test_96":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_966":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":33}]},"test_979":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33},{"sl":41}]},"test_99":{"methods":[{"sl":40},{"sl":53}],"name":"Verify Psid toString","pass":true,"statements":[{"sl":41},{"sl":55}]},"test_990":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":33}]},"test_991":{"methods":[{"sl":32},{"sl":40}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33},{"sl":41}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [815, 269, 123, 59, 794, 447, 120, 16, 238, 820, 445, 307, 991, 421, 479, 58, 674, 744, 590, 806, 945, 167, 250, 146, 577, 375, 778, 870, 876, 470, 325, 711, 882, 990, 825, 321, 509, 61, 585, 0, 40, 871, 367, 364, 96, 836, 822, 144, 66, 614, 949, 656, 44, 471, 687, 549, 309, 979, 850, 412, 168, 298, 660, 81, 473, 1, 877, 141, 740, 290, 310, 110, 128, 182, 829, 257, 57, 520, 207, 727, 717, 433, 633, 332, 386, 68, 851, 667, 966, 698, 377, 304, 719, 790, 894, 478], [815, 269, 123, 59, 794, 447, 120, 16, 238, 820, 445, 307, 991, 421, 479, 58, 674, 744, 590, 806, 945, 167, 250, 146, 577, 375, 778, 870, 876, 470, 325, 711, 882, 990, 825, 321, 509, 61, 585, 0, 40, 871, 367, 364, 96, 836, 822, 144, 66, 614, 949, 656, 44, 471, 687, 549, 309, 979, 850, 412, 168, 298, 660, 81, 473, 1, 877, 141, 740, 290, 310, 110, 128, 182, 829, 257, 57, 520, 207, 727, 717, 433, 633, 332, 386, 68, 851, 667, 966, 698, 377, 304, 719, 790, 894, 478], [], [], [], [], [], [], [815, 447, 120, 16, 307, 991, 479, 58, 674, 743, 167, 577, 778, 876, 470, 325, 711, 825, 321, 61, 608, 0, 40, 871, 367, 96, 836, 66, 614, 687, 549, 309, 979, 850, 412, 99, 168, 660, 290, 57, 386, 165, 894], [815, 447, 120, 16, 307, 991, 479, 58, 674, 743, 167, 577, 778, 876, 470, 325, 711, 825, 321, 61, 608, 0, 40, 871, 367, 96, 836, 66, 614, 687, 549, 309, 979, 850, 412, 99, 168, 660, 290, 57, 386, 165, 894], [], [], [], [], [], [], [], [743], [743], [], [], [269, 794, 820, 524, 375, 870, 869, 953, 822, 949, 471, 99, 877, 740, 310, 332, 856, 725, 461, 478], [], [269, 794, 820, 524, 375, 870, 869, 953, 822, 949, 471, 99, 877, 740, 310, 332, 856, 725, 461, 478], [], []]
