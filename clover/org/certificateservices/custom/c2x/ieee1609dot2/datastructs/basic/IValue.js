var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":44,"id":2575,"methods":[{"el":31,"sc":2,"sl":29},{"el":38,"sc":2,"sl":36},{"el":43,"sc":2,"sl":40}],"name":"IValue","sl":22}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_211":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_308":{"methods":[{"sl":29}],"name":"Verify that CrlContentsType is correctly encoded for type fullLinkedCrl","pass":true,"statements":[{"sl":30}]},"test_325":{"methods":[{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":42}]},"test_333":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_367":{"methods":[{"sl":36},{"sl":40}],"name":"Verify IValue toString","pass":true,"statements":[{"sl":37},{"sl":42}]},"test_368":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown if both individual and groups are null","pass":true,"statements":[{"sl":30}]},"test_431":{"methods":[{"sl":29}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":30}]},"test_616":{"methods":[{"sl":29},{"sl":40}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_626":{"methods":[{"sl":29},{"sl":36}],"name":"Verify constructors","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_65":{"methods":[{"sl":29}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":30}]},"test_685":{"methods":[{"sl":29},{"sl":40}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_686":{"methods":[{"sl":29},{"sl":36}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_714":{"methods":[{"sl":29}],"name":"Verify that CertificateId is correctly encoded for type linkageData","pass":true,"statements":[{"sl":30}]},"test_885":{"methods":[{"sl":29},{"sl":36}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":37}]},"test_887":{"methods":[{"sl":29},{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":30},{"sl":42}]},"test_889":{"methods":[{"sl":29}],"name":"Verify that CrlContentsType is correctly encoded for type deltaLinkedCrl","pass":true,"statements":[{"sl":30}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [211, 431, 333, 889, 686, 885, 308, 714, 368, 65, 685, 626, 887, 616], [211, 431, 333, 889, 686, 885, 308, 714, 368, 65, 685, 626, 887, 616], [], [], [], [], [], [367, 333, 686, 885, 626], [367, 333, 686, 885, 626], [], [], [325, 367, 685, 887, 616], [], [325, 367, 685, 887, 616], [], []]
