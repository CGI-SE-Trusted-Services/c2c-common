var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":51,"id":2642,"methods":[{"el":35,"sc":2,"sl":33},{"el":43,"sc":2,"sl":41},{"el":49,"sc":2,"sl":45}],"name":"Longitude","sl":26}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_143":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]},"test_164":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]},"test_19":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_249":{"methods":[{"sl":33}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":34}]},"test_254":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_257":{"methods":[{"sl":33}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":34}]},"test_259":{"methods":[{"sl":33}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":34}]},"test_29":{"methods":[{"sl":33}],"name":"Verify that IllegalArgumentException is thrown if UNKNOWN is used as latitude or longitude","pass":true,"statements":[{"sl":34}]},"test_328":{"methods":[{"sl":33}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":34}]},"test_346":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]},"test_35":{"methods":[{"sl":33}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34}]},"test_375":{"methods":[{"sl":33}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":34}]},"test_385":{"methods":[{"sl":33}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34}]},"test_406":{"methods":[{"sl":33}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34}]},"test_413":{"methods":[{"sl":33}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":34}]},"test_432":{"methods":[{"sl":33}],"name":"Verify that SequenceOfRectangularRegion is initialized properly","pass":true,"statements":[{"sl":34}]},"test_447":{"methods":[{"sl":33}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":34}]},"test_470":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]},"test_482":{"methods":[{"sl":33}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34}]},"test_485":{"methods":[{"sl":33}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":34}]},"test_49":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_495":{"methods":[{"sl":41},{"sl":45}],"name":"Verify Longitude toString","pass":true,"statements":[{"sl":42},{"sl":47},{"sl":48}]},"test_547":{"methods":[{"sl":33}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":34}]},"test_550":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_608":{"methods":[{"sl":33}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34}]},"test_616":{"methods":[{"sl":33}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":34}]},"test_620":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_627":{"methods":[{"sl":33},{"sl":41}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":34},{"sl":42}]},"test_658":{"methods":[{"sl":33}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":34}]},"test_662":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]},"test_663":{"methods":[{"sl":33},{"sl":41}],"name":"Verify that IllegalArgumentException is thrown if poistion is the same","pass":true,"statements":[{"sl":34},{"sl":42}]},"test_678":{"methods":[{"sl":33},{"sl":41}],"name":"Verify that Longitude constructors sets the correct min and max values.","pass":true,"statements":[{"sl":34},{"sl":42}]},"test_686":{"methods":[{"sl":33}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":34}]},"test_693":{"methods":[{"sl":33}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":34}]},"test_706":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]},"test_718":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_740":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_746":{"methods":[{"sl":33}],"name":"Verify toString","pass":true,"statements":[{"sl":34}]},"test_75":{"methods":[{"sl":33}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34}]},"test_755":{"methods":[{"sl":33}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":34}]},"test_768":{"methods":[{"sl":33}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":34}]},"test_774":{"methods":[{"sl":33}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":34}]},"test_941":{"methods":[{"sl":33}],"name":"Verify that PolygonalRegion is initialized properly","pass":true,"statements":[{"sl":34}]},"test_942":{"methods":[{"sl":33}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":34}]},"test_955":{"methods":[{"sl":33}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":34}]},"test_974":{"methods":[{"sl":33}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":34}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 447, 432, 658, 346, 740, 627, 547, 941, 550, 143, 385, 942, 662, 249, 49, 164, 470, 406, 75, 620, 482, 686, 29, 375, 19, 663, 974, 768, 706, 746, 718, 678, 413, 755, 774, 257, 328, 608, 693, 616, 259, 254, 485, 955], [35, 447, 432, 658, 346, 740, 627, 547, 941, 550, 143, 385, 942, 662, 249, 49, 164, 470, 406, 75, 620, 482, 686, 29, 375, 19, 663, 974, 768, 706, 746, 718, 678, 413, 755, 774, 257, 328, 608, 693, 616, 259, 254, 485, 955], [], [], [], [], [], [], [627, 663, 678, 495], [627, 663, 678, 495], [], [], [495], [], [495], [495], [], [], []]
