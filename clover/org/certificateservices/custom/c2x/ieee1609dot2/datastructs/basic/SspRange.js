var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":105,"id":3085,"methods":[{"el":69,"sc":2,"sl":67},{"el":76,"sc":2,"sl":74},{"el":84,"sc":2,"sl":82},{"el":94,"sc":2,"sl":89},{"el":103,"sc":2,"sl":97}],"name":"SspRange","sl":44},{"el":60,"id":3085,"methods":[{"el":59,"sc":3,"sl":53}],"name":"SspRange.SspRangeChoices","sl":48}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_128":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_129":{"methods":[{"sl":53},{"sl":67},{"sl":74},{"sl":82}],"name":"Verify that SspRange is correctly encoded for type all","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":68},{"sl":75},{"sl":83}]},"test_153":{"methods":[{"sl":53},{"sl":74}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":55},{"sl":58},{"sl":75}]},"test_163":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_168":{"methods":[{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":99},{"sl":100},{"sl":102}]},"test_221":{"methods":[{"sl":74},{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":75},{"sl":99},{"sl":100},{"sl":102}]},"test_226":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_239":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_261":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_35":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_350":{"methods":[{"sl":74},{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":75},{"sl":99},{"sl":102}]},"test_37":{"methods":[{"sl":53},{"sl":67},{"sl":74},{"sl":82},{"sl":89}],"name":"Verify that SspRange is correctly encoded for type opaque","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":68},{"sl":75},{"sl":83},{"sl":90},{"sl":91}]},"test_385":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_387":{"methods":[{"sl":53},{"sl":74}],"name":"Verify that SequenceOfPsidSspRange is initialized properly","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":58},{"sl":75}]},"test_406":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_455":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_465":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_482":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_485":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_498":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_499":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_51":{"methods":[{"sl":74}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":75}]},"test_523":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_569":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_587":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_608":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_609":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_62":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_625":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_650":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_665":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_686":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_696":{"methods":[{"sl":53},{"sl":74}],"name":"Verify that SubjectPermissions is correctly encoded for type explicit","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":58},{"sl":75}]},"test_729":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_735":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_75":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_769":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_774":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_797":{"methods":[{"sl":67},{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":68},{"sl":99},{"sl":100},{"sl":102}]},"test_901":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68},{"sl":75}]},"test_946":{"methods":[{"sl":67},{"sl":74}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68},{"sl":75}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [153, 129, 387, 37, 696], [], [153, 129, 387, 37, 696], [387, 37, 696], [], [153, 129, 387, 696], [], [], [], [], [], [], [], [], [261, 35, 625, 901, 587, 665, 239, 129, 735, 385, 406, 75, 769, 128, 226, 499, 465, 482, 946, 686, 455, 729, 37, 569, 523, 774, 163, 608, 62, 650, 797, 498, 609, 485], [261, 35, 625, 901, 587, 665, 239, 129, 735, 385, 406, 75, 769, 128, 226, 499, 465, 482, 946, 686, 455, 729, 37, 569, 523, 774, 163, 608, 62, 650, 797, 498, 609, 485], [], [], [], [], [], [261, 35, 625, 153, 901, 587, 665, 221, 239, 129, 735, 385, 387, 406, 75, 51, 769, 128, 226, 499, 465, 482, 946, 686, 455, 729, 37, 569, 523, 774, 163, 608, 62, 650, 350, 696, 498, 609, 485], [261, 35, 625, 153, 901, 587, 665, 221, 239, 129, 735, 385, 387, 406, 75, 51, 769, 128, 226, 499, 465, 482, 946, 686, 455, 729, 37, 569, 523, 774, 163, 608, 62, 650, 350, 696, 498, 609, 485], [], [], [], [], [], [], [129, 37], [129, 37], [], [], [], [], [], [37], [37], [37], [], [], [], [], [], [221, 168, 350, 797], [], [221, 168, 350, 797], [221, 168, 797], [], [221, 168, 350, 797], [], [], []]
