var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":94,"id":3271,"methods":[{"el":41,"sc":2,"sl":38},{"el":56,"sc":2,"sl":48},{"el":66,"sc":2,"sl":64},{"el":74,"sc":2,"sl":72},{"el":80,"sc":2,"sl":77},{"el":85,"sc":2,"sl":82},{"el":92,"sc":2,"sl":90}],"name":"UncompressedEccPoint","sl":26}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_136":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_16":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_172":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_185":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_217":{"methods":[{"sl":48},{"sl":64},{"sl":72},{"sl":77},{"sl":90}],"name":"Verify that decodeEccPoint decodes the ieee EccPoints correctly for public key scheme: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":65},{"sl":73},{"sl":78},{"sl":79},{"sl":91}]},"test_246":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_314":{"methods":[{"sl":38},{"sl":64},{"sl":72},{"sl":77}],"name":"Verify that EccP256CurvePoint is correctly encoded for type uncompressed","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":65},{"sl":73},{"sl":78},{"sl":79}]},"test_318":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_32":{"methods":[{"sl":48},{"sl":64},{"sl":72},{"sl":77},{"sl":90}],"name":"Verify that ieee encodeEccPoint encodes ec public keys properly for algorithm: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":65},{"sl":73},{"sl":78},{"sl":79},{"sl":91}]},"test_326":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_417":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_422":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_437":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_463":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that PublicVerificationKey is correctly encoded for type ecdsaNistP256","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_486":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_504":{"methods":[{"sl":48},{"sl":77},{"sl":90}],"name":"Verify that IOException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":78},{"sl":79},{"sl":91}]},"test_513":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that VerificationKeyIndicator is correctly encoded for type verificationKey","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_628":{"methods":[{"sl":38},{"sl":48},{"sl":64},{"sl":72},{"sl":77},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":65},{"sl":73},{"sl":78},{"sl":79},{"sl":91}]},"test_642":{"methods":[{"sl":48},{"sl":64},{"sl":72},{"sl":77},{"sl":82},{"sl":90}],"name":"Verify toString","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":65},{"sl":73},{"sl":78},{"sl":79},{"sl":84},{"sl":91}]},"test_660":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that PublicVerificationKey is correctly encoded for type ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_670":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_708":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_710":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that VerificationKeyIndicator is correctly encoded for type reconstructionValue","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_756":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString()","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_799":{"methods":[{"sl":48},{"sl":64},{"sl":72},{"sl":77},{"sl":82},{"sl":90}],"name":"Verify toString","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":65},{"sl":73},{"sl":78},{"sl":79},{"sl":84},{"sl":91}]},"test_801":{"methods":[{"sl":48},{"sl":64},{"sl":72},{"sl":77},{"sl":90}],"name":"Verify that decodeEccPoint decodes the ieee EccPoints correctly for public key scheme: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":65},{"sl":73},{"sl":78},{"sl":79},{"sl":91}]},"test_818":{"methods":[{"sl":38},{"sl":77}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":78},{"sl":79}]},"test_88":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]},"test_925":{"methods":[{"sl":48},{"sl":64},{"sl":72},{"sl":77},{"sl":90}],"name":"Verify that ieee encodeEccPoint encodes ec public keys properly for algorithm: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":51},{"sl":52},{"sl":53},{"sl":54},{"sl":65},{"sl":73},{"sl":78},{"sl":79},{"sl":91}]},"test_947":{"methods":[{"sl":64},{"sl":72},{"sl":82}],"name":"Verify toString","pass":true,"statements":[{"sl":65},{"sl":73},{"sl":84}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [16, 818, 422, 670, 136, 628, 660, 437, 486, 463, 314, 710, 417, 513], [16, 818, 422, 670, 136, 628, 660, 437, 486, 463, 314, 710, 417, 513], [16, 818, 422, 670, 136, 628, 660, 437, 486, 463, 314, 710, 417, 513], [], [], [], [], [], [], [], [628, 32, 925, 642, 801, 799, 504, 217], [628, 32, 925, 642, 801, 799, 504, 217], [628, 32, 925, 642, 801, 799, 504, 217], [628, 32, 925, 642, 801, 799, 504, 217], [628, 32, 925, 642, 801, 799, 504, 217], [628, 32, 925, 642, 801, 799, 504, 217], [628, 32, 925, 642, 801, 799, 504, 217], [], [], [], [], [], [], [], [], [], [708, 326, 628, 32, 756, 925, 947, 642, 185, 318, 246, 314, 172, 801, 88, 799, 217], [708, 326, 628, 32, 756, 925, 947, 642, 185, 318, 246, 314, 172, 801, 88, 799, 217], [], [], [], [], [], [], [708, 326, 628, 32, 756, 925, 947, 642, 185, 318, 246, 314, 172, 801, 88, 799, 217], [708, 326, 628, 32, 756, 925, 947, 642, 185, 318, 246, 314, 172, 801, 88, 799, 217], [], [], [], [16, 818, 422, 670, 136, 628, 660, 32, 925, 437, 642, 486, 463, 314, 710, 417, 801, 799, 504, 217, 513], [16, 818, 422, 670, 136, 628, 660, 32, 925, 437, 642, 486, 463, 314, 710, 417, 801, 799, 504, 217, 513], [16, 818, 422, 670, 136, 628, 660, 32, 925, 437, 642, 486, 463, 314, 710, 417, 801, 799, 504, 217, 513], [], [], [708, 326, 756, 947, 642, 185, 318, 246, 172, 88, 799], [], [708, 326, 756, 947, 642, 185, 318, 246, 172, 88, 799], [], [], [], [], [], [628, 32, 925, 642, 801, 799, 504, 217], [628, 32, 925, 642, 801, 799, 504, 217], [], [], []]
