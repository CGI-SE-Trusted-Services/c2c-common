var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":62,"id":2561,"methods":[{"el":41,"sc":2,"sl":39},{"el":50,"sc":2,"sl":48},{"el":55,"sc":2,"sl":52},{"el":60,"sc":2,"sl":57}],"name":"HashedId8","sl":31}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_128":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_156":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that HashedId8 only stores the 8 least significant bytes","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_163":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_223":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_226":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_239":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_240":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that SequenceOfRecipientInfo is initialized properly","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_248":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_249":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_261":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_276":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IssuerIdentifier is correctly encoded for type sha256AndDigest","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_278":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_281":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_286":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_304":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_312":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_319":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type symmRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_324":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_35":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_360":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_385":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_396":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_40":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_400":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type pskRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_406":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_412":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_413":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_435":{"methods":[{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":59}]},"test_455":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_460":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_465":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_482":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_485":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_498":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_499":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_523":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_529":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_532":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_538":{"methods":[{"sl":48},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_547":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_56":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_567":{"methods":[{"sl":48},{"sl":52}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_569":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_587":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_59":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that SignerIdentifier is correctly encoded for type digest","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_608":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_609":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_616":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_62":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_625":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_639":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_65":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_650":{"methods":[{"sl":48},{"sl":52},{"sl":57}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":49},{"sl":54},{"sl":59}]},"test_665":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_666":{"methods":[{"sl":48},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":49},{"sl":54},{"sl":59}]},"test_685":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_686":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_693":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_729":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_735":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_738":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_74":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_749":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_75":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_769":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_774":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_782":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_79":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_829":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_882":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_895":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_901":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_932":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_942":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_943":{"methods":[{"sl":57}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":59}]},"test_946":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_955":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_960":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_974":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [625, 281, 319, 882, 239, 460, 249, 304, 400, 40, 276, 686, 529, 932, 974, 639, 65, 396, 685, 774, 59, 616, 485, 35, 156, 942, 56, 895, 946, 412, 782, 738, 569, 240, 608, 223, 955], [625, 281, 319, 882, 239, 460, 249, 304, 400, 40, 276, 686, 529, 932, 974, 639, 65, 396, 685, 774, 59, 616, 485, 35, 156, 942, 56, 895, 946, 412, 782, 738, 569, 240, 608, 223, 955], [], [], [], [], [], [], [], [625, 547, 587, 665, 239, 304, 406, 769, 74, 960, 128, 226, 465, 482, 686, 455, 523, 286, 774, 749, 163, 693, 62, 650, 498, 485, 261, 35, 901, 156, 735, 385, 538, 532, 79, 324, 312, 75, 360, 499, 946, 729, 782, 567, 569, 829, 666, 248, 413, 278, 608, 0, 609], [625, 547, 587, 665, 239, 304, 406, 769, 74, 960, 128, 226, 465, 482, 686, 455, 523, 286, 774, 749, 163, 693, 62, 650, 498, 485, 261, 35, 901, 156, 735, 385, 538, 532, 79, 324, 312, 75, 360, 499, 946, 729, 782, 567, 569, 829, 666, 248, 413, 278, 608, 0, 609], [], [], [625, 281, 547, 587, 665, 319, 882, 239, 460, 249, 304, 406, 400, 769, 40, 74, 960, 128, 226, 465, 276, 482, 686, 529, 932, 455, 974, 639, 65, 396, 523, 286, 685, 774, 749, 59, 163, 693, 62, 650, 616, 498, 485, 261, 35, 901, 156, 735, 385, 538, 942, 532, 79, 324, 312, 75, 360, 56, 499, 895, 946, 412, 729, 782, 738, 567, 569, 240, 829, 666, 248, 413, 278, 608, 0, 609, 223, 955], [], [625, 281, 547, 587, 665, 319, 882, 239, 460, 249, 304, 406, 400, 769, 40, 74, 960, 128, 226, 465, 276, 482, 686, 529, 932, 455, 974, 639, 65, 396, 523, 286, 685, 774, 749, 59, 163, 693, 62, 650, 616, 498, 485, 261, 35, 901, 156, 735, 385, 538, 942, 532, 79, 324, 312, 75, 360, 56, 499, 895, 946, 412, 729, 782, 738, 567, 569, 240, 829, 666, 248, 413, 278, 608, 0, 609, 223, 955], [], [], [435, 529, 932, 685, 650, 616, 666, 943, 223], [], [435, 529, 932, 685, 650, 616, 666, 943, 223], [], [], []]
