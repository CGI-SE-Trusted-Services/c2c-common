var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":62,"id":2676,"methods":[{"el":41,"sc":2,"sl":39},{"el":50,"sc":2,"sl":48},{"el":55,"sc":2,"sl":52},{"el":60,"sc":2,"sl":57}],"name":"HashedId8","sl":31}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_1":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_120":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_123":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_128":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_135":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that HashedId8 only stores the 8 least significant bytes","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_146":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_157":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that SequenceOfRecipientInfo is initialized properly","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_16":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_167":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_168":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_182":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_197":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_211":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_213":{"methods":[{"sl":57}],"name":"Verify EncryptedDataEncryptionKey","pass":true,"statements":[{"sl":59}]},"test_237":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_245":{"methods":[{"sl":48},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_25":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_254":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type certRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_257":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_288":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_290":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_307":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_309":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_313":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_321":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_325":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_327":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_335":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_345":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type rekRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_354":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_364":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_367":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_378":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_390":{"methods":[{"sl":48},{"sl":52},{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":49},{"sl":54},{"sl":59}]},"test_40":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_412":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_433":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_443":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_445":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_447":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_470":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_473":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_479":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_496":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type pskRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_523":{"methods":[{"sl":57}],"name":"Verify toString","pass":true,"statements":[{"sl":59}]},"test_528":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_549":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_57":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_577":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_58":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_585":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_587":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type symmRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_61":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_614":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_656":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_66":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_660":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_674":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_687":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_711":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_713":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that IssuerIdentifier is correctly encoded for type sha256AndDigest","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_736":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_744":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_775":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that SignerIdentifier is correctly encoded for type digest","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_778":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_81":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_815":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_825":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_836":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_843":{"methods":[{"sl":39},{"sl":52}],"name":"Verify that RecipientInfo is correctly encoded for type signedDataRecipInfo","pass":true,"statements":[{"sl":40},{"sl":54}]},"test_850":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_871":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_876":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_877":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_882":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_894":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_897":{"methods":[{"sl":39},{"sl":48},{"sl":52}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":40},{"sl":49},{"sl":54}]},"test_945":{"methods":[{"sl":48},{"sl":52}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_949":{"methods":[{"sl":39},{"sl":52},{"sl":57}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":40},{"sl":54},{"sl":59}]},"test_96":{"methods":[{"sl":48},{"sl":52},{"sl":57}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":49},{"sl":54},{"sl":59}]},"test_979":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":49},{"sl":54}]},"test_991":{"methods":[{"sl":48},{"sl":52}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":49},{"sl":54}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [25, 815, 897, 496, 445, 313, 58, 744, 528, 157, 876, 825, 321, 354, 443, 0, 367, 135, 949, 656, 288, 211, 254, 775, 549, 197, 335, 81, 345, 877, 843, 57, 736, 327, 713, 587, 237], [25, 815, 897, 496, 445, 313, 58, 744, 528, 157, 876, 825, 321, 354, 443, 0, 367, 135, 949, 656, 288, 211, 254, 775, 549, 197, 335, 81, 345, 877, 843, 57, 736, 327, 713, 587, 237], [], [], [], [], [], [], [], [815, 897, 123, 447, 120, 16, 307, 991, 378, 390, 479, 58, 674, 945, 167, 146, 577, 778, 876, 470, 325, 711, 882, 825, 321, 354, 61, 585, 0, 40, 871, 367, 364, 96, 836, 135, 66, 614, 687, 549, 309, 979, 850, 412, 168, 660, 473, 1, 290, 128, 182, 257, 57, 433, 894, 245], [815, 897, 123, 447, 120, 16, 307, 991, 378, 390, 479, 58, 674, 945, 167, 146, 577, 778, 876, 470, 325, 711, 882, 825, 321, 354, 61, 585, 0, 40, 871, 367, 364, 96, 836, 135, 66, 614, 687, 549, 309, 979, 850, 412, 168, 660, 473, 1, 290, 128, 182, 257, 57, 433, 894, 245], [], [], [25, 815, 897, 496, 123, 447, 120, 16, 445, 307, 991, 378, 313, 390, 479, 58, 674, 744, 945, 167, 146, 577, 528, 778, 157, 876, 470, 325, 711, 882, 825, 321, 354, 443, 61, 585, 0, 40, 871, 367, 364, 96, 836, 135, 66, 614, 949, 656, 288, 211, 254, 775, 687, 549, 309, 979, 850, 412, 197, 168, 335, 660, 81, 345, 473, 1, 877, 290, 128, 182, 843, 257, 57, 736, 327, 713, 433, 587, 894, 237, 245], [], [25, 815, 897, 496, 123, 447, 120, 16, 445, 307, 991, 378, 313, 390, 479, 58, 674, 744, 945, 167, 146, 577, 528, 778, 157, 876, 470, 325, 711, 882, 825, 321, 354, 443, 61, 585, 0, 40, 871, 367, 364, 96, 836, 135, 66, 614, 949, 656, 288, 211, 254, 775, 687, 549, 309, 979, 850, 412, 197, 168, 335, 660, 81, 345, 473, 1, 877, 290, 128, 182, 843, 257, 57, 736, 327, 713, 433, 587, 894, 237, 245], [], [], [313, 390, 523, 96, 949, 211, 335, 877, 213], [], [313, 390, 523, 96, 949, 211, 335, 877, 213], [], [], []]
