var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":103,"id":3151,"methods":[{"el":41,"sc":2,"sl":38},{"el":52,"sc":2,"sl":46},{"el":63,"sc":2,"sl":57},{"el":71,"sc":2,"sl":69},{"el":79,"sc":2,"sl":77},{"el":87,"sc":2,"sl":85},{"el":94,"sc":2,"sl":90},{"el":101,"sc":2,"sl":96}],"name":"ThreeDLocation","sl":27}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_143":{"methods":[{"sl":38},{"sl":46},{"sl":69},{"sl":77},{"sl":85},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":47},{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":70},{"sl":78},{"sl":86},{"sl":91},{"sl":92},{"sl":93}]},"test_19":{"methods":[{"sl":38},{"sl":69},{"sl":77},{"sl":85},{"sl":90},{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":70},{"sl":78},{"sl":86},{"sl":91},{"sl":92},{"sl":93},{"sl":98},{"sl":99},{"sl":100}]},"test_249":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_257":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_259":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_35":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_375":{"methods":[{"sl":46},{"sl":90}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":91},{"sl":92},{"sl":93}]},"test_385":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_406":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_413":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_447":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_470":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_482":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_485":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_547":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_550":{"methods":[{"sl":38},{"sl":90}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_608":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_616":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_627":{"methods":[{"sl":38},{"sl":57},{"sl":69},{"sl":77},{"sl":85},{"sl":90}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":62},{"sl":70},{"sl":78},{"sl":86},{"sl":91},{"sl":92},{"sl":93}]},"test_658":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_662":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_686":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_693":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_740":{"methods":[{"sl":46},{"sl":69},{"sl":77},{"sl":85},{"sl":90},{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":50},{"sl":51},{"sl":70},{"sl":78},{"sl":86},{"sl":91},{"sl":92},{"sl":93},{"sl":98},{"sl":99},{"sl":100}]},"test_746":{"methods":[{"sl":38},{"sl":90}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_75":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_774":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_942":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_955":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]},"test_974":{"methods":[{"sl":38},{"sl":90}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39},{"sl":40},{"sl":91},{"sl":92},{"sl":93}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [658, 547, 550, 249, 470, 406, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 627, 143, 385, 942, 662, 75, 746, 413, 608, 259, 955], [658, 547, 550, 249, 470, 406, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 627, 143, 385, 942, 662, 75, 746, 413, 608, 259, 955], [658, 547, 550, 249, 470, 406, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 627, 143, 385, 942, 662, 75, 746, 413, 608, 259, 955], [], [], [], [], [], [740, 143, 375], [740, 143, 375], [740, 143, 375], [740, 143, 375], [740, 143, 375], [740, 143, 375], [], [], [], [], [], [627], [627], [627], [627], [627], [627], [], [], [], [], [], [], [19, 740, 627, 143], [19, 740, 627, 143], [], [], [], [], [], [], [19, 740, 627, 143], [19, 740, 627, 143], [], [], [], [], [], [], [19, 740, 627, 143], [19, 740, 627, 143], [], [], [], [658, 547, 550, 249, 470, 406, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 740, 627, 143, 385, 942, 662, 75, 375, 746, 413, 608, 259, 955], [658, 547, 550, 249, 470, 406, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 740, 627, 143, 385, 942, 662, 75, 375, 746, 413, 608, 259, 955], [658, 547, 550, 249, 470, 406, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 740, 627, 143, 385, 942, 662, 75, 375, 746, 413, 608, 259, 955], [658, 547, 550, 249, 470, 406, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 740, 627, 143, 385, 942, 662, 75, 375, 746, 413, 608, 259, 955], [], [], [19, 740], [], [19, 740], [19, 740], [19, 740], [], [], []]
