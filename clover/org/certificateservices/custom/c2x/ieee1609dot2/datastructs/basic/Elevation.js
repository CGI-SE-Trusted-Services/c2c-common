var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":47,"id":2447,"methods":[{"el":33,"sc":2,"sl":31},{"el":41,"sc":2,"sl":39},{"el":46,"sc":2,"sl":43}],"name":"Elevation","sl":24}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_143":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_19":{"methods":[{"sl":31}],"name":"Verify toString","pass":true,"statements":[{"sl":32}]},"test_249":{"methods":[{"sl":31}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":32}]},"test_257":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":32}]},"test_259":{"methods":[{"sl":31}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":32}]},"test_35":{"methods":[{"sl":31}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32}]},"test_375":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":32}]},"test_385":{"methods":[{"sl":31}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32}]},"test_406":{"methods":[{"sl":31}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32}]},"test_413":{"methods":[{"sl":31}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":32}]},"test_447":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":32}]},"test_470":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_482":{"methods":[{"sl":31}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32}]},"test_485":{"methods":[{"sl":31}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32}]},"test_547":{"methods":[{"sl":31}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":32}]},"test_550":{"methods":[{"sl":31}],"name":"Verify toString","pass":true,"statements":[{"sl":32}]},"test_599":{"methods":[{"sl":39},{"sl":43}],"name":"Verify Elevation toString","pass":true,"statements":[{"sl":40},{"sl":45}]},"test_608":{"methods":[{"sl":31}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32}]},"test_616":{"methods":[{"sl":31}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":32}]},"test_627":{"methods":[{"sl":31},{"sl":39}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":32},{"sl":40}]},"test_658":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":32}]},"test_662":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_684":{"methods":[{"sl":31},{"sl":39}],"name":"Verify constructors","pass":true,"statements":[{"sl":32},{"sl":40}]},"test_686":{"methods":[{"sl":31}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":32}]},"test_693":{"methods":[{"sl":31}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":32}]},"test_740":{"methods":[{"sl":31}],"name":"Verify toString","pass":true,"statements":[{"sl":32}]},"test_746":{"methods":[{"sl":31}],"name":"Verify toString","pass":true,"statements":[{"sl":32}]},"test_75":{"methods":[{"sl":31}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32}]},"test_774":{"methods":[{"sl":31}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32}]},"test_942":{"methods":[{"sl":31}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":32}]},"test_955":{"methods":[{"sl":31}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":32}]},"test_974":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 447, 686, 658, 740, 375, 627, 547, 19, 974, 550, 684, 746, 143, 385, 942, 662, 249, 413, 470, 406, 75, 774, 257, 608, 693, 616, 259, 485, 955, 482], [35, 447, 686, 658, 740, 375, 627, 547, 19, 974, 550, 684, 746, 143, 385, 942, 662, 249, 413, 470, 406, 75, 774, 257, 608, 693, 616, 259, 485, 955, 482], [], [], [], [], [], [], [627, 684, 599], [627, 684, 599], [], [], [599], [], [599], [], []]
