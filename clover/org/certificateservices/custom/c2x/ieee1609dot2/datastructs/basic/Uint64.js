var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":49,"id":3259,"methods":[{"el":34,"sc":2,"sl":32},{"el":41,"sc":2,"sl":39},{"el":47,"sc":2,"sl":44}],"name":"Uint64","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_19":{"methods":[{"sl":32}],"name":"Verify toString","pass":true,"statements":[{"sl":33}]},"test_249":{"methods":[{"sl":32}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":33}]},"test_257":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":33}]},"test_259":{"methods":[{"sl":32}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":33}]},"test_272":{"methods":[{"sl":32}],"name":"Verify toString","pass":true,"statements":[{"sl":33}]},"test_31":{"methods":[{"sl":39},{"sl":44}],"name":"Verify toString","pass":true,"statements":[{"sl":40},{"sl":46}]},"test_35":{"methods":[{"sl":32}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33}]},"test_385":{"methods":[{"sl":32}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33}]},"test_406":{"methods":[{"sl":32}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33}]},"test_413":{"methods":[{"sl":32}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":33}]},"test_447":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":33}]},"test_470":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_482":{"methods":[{"sl":32}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33}]},"test_485":{"methods":[{"sl":32}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":33}]},"test_547":{"methods":[{"sl":32}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":33}]},"test_550":{"methods":[{"sl":32}],"name":"Verify toString","pass":true,"statements":[{"sl":33}]},"test_608":{"methods":[{"sl":32}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33}]},"test_616":{"methods":[{"sl":32}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":33}]},"test_627":{"methods":[{"sl":32}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":33}]},"test_658":{"methods":[{"sl":32}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":33}]},"test_662":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]},"test_686":{"methods":[{"sl":32}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":33}]},"test_693":{"methods":[{"sl":32}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":33}]},"test_746":{"methods":[{"sl":32}],"name":"Verify toString","pass":true,"statements":[{"sl":33}]},"test_75":{"methods":[{"sl":32}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33}]},"test_774":{"methods":[{"sl":32}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":33}]},"test_807":{"methods":[{"sl":32},{"sl":39}],"name":"Verify that Time64 converts date correctly","pass":true,"statements":[{"sl":33},{"sl":40}]},"test_936":{"methods":[{"sl":32},{"sl":39}],"name":"Verify that Uint64 has min value 0 and 18446744073709551615","pass":true,"statements":[{"sl":33},{"sl":40}]},"test_942":{"methods":[{"sl":32}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":33}]},"test_955":{"methods":[{"sl":32}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":33}]},"test_974":{"methods":[{"sl":32}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":33}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [658, 547, 550, 249, 470, 406, 936, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 627, 385, 942, 662, 75, 807, 272, 746, 413, 608, 259, 955], [658, 547, 550, 249, 470, 406, 936, 482, 686, 19, 974, 774, 257, 693, 616, 485, 35, 447, 627, 385, 942, 662, 75, 807, 272, 746, 413, 608, 259, 955], [], [], [], [], [], [936, 807, 31], [936, 807, 31], [], [], [], [31], [], [31], [], [], []]
