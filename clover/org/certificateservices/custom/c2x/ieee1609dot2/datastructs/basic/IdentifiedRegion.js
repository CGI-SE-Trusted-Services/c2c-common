var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":82,"id":2581,"methods":[{"el":58,"sc":2,"sl":56},{"el":65,"sc":2,"sl":63},{"el":74,"sc":2,"sl":72},{"el":80,"sc":2,"sl":77}],"name":"IdentifiedRegion","sl":33},{"el":51,"id":2581,"methods":[{"el":45,"sc":3,"sl":43},{"el":50,"sc":3,"sl":47}],"name":"IdentifiedRegion.IdentifiedRegionChoices","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_128":{"methods":[{"sl":56}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":57}]},"test_16":{"methods":[{"sl":47}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":49}]},"test_163":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_172":{"methods":[{"sl":77}],"name":"Verify toString","pass":true,"statements":[{"sl":79}]},"test_196":{"methods":[{"sl":47},{"sl":56},{"sl":63},{"sl":72}],"name":"Verify that IdentifiedRegion is correctly encoded for type countryAndSubregions and value CountryAndSubregions [country=5, region and subregions=RegionAndSubregions [region=5, subregions=12,13],RegionAndSubregions [region=6, subregions=14,15]]","pass":true,"statements":[{"sl":49},{"sl":57},{"sl":64},{"sl":73}]},"test_226":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_239":{"methods":[{"sl":56}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_246":{"methods":[{"sl":77}],"name":"Verify toString","pass":true,"statements":[{"sl":79}]},"test_248":{"methods":[{"sl":56}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":57}]},"test_261":{"methods":[{"sl":56}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":57}]},"test_278":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_298":{"methods":[{"sl":47}],"name":"Verify that GeographicRegion is correctly encoded for type identifiedRegion and value SequenceOfIdentifiedRegion [[CountryOnly [10]]]","pass":true,"statements":[{"sl":49}]},"test_312":{"methods":[{"sl":56}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":57}]},"test_324":{"methods":[{"sl":56}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":57}]},"test_331":{"methods":[{"sl":47},{"sl":63}],"name":"Verify that SequenceOfIdentifiedRegion is initialized properly","pass":true,"statements":[{"sl":49},{"sl":64}]},"test_35":{"methods":[{"sl":56}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_354":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_360":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_385":{"methods":[{"sl":56}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_393":{"methods":[{"sl":56},{"sl":77}],"name":"Verify toString","pass":true,"statements":[{"sl":57},{"sl":79}]},"test_406":{"methods":[{"sl":56}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_422":{"methods":[{"sl":47}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":49}]},"test_437":{"methods":[{"sl":47}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":49}]},"test_455":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_465":{"methods":[{"sl":56}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":57}]},"test_474":{"methods":[{"sl":47},{"sl":56},{"sl":63},{"sl":72}],"name":"Verify that IdentifiedRegion is correctly encoded for type countryAndRegions and value CountryAndRegions [countryOnly=5, regions=12,13]","pass":true,"statements":[{"sl":49},{"sl":57},{"sl":64},{"sl":73}]},"test_482":{"methods":[{"sl":56}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_485":{"methods":[{"sl":56}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_486":{"methods":[{"sl":47}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":49}]},"test_498":{"methods":[{"sl":56}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":57}]},"test_499":{"methods":[{"sl":56}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":57}]},"test_523":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_532":{"methods":[{"sl":56}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":57}]},"test_547":{"methods":[{"sl":56}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":57}]},"test_567":{"methods":[{"sl":56}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":57}]},"test_569":{"methods":[{"sl":56}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_587":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_588":{"methods":[{"sl":47},{"sl":56},{"sl":63},{"sl":72}],"name":"Verify that IdentifiedRegion is correctly encoded for type countryOnly and value CountryOnly [10]","pass":true,"statements":[{"sl":49},{"sl":57},{"sl":64},{"sl":73}]},"test_608":{"methods":[{"sl":56}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_609":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_616":{"methods":[{"sl":43},{"sl":47},{"sl":63},{"sl":77}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":44},{"sl":49},{"sl":64},{"sl":79}]},"test_62":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_625":{"methods":[{"sl":56}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_650":{"methods":[{"sl":56}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":57}]},"test_665":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_685":{"methods":[{"sl":47},{"sl":77}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":49},{"sl":79}]},"test_686":{"methods":[{"sl":56}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":57}]},"test_689":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_729":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_73":{"methods":[{"sl":63},{"sl":77}],"name":"Verify toString","pass":true,"statements":[{"sl":64},{"sl":79}]},"test_735":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_74":{"methods":[{"sl":56}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":57}]},"test_749":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_75":{"methods":[{"sl":56}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_769":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_774":{"methods":[{"sl":56}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_79":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_829":{"methods":[{"sl":56}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":57}]},"test_901":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]},"test_946":{"methods":[{"sl":56}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":57}]},"test_960":{"methods":[{"sl":56}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":57}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [616], [616], [], [], [16, 298, 422, 486, 474, 588, 437, 331, 685, 196, 616], [], [16, 298, 422, 486, 474, 588, 437, 331, 685, 196, 616], [], [], [], [], [], [], [261, 35, 625, 901, 547, 587, 665, 239, 735, 385, 532, 79, 324, 312, 393, 406, 75, 360, 769, 74, 960, 128, 474, 226, 499, 465, 482, 946, 686, 354, 455, 729, 588, 567, 569, 829, 523, 689, 248, 196, 774, 749, 278, 163, 608, 62, 650, 0, 498, 609, 485], [261, 35, 625, 901, 547, 587, 665, 239, 735, 385, 532, 79, 324, 312, 393, 406, 75, 360, 769, 74, 960, 128, 474, 226, 499, 465, 482, 946, 686, 354, 455, 729, 588, 567, 569, 829, 523, 689, 248, 196, 774, 749, 278, 163, 608, 62, 650, 0, 498, 609, 485], [], [], [], [], [], [474, 73, 588, 331, 196, 616], [474, 73, 588, 331, 196, 616], [], [], [], [], [], [], [], [474, 588, 196], [474, 588, 196], [], [], [], [393, 246, 73, 685, 172, 616], [], [393, 246, 73, 685, 172, 616], [], [], []]
