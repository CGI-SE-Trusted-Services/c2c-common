var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":84,"id":2568,"methods":[{"el":55,"sc":2,"sl":53},{"el":62,"sc":2,"sl":60},{"el":69,"sc":2,"sl":67},{"el":77,"sc":2,"sl":75},{"el":82,"sc":2,"sl":79}],"name":"EncryptionKey","sl":32},{"el":48,"id":2568,"methods":[{"el":47,"sc":3,"sl":41}],"name":"EncryptionKey.EncryptionKeyChoices","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_110":{"methods":[{"sl":67}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":68}]},"test_182":{"methods":[{"sl":67}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":68}]},"test_214":{"methods":[{"sl":41},{"sl":53},{"sl":67},{"sl":75}],"name":"Verify that EncryptionKey is correctly encoded for type public_","pass":true,"statements":[{"sl":43},{"sl":44},{"sl":54},{"sl":68},{"sl":76}]},"test_310":{"methods":[{"sl":67}],"name":"Verify toString","pass":true,"statements":[{"sl":68}]},"test_325":{"methods":[{"sl":67}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68}]},"test_367":{"methods":[{"sl":67}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68}]},"test_377":{"methods":[{"sl":67}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":68}]},"test_380":{"methods":[{"sl":41},{"sl":60},{"sl":67},{"sl":75}],"name":"Verify that EncryptionKey is correctly encoded for type symmetric","pass":true,"statements":[{"sl":43},{"sl":46},{"sl":61},{"sl":68},{"sl":76}]},"test_386":{"methods":[{"sl":53},{"sl":67}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":54},{"sl":68}]},"test_40":{"methods":[{"sl":67}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68}]},"test_412":{"methods":[{"sl":67}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":68}]},"test_42":{"methods":[{"sl":53},{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":54},{"sl":61},{"sl":81}]},"test_445":{"methods":[{"sl":67}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":68}]},"test_447":{"methods":[{"sl":67}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68}]},"test_509":{"methods":[{"sl":41},{"sl":67}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":43},{"sl":46},{"sl":68}]},"test_549":{"methods":[{"sl":53},{"sl":67},{"sl":75}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":68},{"sl":76}]},"test_57":{"methods":[{"sl":67}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":68}]},"test_58":{"methods":[{"sl":67}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":68}]},"test_633":{"methods":[{"sl":67}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":68}]},"test_656":{"methods":[{"sl":67}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":68}]},"test_66":{"methods":[{"sl":53},{"sl":67}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":54},{"sl":68}]},"test_667":{"methods":[{"sl":67}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":68}]},"test_740":{"methods":[{"sl":67}],"name":"Verify toString","pass":true,"statements":[{"sl":68}]},"test_744":{"methods":[{"sl":67}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":68}]},"test_790":{"methods":[{"sl":67}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":68}]},"test_81":{"methods":[{"sl":67}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":68}]},"test_815":{"methods":[{"sl":53},{"sl":67},{"sl":75}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":68},{"sl":76}]},"test_820":{"methods":[{"sl":67},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":68},{"sl":81}]},"test_882":{"methods":[{"sl":67}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":68}]},"test_949":{"methods":[{"sl":67}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":68}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [214, 509, 380], [], [214, 509, 380], [214], [], [509, 380], [], [], [], [], [], [], [815, 549, 42, 214, 386, 66], [815, 549, 42, 214, 386, 66], [], [], [], [], [], [42, 380], [42, 380], [], [], [], [], [], [815, 549, 447, 820, 445, 412, 58, 744, 214, 81, 740, 310, 325, 882, 110, 509, 380, 182, 57, 633, 40, 367, 386, 667, 377, 66, 949, 656, 790], [815, 549, 447, 820, 445, 412, 58, 744, 214, 81, 740, 310, 325, 882, 110, 509, 380, 182, 57, 633, 40, 367, 386, 667, 377, 66, 949, 656, 790], [], [], [], [], [], [], [815, 549, 214, 380], [815, 549, 214, 380], [], [], [820, 42], [], [820, 42], [], [], []]
