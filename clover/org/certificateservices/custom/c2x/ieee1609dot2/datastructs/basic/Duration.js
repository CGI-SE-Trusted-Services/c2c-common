var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":84,"id":2290,"methods":[{"el":55,"sc":2,"sl":53},{"el":62,"sc":2,"sl":60},{"el":70,"sc":2,"sl":68},{"el":77,"sc":2,"sl":75},{"el":82,"sc":2,"sl":79}],"name":"Duration","sl":30},{"el":48,"id":2290,"methods":[{"el":46,"sc":3,"sl":43}],"name":"Duration.DurationChoices","sl":34}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_128":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_136":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_147":{"methods":[{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":61},{"sl":81}]},"test_16":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_163":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_172":{"methods":[{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":61},{"sl":81}]},"test_174":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_185":{"methods":[{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":61},{"sl":81}]},"test_199":{"methods":[{"sl":60}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[{"sl":61}]},"test_226":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_239":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_246":{"methods":[{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":61},{"sl":81}]},"test_248":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_261":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_278":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_303":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type microseconds and value 0","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_312":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_324":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_326":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_35":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_354":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_360":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_385":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_406":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_414":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type years and value 10","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_417":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_422":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_437":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_455":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_465":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_468":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type seconds and value 10","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_482":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_485":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_486":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_490":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type microseconds and value 10","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_498":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_499":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_522":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type hours and value 10","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_523":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_532":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_54":{"methods":[{"sl":60}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":61}]},"test_547":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_55":{"methods":[{"sl":60}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":61}]},"test_567":{"methods":[{"sl":53},{"sl":60}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_569":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_587":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_608":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_609":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_616":{"methods":[{"sl":43},{"sl":60},{"sl":79}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":45},{"sl":61},{"sl":81}]},"test_62":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_625":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_637":{"methods":[{"sl":60}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":61}]},"test_650":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_665":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_670":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_685":{"methods":[{"sl":43},{"sl":60},{"sl":79}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":45},{"sl":61},{"sl":81}]},"test_686":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_689":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_708":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_729":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_735":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_74":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_749":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_75":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_756":{"methods":[{"sl":79}],"name":"Verify toString()","pass":true,"statements":[{"sl":81}]},"test_764":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type milliseconds and value 10","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_769":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_774":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_79":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_818":{"methods":[{"sl":43},{"sl":60}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":45},{"sl":61}]},"test_829":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_839":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type minutes and value 10","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_862":{"methods":[{"sl":43},{"sl":53},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Duration is correctly encoded for type sixtyHours and value 10","pass":true,"statements":[{"sl":45},{"sl":54},{"sl":61},{"sl":69},{"sl":76}]},"test_884":{"methods":[{"sl":60}],"name":"Verify that both start and duration have to be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":61}]},"test_886":{"methods":[{"sl":53},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":54},{"sl":81}]},"test_901":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_939":{"methods":[{"sl":60}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":61}]},"test_946":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":54},{"sl":61}]},"test_947":{"methods":[{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":61},{"sl":81}]},"test_960":{"methods":[{"sl":53},{"sl":60}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":54},{"sl":61}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [16, 422, 486, 839, 417, 490, 862, 670, 136, 685, 303, 616, 174, 522, 818, 468, 414, 437, 764], [], [16, 422, 486, 839, 417, 490, 862, 670, 136, 685, 303, 616, 174, 522, 818, 468, 414, 437, 764], [], [], [], [], [], [], [], [625, 547, 587, 665, 239, 406, 839, 769, 74, 960, 128, 226, 465, 482, 490, 686, 862, 354, 455, 523, 689, 303, 774, 749, 163, 886, 62, 650, 498, 485, 261, 35, 901, 735, 385, 532, 79, 324, 312, 75, 360, 522, 499, 468, 946, 414, 729, 567, 569, 829, 248, 278, 608, 764, 0, 609], [625, 547, 587, 665, 239, 406, 839, 769, 74, 960, 128, 226, 465, 482, 490, 686, 862, 354, 455, 523, 689, 303, 774, 749, 163, 886, 62, 650, 498, 485, 261, 35, 901, 735, 385, 532, 79, 324, 312, 75, 360, 522, 499, 468, 946, 414, 729, 567, 569, 829, 248, 278, 608, 764, 0, 609], [], [], [], [], [], [16, 625, 547, 587, 665, 422, 55, 239, 637, 406, 185, 246, 486, 839, 769, 147, 74, 960, 417, 128, 226, 465, 482, 490, 686, 862, 354, 670, 136, 455, 523, 685, 689, 303, 774, 749, 163, 54, 62, 650, 616, 199, 498, 485, 884, 261, 35, 901, 735, 385, 174, 532, 79, 324, 947, 312, 75, 360, 939, 522, 499, 818, 468, 946, 414, 729, 567, 569, 829, 437, 248, 278, 608, 172, 764, 0, 609], [16, 625, 547, 587, 665, 422, 55, 239, 637, 406, 185, 246, 486, 839, 769, 147, 74, 960, 417, 128, 226, 465, 482, 490, 686, 862, 354, 670, 136, 455, 523, 685, 689, 303, 774, 749, 163, 54, 62, 650, 616, 199, 498, 485, 884, 261, 35, 901, 735, 385, 174, 532, 79, 324, 947, 312, 75, 360, 939, 522, 499, 818, 468, 946, 414, 729, 567, 569, 829, 437, 248, 278, 608, 172, 764, 0, 609], [], [], [], [], [], [], [839, 490, 862, 303, 522, 468, 414, 764], [839, 490, 862, 303, 522, 468, 414, 764], [], [], [], [], [], [839, 490, 862, 303, 522, 468, 414, 764], [839, 490, 862, 303, 522, 468, 414, 764], [], [], [756, 185, 246, 147, 708, 326, 685, 886, 616, 947, 172], [], [756, 185, 246, 147, 708, 326, 685, 886, 616, 947, 172], [], [], []]
