var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":49,"id":2784,"methods":[{"el":33,"sc":2,"sl":31},{"el":40,"sc":2,"sl":38},{"el":45,"sc":2,"sl":42}],"name":"Opaque","sl":24}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_164":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_182":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_197":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_23":{"methods":[{"sl":38},{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":44}]},"test_237":{"methods":[{"sl":31}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":32}]},"test_25":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_320":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":32}]},"test_321":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_325":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_331":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_346":{"methods":[{"sl":31}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedCertificateRequest","pass":true,"statements":[{"sl":32}]},"test_354":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_367":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_378":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_402":{"methods":[{"sl":31}],"name":"Verify that SymmetricCiphertext is correctly encoded for type aes128ccm","pass":true,"statements":[{"sl":32}]},"test_412":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_467":{"methods":[{"sl":31}],"name":"Verify that Opaque has no size boundraries","pass":true,"statements":[{"sl":32}]},"test_549":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_57":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_58":{"methods":[{"sl":38}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":39}]},"test_587":{"methods":[{"sl":31}],"name":"Verify that RecipientInfo is correctly encoded for type symmRecipInfo","pass":true,"statements":[{"sl":32}]},"test_592":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_597":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_66":{"methods":[{"sl":38}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":39}]},"test_725":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_744":{"methods":[{"sl":31}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":32}]},"test_757":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that constructor throws Exception if content doesn't fullfill requirements","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_765":{"methods":[{"sl":31},{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":32},{"sl":44}]},"test_815":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_825":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_828":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that constructor throws Exception if content doesn't fullfill requirements","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_876":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_88":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":32}]},"test_882":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_889":{"methods":[{"sl":31},{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_9":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_908":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_946":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_949":{"methods":[{"sl":31},{"sl":42}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":32},{"sl":44}]},"test_95":{"methods":[{"sl":31}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type unsecuredData","pass":true,"statements":[{"sl":32}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [25, 876, 815, 757, 882, 549, 467, 825, 88, 321, 946, 182, 592, 354, 57, 378, 197, 0, 9, 367, 331, 587, 744, 889, 346, 95, 402, 765, 828, 320, 949, 237], [25, 876, 815, 757, 882, 549, 467, 825, 88, 321, 946, 182, 592, 354, 57, 378, 197, 0, 9, 367, 331, 587, 744, 889, 346, 95, 402, 765, 828, 320, 949, 237], [], [], [], [], [], [876, 815, 325, 757, 882, 549, 825, 321, 182, 354, 412, 57, 378, 0, 58, 9, 367, 889, 23, 828, 66], [876, 815, 325, 757, 882, 549, 825, 321, 182, 354, 412, 57, 378, 0, 58, 9, 367, 889, 23, 828, 66], [], [], [908, 164, 725, 765, 23, 949, 597], [], [908, 164, 725, 765, 23, 949, 597], [], [], [], [], []]
