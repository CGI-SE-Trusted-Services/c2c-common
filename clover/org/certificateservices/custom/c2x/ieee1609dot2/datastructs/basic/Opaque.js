var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":49,"id":2669,"methods":[{"el":33,"sc":2,"sl":31},{"el":40,"sc":2,"sl":38},{"el":45,"sc":2,"sl":42}],"name":"Opaque","sl":24}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_144":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":32}]},"test_201":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_237":{"methods":[{"sl":31},{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_239":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_286":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that preshared key encryption works correctly","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_304":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that symmetric key envelope encryption works correctly","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_319":{"methods":[{"sl":31}],"name":"Verify that RecipientInfo is correctly encoded for type symmRecipInfo","pass":true,"statements":[{"sl":32}]},"test_329":{"methods":[{"sl":31}],"name":"Verify that SymmetricCiphertext is correctly encoded for type aes128ccm","pass":true,"statements":[{"sl":32}]},"test_332":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that constructor throws Exception if content doesn't fullfill requirements","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_335":{"methods":[{"sl":31}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type unsecuredData","pass":true,"statements":[{"sl":32}]},"test_35":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_38":{"methods":[{"sl":31}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":32}]},"test_381":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_385":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_396":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_406":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_413":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_416":{"methods":[{"sl":31},{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":32},{"sl":44}]},"test_460":{"methods":[{"sl":31}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type encryptedData","pass":true,"statements":[{"sl":32}]},"test_485":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_547":{"methods":[{"sl":38}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":39}]},"test_56":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_563":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_569":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_608":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_616":{"methods":[{"sl":31},{"sl":42}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":32},{"sl":44}]},"test_617":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_625":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_686":{"methods":[{"sl":38}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":39}]},"test_688":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_693":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_727":{"methods":[{"sl":31}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32}]},"test_731":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_732":{"methods":[{"sl":38},{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":44}]},"test_774":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_817":{"methods":[{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":44}]},"test_89":{"methods":[{"sl":31}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedCertificateRequest","pass":true,"statements":[{"sl":32}]},"test_928":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that constructor throws Exception if content doesn't fullfill requirements","pass":true,"statements":[{"sl":32},{"sl":39}]},"test_942":{"methods":[{"sl":31}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":32}]},"test_945":{"methods":[{"sl":31}],"name":"Verify that Opaque has no size boundraries","pass":true,"statements":[{"sl":32}]},"test_946":{"methods":[{"sl":31},{"sl":38}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":32},{"sl":39}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [946, 35, 625, 201, 319, 332, 239, 416, 688, 569, 942, 335, 460, 945, 396, 286, 731, 413, 304, 928, 56, 774, 89, 727, 329, 608, 237, 144, 693, 616, 38, 485], [946, 35, 625, 201, 319, 332, 239, 416, 688, 569, 942, 335, 460, 945, 396, 286, 731, 413, 304, 928, 56, 774, 89, 727, 329, 608, 237, 144, 693, 616, 38, 485], [], [], [], [], [], [946, 35, 625, 686, 547, 332, 239, 569, 385, 732, 286, 731, 413, 304, 928, 406, 774, 608, 237, 693, 485], [946, 35, 625, 686, 547, 332, 239, 569, 385, 732, 286, 731, 413, 304, 928, 406, 774, 608, 237, 693, 485], [], [], [817, 416, 617, 732, 563, 381, 616], [], [817, 416, 617, 732, 563, 381, 616], [], [], [], [], []]
