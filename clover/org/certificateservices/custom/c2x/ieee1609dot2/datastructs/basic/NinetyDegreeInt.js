var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":58,"id":2651,"methods":[{"el":40,"sc":2,"sl":38},{"el":48,"sc":2,"sl":46},{"el":54,"sc":2,"sl":50}],"name":"NinetyDegreeInt","sl":27}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_143":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_154":{"methods":[{"sl":46},{"sl":50}],"name":"Verify NinetyDegreeInt toString","pass":true,"statements":[{"sl":47},{"sl":52},{"sl":53}]},"test_164":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_19":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_249":{"methods":[{"sl":38}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":39}]},"test_254":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_257":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":39}]},"test_259":{"methods":[{"sl":38}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":39}]},"test_270":{"methods":[{"sl":46}],"name":"Verify KnownLatitude toString","pass":true,"statements":[{"sl":47}]},"test_29":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown if UNKNOWN is used as latitude or longitude","pass":true,"statements":[{"sl":39}]},"test_328":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39}]},"test_346":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_35":{"methods":[{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_375":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39}]},"test_385":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_406":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_413":{"methods":[{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":39}]},"test_432":{"methods":[{"sl":38}],"name":"Verify that SequenceOfRectangularRegion is initialized properly","pass":true,"statements":[{"sl":39}]},"test_44":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that NinetyDegreeInt constructors sets the correct min and max values.","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_447":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39}]},"test_470":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_482":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_485":{"methods":[{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_49":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_5":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that KnownLatitude constructors sets the correct min and max values.","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_520":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that Latitude constructors sets the correct min and max values.","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_547":{"methods":[{"sl":38}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":39}]},"test_550":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_603":{"methods":[{"sl":46}],"name":"Verify UnknownLatitude toString","pass":true,"statements":[{"sl":47}]},"test_608":{"methods":[{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_616":{"methods":[{"sl":38}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":39}]},"test_620":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_627":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_658":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":39}]},"test_662":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_663":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that IllegalArgumentException is thrown if poistion is the same","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_686":{"methods":[{"sl":38}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":39}]},"test_693":{"methods":[{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":39}]},"test_706":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_718":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_740":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_746":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_75":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_755":{"methods":[{"sl":38}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":39}]},"test_768":{"methods":[{"sl":38}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":39}]},"test_774":{"methods":[{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_83":{"methods":[{"sl":46}],"name":"Verify Latitude toString","pass":true,"statements":[{"sl":47}]},"test_881":{"methods":[{"sl":46}],"name":"Verify that UnknownLatitude constructors sets the correct min and max values.","pass":true,"statements":[{"sl":47}]},"test_941":{"methods":[{"sl":38}],"name":"Verify that PolygonalRegion is initialized properly","pass":true,"statements":[{"sl":39}]},"test_942":{"methods":[{"sl":38}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":39}]},"test_955":{"methods":[{"sl":38}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":39}]},"test_974":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 447, 432, 658, 346, 740, 627, 547, 941, 5, 550, 143, 385, 942, 662, 249, 49, 164, 470, 406, 520, 75, 620, 482, 686, 29, 375, 19, 663, 974, 768, 706, 44, 746, 718, 413, 755, 774, 257, 328, 608, 693, 616, 259, 254, 485, 955], [35, 447, 432, 658, 346, 740, 627, 547, 941, 5, 550, 143, 385, 942, 662, 249, 49, 164, 470, 406, 520, 75, 620, 482, 686, 29, 375, 19, 663, 974, 768, 706, 44, 746, 718, 413, 755, 774, 257, 328, 608, 693, 616, 259, 254, 485, 955], [], [], [], [], [], [], [270, 603, 627, 154, 5, 520, 663, 881, 83, 44], [270, 603, 627, 154, 5, 520, 663, 881, 83, 44], [], [], [154], [], [154], [154], [], [], [], [], []]
