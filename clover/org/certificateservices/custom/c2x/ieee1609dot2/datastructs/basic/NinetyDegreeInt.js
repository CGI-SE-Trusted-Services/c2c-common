var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":58,"id":2766,"methods":[{"el":40,"sc":2,"sl":38},{"el":48,"sc":2,"sl":46},{"el":54,"sc":2,"sl":50}],"name":"NinetyDegreeInt","sl":27}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_106":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown if UNKNOWN is used as latitude or longitude","pass":true,"statements":[{"sl":39}]},"test_110":{"methods":[{"sl":38}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":39}]},"test_140":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_154":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_160":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that IllegalArgumentException is thrown if poistion is the same","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_182":{"methods":[{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":39}]},"test_183":{"methods":[{"sl":38}],"name":"Verify that SequenceOfRectangularRegion is initialized properly","pass":true,"statements":[{"sl":39}]},"test_185":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39}]},"test_246":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_279":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_310":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_325":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_35":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_367":{"methods":[{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_377":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":39}]},"test_386":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_399":{"methods":[{"sl":38}],"name":"Verify that PolygonalRegion is initialized properly","pass":true,"statements":[{"sl":39}]},"test_40":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_401":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39}]},"test_412":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_416":{"methods":[{"sl":46}],"name":"Verify UnknownLatitude toString","pass":true,"statements":[{"sl":47}]},"test_445":{"methods":[{"sl":38}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":39}]},"test_447":{"methods":[{"sl":38}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_458":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_509":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_548":{"methods":[{"sl":38}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":39}]},"test_549":{"methods":[{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_567":{"methods":[{"sl":46}],"name":"Verify that UnknownLatitude constructors sets the correct min and max values.","pass":true,"statements":[{"sl":47}]},"test_57":{"methods":[{"sl":38}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":39}]},"test_58":{"methods":[{"sl":38}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":39}]},"test_633":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":39}]},"test_65":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_651":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that NinetyDegreeInt constructors sets the correct min and max values.","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_656":{"methods":[{"sl":38}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":39}]},"test_66":{"methods":[{"sl":38}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":39}]},"test_667":{"methods":[{"sl":38}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":39}]},"test_676":{"methods":[{"sl":46}],"name":"Verify KnownLatitude toString","pass":true,"statements":[{"sl":47}]},"test_693":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_740":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_744":{"methods":[{"sl":38}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":39}]},"test_753":{"methods":[{"sl":38}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":39}]},"test_790":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_793":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that KnownLatitude constructors sets the correct min and max values.","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_81":{"methods":[{"sl":38}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":39}]},"test_815":{"methods":[{"sl":38}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":39}]},"test_820":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]},"test_858":{"methods":[{"sl":38},{"sl":46}],"name":"Verify that Latitude constructors sets the correct min and max values.","pass":true,"statements":[{"sl":39},{"sl":47}]},"test_867":{"methods":[{"sl":46}],"name":"Verify Latitude toString","pass":true,"statements":[{"sl":47}]},"test_882":{"methods":[{"sl":38}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":39}]},"test_888":{"methods":[{"sl":46},{"sl":50}],"name":"Verify NinetyDegreeInt toString","pass":true,"statements":[{"sl":47},{"sl":52},{"sl":53}]},"test_949":{"methods":[{"sl":38}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":39}]},"test_981":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [815, 549, 447, 820, 548, 445, 412, 753, 246, 58, 744, 981, 81, 160, 793, 740, 693, 183, 310, 325, 882, 458, 399, 110, 35, 509, 182, 57, 106, 858, 401, 154, 633, 40, 367, 386, 667, 140, 377, 66, 949, 656, 185, 65, 790, 279, 651], [815, 549, 447, 820, 548, 445, 412, 753, 246, 58, 744, 981, 81, 160, 793, 740, 693, 183, 310, 325, 882, 458, 399, 110, 35, 509, 182, 57, 106, 858, 401, 154, 633, 40, 367, 386, 667, 140, 377, 66, 949, 656, 185, 65, 790, 279, 651], [], [], [], [], [], [], [867, 160, 567, 793, 676, 858, 386, 416, 888, 651], [867, 160, 567, 793, 676, 858, 386, 416, 888, 651], [], [], [888], [], [888], [888], [], [], [], [], []]
