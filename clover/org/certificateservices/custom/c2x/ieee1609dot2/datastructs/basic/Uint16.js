var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":46,"id":3241,"methods":[{"el":32,"sc":2,"sl":30},{"el":39,"sc":2,"sl":37},{"el":45,"sc":2,"sl":42}],"name":"Uint16","sl":23}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_100":{"methods":[{"sl":30}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31}]},"test_102":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Uint16 has min value 0 and 65535","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_123":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_128":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_136":{"methods":[{"sl":30}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":31}]},"test_143":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_155":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_16":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":31}]},"test_163":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_172":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_174":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_179":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_183":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_185":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_19":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_199":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[{"sl":31}]},"test_202":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_209":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_211":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_226":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_228":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_236":{"methods":[{"sl":30}],"name":"Verify that SequenceOfRegionAndSubregions is initialized properly","pass":true,"statements":[{"sl":31}]},"test_239":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_246":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_248":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_249":{"methods":[{"sl":30}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":31}]},"test_257":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":31}]},"test_259":{"methods":[{"sl":30}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":31}]},"test_26":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_261":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_274":{"methods":[{"sl":30}],"name":"Verify that SequenceOfGroupCrlEntry is initialized properly","pass":true,"statements":[{"sl":31}]},"test_278":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_280":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_288":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_303":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type microseconds and value 0","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_308":{"methods":[{"sl":30}],"name":"Verify that CrlContentsType is correctly encoded for type fullLinkedCrl","pass":true,"statements":[{"sl":31}]},"test_31":{"methods":[{"sl":37},{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":38},{"sl":44}]},"test_312":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_324":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_333":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_336":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 0 to 0000 and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_340":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_346":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_35":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_354":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_356":{"methods":[{"sl":30}],"name":"Verify ElevInt toString","pass":true,"statements":[{"sl":31}]},"test_360":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_367":{"methods":[{"sl":37}],"name":"Verify IValue toString","pass":true,"statements":[{"sl":38}]},"test_368":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if both individual and groups are null","pass":true,"statements":[{"sl":31}]},"test_369":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes -5000 to f001 and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_372":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_375":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_385":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_393":{"methods":[{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":38}]},"test_398":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that SequenceOfUint16 is initialized properly","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_404":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_406":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_409":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_413":{"methods":[{"sl":30}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":31}]},"test_414":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type years and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_417":{"methods":[{"sl":30}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":31}]},"test_422":{"methods":[{"sl":30}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":31}]},"test_429":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_431":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_437":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":31}]},"test_441":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_443":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_447":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_455":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_465":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_468":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type seconds and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_470":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_477":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_48":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_482":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_485":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_486":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_49":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_490":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type microseconds and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_491":{"methods":[{"sl":30}],"name":"Verify that SequenceOfIMaxGroup is initialized properly","pass":true,"statements":[{"sl":31}]},"test_498":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_499":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_52":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_522":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type hours and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_523":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_529":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_532":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_54":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":31}]},"test_547":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_55":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":31}]},"test_550":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_553":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_565":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_567":{"methods":[{"sl":30},{"sl":37}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_569":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_587":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_599":{"methods":[{"sl":30}],"name":"Verify Elevation toString","pass":true,"statements":[{"sl":31}]},"test_606":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 61439 to efff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_608":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_609":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_616":{"methods":[{"sl":30}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":31}]},"test_62":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_625":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_626":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_627":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_633":{"methods":[{"sl":30}],"name":"Verify that SequenceOfJMaxGroup is initialized properly","pass":true,"statements":[{"sl":31}]},"test_634":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_637":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_639":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_65":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_650":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_653":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_658":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":31}]},"test_662":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_665":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_670":{"methods":[{"sl":30}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":31}]},"test_684":{"methods":[{"sl":30}],"name":"Verify constructors","pass":true,"statements":[{"sl":31}]},"test_685":{"methods":[{"sl":30}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":31}]},"test_686":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_689":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_691":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_693":{"methods":[{"sl":30}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":31}]},"test_705":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_712":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes -1 to ffff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_714":{"methods":[{"sl":30}],"name":"Verify that CertificateId is correctly encoded for type linkageData","pass":true,"statements":[{"sl":31}]},"test_72":{"methods":[{"sl":30}],"name":"Verify that SequenceOfLAGroup is initialized properly","pass":true,"statements":[{"sl":31}]},"test_723":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 61440 to efff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_729":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_735":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_74":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_740":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_745":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_746":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_747":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_749":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_75":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_764":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type milliseconds and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_765":{"methods":[{"sl":37}],"name":"Verify CrlSeries toString","pass":true,"statements":[{"sl":38}]},"test_768":{"methods":[{"sl":30}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31}]},"test_769":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_77":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_774":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_784":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_788":{"methods":[{"sl":30}],"name":"Verify that PermissibleCrls is initialized properly","pass":true,"statements":[{"sl":31}]},"test_79":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_812":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 99999 to efff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_818":{"methods":[{"sl":30}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":31}]},"test_829":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_839":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type minutes and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_856":{"methods":[{"sl":37}],"name":"Verify CountryOnly toString","pass":true,"statements":[{"sl":38}]},"test_862":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type sixtyHours and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_878":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 1000 to 03e8 and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_885":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_886":{"methods":[{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":38}]},"test_887":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_889":{"methods":[{"sl":30}],"name":"Verify that CrlContentsType is correctly encoded for type deltaLinkedCrl","pass":true,"statements":[{"sl":31}]},"test_901":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_91":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_914":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_939":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_942":{"methods":[{"sl":30}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":31}]},"test_946":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_947":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_954":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_955":{"methods":[{"sl":30}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":31}]},"test_960":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_967":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_968":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_974":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [102, 16, 72, 625, 658, 356, 547, 587, 665, 422, 55, 633, 239, 280, 550, 209, 637, 249, 333, 477, 470, 406, 185, 246, 812, 486, 889, 839, 769, 914, 74, 960, 417, 155, 128, 606, 52, 226, 465, 482, 372, 490, 686, 529, 862, 784, 723, 354, 19, 91, 670, 136, 308, 455, 974, 768, 747, 714, 639, 368, 705, 65, 523, 685, 689, 303, 774, 749, 257, 77, 163, 967, 54, 48, 340, 491, 179, 693, 62, 650, 616, 199, 498, 745, 485, 398, 261, 35, 447, 346, 901, 740, 336, 627, 211, 100, 684, 123, 735, 143, 26, 202, 385, 942, 954, 174, 441, 532, 79, 183, 662, 431, 324, 429, 947, 49, 312, 553, 75, 360, 939, 712, 522, 409, 499, 818, 468, 946, 691, 375, 414, 885, 288, 443, 729, 567, 746, 404, 569, 829, 634, 437, 369, 968, 565, 248, 413, 626, 236, 278, 653, 878, 608, 228, 274, 172, 887, 599, 764, 259, 0, 788, 609, 955], [102, 16, 72, 625, 658, 356, 547, 587, 665, 422, 55, 633, 239, 280, 550, 209, 637, 249, 333, 477, 470, 406, 185, 246, 812, 486, 889, 839, 769, 914, 74, 960, 417, 155, 128, 606, 52, 226, 465, 482, 372, 490, 686, 529, 862, 784, 723, 354, 19, 91, 670, 136, 308, 455, 974, 768, 747, 714, 639, 368, 705, 65, 523, 685, 689, 303, 774, 749, 257, 77, 163, 967, 54, 48, 340, 491, 179, 693, 62, 650, 616, 199, 498, 745, 485, 398, 261, 35, 447, 346, 901, 740, 336, 627, 211, 100, 684, 123, 735, 143, 26, 202, 385, 942, 954, 174, 441, 532, 79, 183, 662, 431, 324, 429, 947, 49, 312, 553, 75, 360, 939, 712, 522, 409, 499, 818, 468, 946, 691, 375, 414, 885, 288, 443, 729, 567, 746, 404, 569, 829, 634, 437, 369, 968, 565, 248, 413, 626, 236, 278, 653, 878, 608, 228, 274, 172, 887, 599, 764, 259, 0, 788, 609, 955], [], [], [], [], [], [102, 625, 547, 587, 665, 239, 280, 765, 333, 477, 406, 839, 769, 914, 74, 960, 128, 226, 465, 482, 490, 686, 862, 354, 455, 747, 523, 689, 303, 774, 749, 77, 163, 340, 886, 62, 650, 498, 745, 485, 398, 261, 35, 346, 901, 627, 123, 735, 202, 367, 385, 954, 532, 79, 183, 324, 429, 49, 312, 393, 856, 75, 360, 522, 499, 468, 946, 414, 885, 729, 567, 31, 404, 569, 829, 634, 248, 626, 278, 653, 608, 764, 0, 609], [102, 625, 547, 587, 665, 239, 280, 765, 333, 477, 406, 839, 769, 914, 74, 960, 128, 226, 465, 482, 490, 686, 862, 354, 455, 747, 523, 689, 303, 774, 749, 77, 163, 340, 886, 62, 650, 498, 745, 485, 398, 261, 35, 346, 901, 627, 123, 735, 202, 367, 385, 954, 532, 79, 183, 324, 429, 49, 312, 393, 856, 75, 360, 522, 499, 468, 946, 414, 885, 729, 567, 31, 404, 569, 829, 634, 248, 626, 278, 653, 608, 764, 0, 609], [], [], [], [31], [], [31], [], []]
