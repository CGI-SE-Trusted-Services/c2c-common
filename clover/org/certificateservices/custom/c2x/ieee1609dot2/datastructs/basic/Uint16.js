var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":46,"id":3356,"methods":[{"el":32,"sc":2,"sl":30},{"el":39,"sc":2,"sl":37},{"el":45,"sc":2,"sl":42}],"name":"Uint16","sl":23}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_1":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_1009":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_110":{"methods":[{"sl":30}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":31}]},"test_12":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_120":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_123":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_128":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_140":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_143":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_144":{"methods":[{"sl":30}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":31}]},"test_146":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_148":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type milliseconds and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_151":{"methods":[{"sl":37},{"sl":42}],"name":"Verify toString","pass":true,"statements":[{"sl":38},{"sl":44}]},"test_154":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_16":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_163":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_167":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_168":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_17":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes -5000 to f001 and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_177":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_182":{"methods":[{"sl":30}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":31}]},"test_19":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 61439 to efff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_201":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type sixtyHours and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_207":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists","pass":true,"statements":[{"sl":31}]},"test_212":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_222":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_225":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_232":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_233":{"methods":[{"sl":30}],"name":"Verify that PermissibleCrls is initialized properly","pass":true,"statements":[{"sl":31}]},"test_238":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":31}]},"test_250":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":31}]},"test_256":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_257":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_26":{"methods":[{"sl":30}],"name":"Verify that CrlContentsType is correctly encoded for type fullLinkedCrl","pass":true,"statements":[{"sl":31}]},"test_265":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_270":{"methods":[{"sl":30}],"name":"Verify Elevation toString","pass":true,"statements":[{"sl":31}]},"test_276":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_284":{"methods":[{"sl":30}],"name":"Verify that SequenceOfIMaxGroup is initialized properly","pass":true,"statements":[{"sl":31}]},"test_286":{"methods":[{"sl":30}],"name":"Verify that CertificateId is correctly encoded for type linkageData","pass":true,"statements":[{"sl":31}]},"test_288":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_290":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_298":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":31}]},"test_299":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_3":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_304":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_307":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_309":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_310":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_316":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_321":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_323":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_325":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_327":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_330":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_332":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_335":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_343":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type seconds and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_35":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_36":{"methods":[{"sl":30}],"name":"Verify that CrlContentsType is correctly encoded for type deltaLinkedCrl","pass":true,"statements":[{"sl":31}]},"test_364":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_367":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_372":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 99999 to efff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_376":{"methods":[{"sl":37}],"name":"Verify CountryOnly toString","pass":true,"statements":[{"sl":38}]},"test_377":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":31}]},"test_386":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_40":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_401":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_41":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type microseconds and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_412":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_421":{"methods":[{"sl":30}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":31}]},"test_424":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_425":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_428":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that SequenceOfUint16 is initialized properly","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_433":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_44":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_445":{"methods":[{"sl":30}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":31}]},"test_447":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_47":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_470":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_471":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_473":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_475":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_479":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_481":{"methods":[{"sl":30}],"name":"Verify that SequenceOfLAGroup is initialized properly","pass":true,"statements":[{"sl":31}]},"test_485":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type hours and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_509":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_521":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_549":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_55":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 0 to 0000 and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_550":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_57":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_577":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_58":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_585":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_590":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_593":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_596":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 61440 to efff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_600":{"methods":[{"sl":30}],"name":"Verify constructors","pass":true,"statements":[{"sl":31}]},"test_61":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_610":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_613":{"methods":[{"sl":30}],"name":"Verify that SequenceOfRegionAndSubregions is initialized properly","pass":true,"statements":[{"sl":31}]},"test_614":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_615":{"methods":[{"sl":30}],"name":"Verify that SequenceOfGroupCrlEntry is initialized properly","pass":true,"statements":[{"sl":31}]},"test_620":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_629":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_633":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":31}]},"test_639":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_645":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_647":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type years and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_653":{"methods":[{"sl":30}],"name":"Verify ElevInt toString","pass":true,"statements":[{"sl":31}]},"test_656":{"methods":[{"sl":30}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":31}]},"test_66":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_660":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_667":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_673":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_674":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_68":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_687":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_695":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Uint16 has min value 0 and 65535","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_698":{"methods":[{"sl":30}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":31}]},"test_706":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_711":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_719":{"methods":[{"sl":30}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":31}]},"test_726":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes 1000 to 03e8 and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_729":{"methods":[{"sl":30}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31}]},"test_732":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_740":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_744":{"methods":[{"sl":30}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":31}]},"test_747":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_749":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_753":{"methods":[{"sl":30}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31}]},"test_771":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type minutes and value 10","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_778":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_790":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_80":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_806":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_81":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_815":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_820":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_822":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_825":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_836":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_840":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_841":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_85":{"methods":[{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":38}]},"test_850":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_851":{"methods":[{"sl":30}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":31}]},"test_86":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_87":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":31}]},"test_870":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_871":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_876":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_877":{"methods":[{"sl":30}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":31}]},"test_880":{"methods":[{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":38}]},"test_882":{"methods":[{"sl":30}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":31}]},"test_894":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_901":{"methods":[{"sl":30}],"name":"Verify that ElevInt encodes -1 to ffff and decodes back correctly","pass":true,"statements":[{"sl":31}]},"test_902":{"methods":[{"sl":37}],"name":"Verify IValue toString","pass":true,"statements":[{"sl":38}]},"test_911":{"methods":[{"sl":30}],"name":"Verify that SequenceOfJMaxGroup is initialized properly","pass":true,"statements":[{"sl":31}]},"test_924":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Duration is correctly encoded for type microseconds and value 0","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_945":{"methods":[{"sl":30},{"sl":37}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_949":{"methods":[{"sl":30}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":31}]},"test_96":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_962":{"methods":[{"sl":30}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31}]},"test_963":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if both individual and groups are null","pass":true,"statements":[{"sl":31}]},"test_966":{"methods":[{"sl":30}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":31}]},"test_970":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_979":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_981":{"methods":[{"sl":30}],"name":"Verify toString","pass":true,"statements":[{"sl":31}]},"test_983":{"methods":[{"sl":37}],"name":"Verify CrlSeries toString","pass":true,"statements":[{"sl":38}]},"test_991":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_992":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [732, 270, 815, 673, 87, 123, 148, 653, 970, 447, 299, 120, 16, 238, 963, 820, 3, 212, 445, 901, 307, 80, 991, 330, 421, 479, 58, 163, 674, 744, 590, 256, 806, 981, 550, 945, 167, 840, 250, 19, 596, 222, 146, 577, 225, 629, 475, 778, 870, 876, 286, 470, 325, 711, 882, 143, 425, 55, 962, 35, 825, 233, 321, 509, 276, 613, 41, 316, 61, 647, 585, 401, 154, 0, 992, 40, 871, 706, 367, 364, 749, 343, 96, 836, 620, 822, 144, 424, 36, 610, 66, 614, 949, 656, 288, 372, 695, 44, 471, 600, 284, 687, 549, 309, 979, 924, 521, 593, 323, 850, 412, 911, 753, 168, 335, 47, 298, 86, 660, 81, 473, 1, 841, 428, 485, 877, 740, 615, 290, 232, 17, 310, 110, 481, 128, 182, 257, 726, 177, 26, 57, 265, 729, 639, 327, 207, 771, 201, 433, 633, 332, 386, 68, 851, 667, 747, 140, 966, 645, 12, 698, 377, 304, 719, 1009, 790, 894], [732, 270, 815, 673, 87, 123, 148, 653, 970, 447, 299, 120, 16, 238, 963, 820, 3, 212, 445, 901, 307, 80, 991, 330, 421, 479, 58, 163, 674, 744, 590, 256, 806, 981, 550, 945, 167, 840, 250, 19, 596, 222, 146, 577, 225, 629, 475, 778, 870, 876, 286, 470, 325, 711, 882, 143, 425, 55, 962, 35, 825, 233, 321, 509, 276, 613, 41, 316, 61, 647, 585, 401, 154, 0, 992, 40, 871, 706, 367, 364, 749, 343, 96, 836, 620, 822, 144, 424, 36, 610, 66, 614, 949, 656, 288, 372, 695, 44, 471, 600, 284, 687, 549, 309, 979, 924, 521, 593, 323, 850, 412, 911, 753, 168, 335, 47, 298, 86, 660, 81, 473, 1, 841, 428, 485, 877, 740, 615, 290, 232, 17, 310, 110, 481, 128, 182, 257, 726, 177, 26, 57, 265, 729, 639, 327, 207, 771, 201, 433, 633, 332, 386, 68, 851, 667, 747, 140, 966, 645, 12, 698, 377, 304, 719, 1009, 790, 894], [], [], [], [], [], [815, 673, 123, 148, 447, 120, 16, 212, 307, 991, 479, 58, 674, 256, 806, 945, 167, 146, 577, 225, 629, 475, 902, 778, 876, 470, 325, 711, 425, 880, 825, 321, 276, 41, 61, 647, 585, 154, 0, 151, 992, 40, 871, 367, 364, 749, 343, 96, 836, 424, 66, 614, 695, 44, 687, 549, 309, 979, 924, 323, 850, 412, 168, 47, 85, 86, 660, 473, 1, 841, 428, 983, 485, 290, 128, 257, 177, 57, 771, 201, 433, 386, 747, 140, 645, 376, 894], [815, 673, 123, 148, 447, 120, 16, 212, 307, 991, 479, 58, 674, 256, 806, 945, 167, 146, 577, 225, 629, 475, 902, 778, 876, 470, 325, 711, 425, 880, 825, 321, 276, 41, 61, 647, 585, 154, 0, 151, 992, 40, 871, 367, 364, 749, 343, 96, 836, 424, 66, 614, 695, 44, 687, 549, 309, 979, 924, 323, 850, 412, 168, 47, 85, 86, 660, 473, 1, 841, 428, 983, 485, 290, 128, 257, 177, 57, 771, 201, 433, 386, 747, 140, 645, 376, 894], [], [], [], [151], [], [151], [], []]
