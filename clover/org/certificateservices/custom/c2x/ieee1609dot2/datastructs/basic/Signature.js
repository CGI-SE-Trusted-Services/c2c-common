var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":84,"id":3068,"methods":[{"el":62,"sc":2,"sl":60},{"el":70,"sc":2,"sl":68},{"el":77,"sc":2,"sl":75},{"el":82,"sc":2,"sl":79}],"name":"Signature","sl":31},{"el":55,"id":3068,"methods":[{"el":43,"sc":3,"sl":40},{"el":54,"sc":3,"sl":45}],"name":"Signature.SignatureChoices","sl":36}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_128":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_136":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_16":{"methods":[{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":69}]},"test_163":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_172":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_185":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_226":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_239":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_248":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_249":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_257":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":69}]},"test_261":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_278":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_312":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_324":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_326":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_35":{"methods":[{"sl":40},{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42},{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_354":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_360":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_381":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_385":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69},{"sl":76}]},"test_406":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_413":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_417":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_437":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_455":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_465":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_482":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_485":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69}]},"test_498":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_499":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_523":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_532":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_54":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":69}]},"test_542":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_547":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69}]},"test_55":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":69}]},"test_563":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_567":{"methods":[{"sl":60},{"sl":68}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_569":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_587":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_608":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69}]},"test_609":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_616":{"methods":[{"sl":40},{"sl":68},{"sl":79}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":42},{"sl":69},{"sl":81}]},"test_62":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_625":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_650":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_665":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_670":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_685":{"methods":[{"sl":68}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":69}]},"test_686":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_689":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_693":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_699":{"methods":[{"sl":40},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Signature is correctly encoded for type ecdsaNistP256Signature","pass":true,"statements":[{"sl":42},{"sl":61},{"sl":69},{"sl":76}]},"test_708":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_729":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_735":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_74":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_746":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_749":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_75":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69},{"sl":76}]},"test_756":{"methods":[{"sl":79}],"name":"Verify toString()","pass":true,"statements":[{"sl":81}]},"test_769":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_774":{"methods":[{"sl":40},{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42},{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69},{"sl":76}]},"test_781":{"methods":[{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":61},{"sl":81}]},"test_79":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_818":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_829":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_901":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_939":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":69}]},"test_942":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_946":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_947":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_950":{"methods":[{"sl":40},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Signature is correctly encoded for type ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":42},{"sl":61},{"sl":69},{"sl":76}]},"test_955":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_960":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_974":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":42},{"sl":69}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 699, 942, 249, 950, 417, 818, 670, 136, 974, 437, 774, 616, 955], [], [35, 699, 942, 249, 950, 417, 818, 670, 136, 974, 437, 774, 616, 955], [], [], [35, 547, 385, 406, 75, 482, 686, 774, 608, 485], [], [35, 547, 385, 406, 75, 482, 686, 774, 608, 485], [35, 547, 406, 482, 686, 485], [35, 547, 406, 482, 686, 485], [385, 75, 774, 608], [], [385, 75, 774, 608], [], [], [], [], [], [], [], [261, 35, 625, 901, 547, 587, 665, 239, 699, 735, 385, 532, 79, 324, 312, 406, 75, 360, 769, 74, 950, 960, 128, 226, 499, 465, 482, 946, 686, 354, 455, 729, 781, 567, 569, 829, 523, 689, 248, 413, 774, 749, 278, 163, 608, 693, 62, 650, 0, 498, 609, 485], [261, 35, 625, 901, 547, 587, 665, 239, 699, 735, 385, 532, 79, 324, 312, 406, 75, 360, 769, 74, 950, 960, 128, 226, 499, 465, 482, 946, 686, 354, 455, 729, 781, 567, 569, 829, 523, 689, 248, 413, 774, 749, 278, 163, 608, 693, 62, 650, 0, 498, 609, 485], [], [], [], [], [], [], [16, 261, 35, 625, 901, 547, 587, 665, 55, 239, 699, 735, 385, 942, 532, 79, 249, 324, 947, 312, 406, 185, 75, 360, 939, 769, 74, 950, 960, 417, 128, 226, 499, 465, 482, 818, 946, 686, 354, 670, 136, 455, 974, 729, 567, 746, 569, 829, 437, 523, 685, 689, 248, 413, 774, 749, 257, 278, 163, 54, 608, 172, 693, 62, 650, 616, 0, 498, 609, 485, 955], [16, 261, 35, 625, 901, 547, 587, 665, 55, 239, 699, 735, 385, 942, 532, 79, 249, 324, 947, 312, 406, 185, 75, 360, 939, 769, 74, 950, 960, 417, 128, 226, 499, 465, 482, 818, 946, 686, 354, 670, 136, 455, 974, 729, 567, 746, 569, 829, 437, 523, 685, 689, 248, 413, 774, 749, 257, 278, 163, 54, 608, 172, 693, 62, 650, 616, 0, 498, 609, 485, 955], [], [], [], [], [], [35, 901, 587, 699, 385, 406, 75, 769, 950, 960, 482, 686, 354, 455, 729, 689, 774, 0, 609], [35, 901, 587, 699, 385, 406, 75, 769, 950, 960, 482, 686, 354, 455, 729, 689, 774, 0, 609], [], [], [756, 947, 185, 381, 708, 326, 781, 746, 542, 563, 172, 616], [], [756, 947, 185, 381, 708, 326, 781, 746, 542, 563, 172, 616], [], [], []]
