var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":84,"id":3183,"methods":[{"el":62,"sc":2,"sl":60},{"el":70,"sc":2,"sl":68},{"el":77,"sc":2,"sl":75},{"el":82,"sc":2,"sl":79}],"name":"Signature","sl":31},{"el":55,"id":3183,"methods":[{"el":43,"sc":3,"sl":40},{"el":54,"sc":3,"sl":45}],"name":"Signature.SignatureChoices","sl":36}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_1":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_120":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_123":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_128":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69}]},"test_144":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that Ieee1609dot2Peer2PeerPDUContent is correctly encoded for type caCerts","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_146":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_16":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_164":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_167":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_168":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_182":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_238":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for implicit certificate","pass":true,"statements":[{"sl":69}]},"test_250":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded for explicit certificates","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_257":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_290":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_298":{"methods":[{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded for implicit certificates","pass":true,"statements":[{"sl":69}]},"test_307":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_309":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_321":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_325":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69},{"sl":76}]},"test_332":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_364":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69}]},"test_367":{"methods":[{"sl":40},{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":42},{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_377":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":69}]},"test_40":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_412":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_421":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that SignerIdentifier is correctly encoded for type certificate","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_433":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_44":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_445":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_447":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69},{"sl":76}]},"test_461":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_470":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_471":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_473":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_479":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_549":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69}]},"test_57":{"methods":[{"sl":40},{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":42},{"sl":47},{"sl":50},{"sl":52},{"sl":61},{"sl":69},{"sl":76}]},"test_577":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_58":{"methods":[{"sl":45},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69},{"sl":76}]},"test_585":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69}]},"test_590":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":69}]},"test_61":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_614":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_656":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_66":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69}]},"test_660":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_674":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_687":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_698":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that SequenceOfCertificate is initialized properly","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_711":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_719":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that CaCertP2pPDU is initialized properly","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_725":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_740":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_744":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_778":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_806":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_81":{"methods":[{"sl":40},{"sl":68}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":42},{"sl":69}]},"test_815":{"methods":[{"sl":45},{"sl":60},{"sl":68}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":49},{"sl":61},{"sl":69}]},"test_825":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_826":{"methods":[{"sl":40},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Signature is correctly encoded for type ecdsaNistP256Signature","pass":true,"statements":[{"sl":42},{"sl":61},{"sl":69},{"sl":76}]},"test_836":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_850":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_856":{"methods":[{"sl":79}],"name":"Verify toString()","pass":true,"statements":[{"sl":81}]},"test_869":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_870":{"methods":[{"sl":68},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":81}]},"test_871":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]},"test_876":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_877":{"methods":[{"sl":68}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":69}]},"test_882":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_894":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_938":{"methods":[{"sl":60},{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":61},{"sl":81}]},"test_945":{"methods":[{"sl":60},{"sl":68}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_949":{"methods":[{"sl":40},{"sl":68},{"sl":79}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":42},{"sl":69},{"sl":81}]},"test_953":{"methods":[{"sl":79}],"name":"Verify toString","pass":true,"statements":[{"sl":81}]},"test_96":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_966":{"methods":[{"sl":68}],"name":"Verify that IllegalArgumentException is thrown if none of required premissions doesn't exists for explicit certificate","pass":true,"statements":[{"sl":69}]},"test_979":{"methods":[{"sl":60},{"sl":68}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":61},{"sl":69}]},"test_985":{"methods":[{"sl":40},{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Signature is correctly encoded for type ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":42},{"sl":61},{"sl":69},{"sl":76}]},"test_991":{"methods":[{"sl":60},{"sl":68},{"sl":75}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":61},{"sl":69},{"sl":76}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [445, 421, 744, 81, 250, 826, 57, 985, 367, 144, 698, 719, 949, 656], [], [445, 421, 744, 81, 250, 826, 57, 985, 367, 144, 698, 719, 949, 656], [], [], [815, 549, 447, 412, 58, 325, 128, 57, 585, 40, 367, 364, 66], [], [815, 549, 447, 412, 58, 325, 128, 57, 585, 40, 367, 364, 66], [815, 412, 58, 128, 585, 40, 367, 66], [815, 412, 58, 128, 585, 40, 367, 66], [549, 447, 325, 57, 364], [], [549, 447, 325, 57, 364], [], [], [], [], [], [], [], [815, 687, 549, 309, 979, 123, 447, 120, 16, 850, 412, 307, 991, 479, 58, 168, 674, 806, 945, 167, 660, 473, 1, 146, 577, 826, 778, 290, 876, 470, 325, 711, 882, 938, 128, 825, 321, 182, 257, 61, 57, 585, 985, 0, 433, 40, 871, 367, 364, 96, 836, 66, 614, 894, 44], [815, 687, 549, 309, 979, 123, 447, 120, 16, 850, 412, 307, 991, 479, 58, 168, 674, 806, 945, 167, 660, 473, 1, 146, 577, 826, 778, 290, 876, 470, 325, 711, 882, 938, 128, 825, 321, 182, 257, 61, 57, 585, 985, 0, 433, 40, 871, 367, 364, 96, 836, 66, 614, 894, 44], [], [], [], [], [], [], [815, 687, 549, 309, 979, 123, 447, 120, 16, 238, 445, 850, 412, 307, 991, 421, 479, 58, 168, 674, 744, 590, 806, 945, 167, 298, 660, 81, 250, 473, 1, 146, 577, 877, 826, 740, 778, 870, 290, 876, 470, 325, 711, 882, 128, 825, 321, 182, 257, 61, 57, 585, 985, 0, 433, 40, 871, 367, 332, 364, 96, 836, 144, 966, 698, 377, 66, 614, 719, 949, 656, 894, 44, 471], [815, 687, 549, 309, 979, 123, 447, 120, 16, 238, 445, 850, 412, 307, 991, 421, 479, 58, 168, 674, 744, 590, 806, 945, 167, 298, 660, 81, 250, 473, 1, 146, 577, 877, 826, 740, 778, 870, 290, 876, 470, 325, 711, 882, 128, 825, 321, 182, 257, 61, 57, 585, 985, 0, 433, 40, 871, 367, 332, 364, 96, 836, 144, 966, 698, 377, 66, 614, 719, 949, 656, 894, 44, 471], [], [], [], [], [], [309, 447, 850, 412, 991, 58, 674, 806, 660, 826, 290, 325, 57, 985, 40, 871, 367, 614, 44], [309, 447, 850, 412, 991, 58, 674, 806, 660, 826, 290, 325, 57, 985, 40, 871, 367, 614, 44], [], [], [740, 870, 938, 869, 332, 856, 164, 953, 725, 949, 461, 471], [], [740, 870, 938, 869, 332, 856, 164, 953, 725, 949, 461, 471], [], [], []]
