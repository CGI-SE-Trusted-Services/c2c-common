var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":94,"id":2418,"methods":[{"el":42,"sc":2,"sl":40},{"el":67,"sc":2,"sl":48},{"el":75,"sc":2,"sl":73},{"el":88,"sc":2,"sl":81},{"el":93,"sc":2,"sl":90}],"name":"ElevInt","sl":33}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_143":{"methods":[{"sl":40}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41}]},"test_19":{"methods":[{"sl":40},{"sl":73},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_249":{"methods":[{"sl":40}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":41}]},"test_257":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown if both data and exthash is null","pass":true,"statements":[{"sl":41}]},"test_259":{"methods":[{"sl":40}],"name":"Verify that encode and decode to byte array is correct","pass":true,"statements":[{"sl":41}]},"test_336":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that ElevInt encodes 0 to 0000 and decodes back correctly","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":59},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_35":{"methods":[{"sl":40}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41}]},"test_356":{"methods":[{"sl":48},{"sl":73},{"sl":81},{"sl":90}],"name":"Verify ElevInt toString","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":59},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84},{"sl":92}]},"test_369":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that ElevInt encodes -5000 to f001 and decodes back correctly","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":53},{"sl":54},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":87}]},"test_375":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":41}]},"test_385":{"methods":[{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41}]},"test_406":{"methods":[{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41}]},"test_413":{"methods":[{"sl":40}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":41}]},"test_447":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all fields are set","pass":true,"statements":[{"sl":41}]},"test_470":{"methods":[{"sl":40}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41}]},"test_482":{"methods":[{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41}]},"test_485":{"methods":[{"sl":40}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":41}]},"test_547":{"methods":[{"sl":40}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":41}]},"test_550":{"methods":[{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":41}]},"test_599":{"methods":[{"sl":48},{"sl":73},{"sl":81}],"name":"Verify Elevation toString","pass":true,"statements":[{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":59},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_606":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that ElevInt encodes 61439 to efff and decodes back correctly","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":51},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_608":{"methods":[{"sl":40}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41}]},"test_616":{"methods":[{"sl":40}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":41}]},"test_627":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that genHeaderInfo generates correct header info","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":59},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_658":{"methods":[{"sl":40}],"name":"Verify that IllegalArgumentException is thrown when encoding if not all required fields are set","pass":true,"statements":[{"sl":41}]},"test_662":{"methods":[{"sl":40}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41}]},"test_684":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify constructors","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":57},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":87}]},"test_686":{"methods":[{"sl":40}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":41}]},"test_693":{"methods":[{"sl":40}],"name":"Verify that fullfillsRequirements verifies all required fields","pass":true,"statements":[{"sl":41}]},"test_712":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that ElevInt encodes -1 to ffff and decodes back correctly","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":57},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":87}]},"test_723":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that ElevInt encodes 61440 to efff and decodes back correctly","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":51},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_740":{"methods":[{"sl":40},{"sl":73},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_746":{"methods":[{"sl":40}],"name":"Verify toString","pass":true,"statements":[{"sl":41}]},"test_75":{"methods":[{"sl":40}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41}]},"test_774":{"methods":[{"sl":40}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":41}]},"test_812":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that ElevInt encodes 99999 to efff and decodes back correctly","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":51},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_878":{"methods":[{"sl":40},{"sl":48},{"sl":73},{"sl":81}],"name":"Verify that ElevInt encodes 1000 to 03e8 and decodes back correctly","pass":true,"statements":[{"sl":41},{"sl":49},{"sl":50},{"sl":53},{"sl":56},{"sl":59},{"sl":64},{"sl":74},{"sl":82},{"sl":83},{"sl":84}]},"test_942":{"methods":[{"sl":40}],"name":"Verify that constructor contains Ieee1609Dot2Data  if content  fullfill requirements","pass":true,"statements":[{"sl":41}]},"test_955":{"methods":[{"sl":40}],"name":"Verify that  Ieee1609Dot2Content is correctly encoded for type signedData","pass":true,"statements":[{"sl":41}]},"test_974":{"methods":[{"sl":40}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":41}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [35, 447, 686, 658, 740, 336, 375, 627, 547, 723, 19, 974, 550, 684, 746, 143, 385, 942, 662, 249, 369, 413, 470, 406, 75, 774, 812, 257, 878, 712, 608, 693, 616, 259, 606, 485, 955, 482], [35, 447, 686, 658, 740, 336, 375, 627, 547, 723, 19, 974, 550, 684, 746, 143, 385, 942, 662, 249, 369, 413, 470, 406, 75, 774, 812, 257, 878, 712, 608, 693, 616, 259, 606, 485, 955, 482], [], [], [], [], [], [], [356, 336, 627, 723, 684, 369, 812, 878, 712, 599, 606], [356, 336, 627, 723, 684, 369, 812, 878, 712, 599, 606], [356, 336, 627, 723, 684, 369, 812, 878, 712, 599, 606], [723, 812, 606], [], [356, 336, 627, 684, 369, 878, 712, 599], [369], [], [356, 336, 627, 684, 878, 712, 599], [684, 712], [], [356, 336, 627, 878, 599], [], [], [], [], [356, 336, 627, 723, 684, 369, 812, 878, 712, 599, 606], [], [], [], [], [], [], [], [], [356, 740, 336, 627, 723, 19, 684, 369, 812, 878, 712, 599, 606], [356, 740, 336, 627, 723, 19, 684, 369, 812, 878, 712, 599, 606], [], [], [], [], [], [], [356, 740, 336, 627, 723, 19, 684, 369, 812, 878, 712, 599, 606], [356, 740, 336, 627, 723, 19, 684, 369, 812, 878, 712, 599, 606], [356, 740, 336, 627, 723, 19, 684, 369, 812, 878, 712, 599, 606], [356, 740, 336, 627, 723, 19, 812, 878, 599, 606], [], [], [684, 369, 712], [], [], [356], [], [356], [], []]
