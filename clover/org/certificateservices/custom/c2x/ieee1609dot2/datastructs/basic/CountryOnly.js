var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":45,"id":2393,"methods":[{"el":32,"sc":2,"sl":30},{"el":39,"sc":2,"sl":37},{"el":44,"sc":2,"sl":41}],"name":"CountryOnly","sl":23}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_1":{"methods":[{"sl":37}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":38}]},"test_120":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_123":{"methods":[{"sl":37}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":38}]},"test_128":{"methods":[{"sl":37}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaNistP256Signature","pass":true,"statements":[{"sl":38}]},"test_146":{"methods":[{"sl":37}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":38}]},"test_16":{"methods":[{"sl":37}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":38}]},"test_167":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_168":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_225":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_256":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_257":{"methods":[{"sl":37}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":38}]},"test_290":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_307":{"methods":[{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":38}]},"test_309":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_321":{"methods":[{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_325":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_332":{"methods":[{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":43}]},"test_364":{"methods":[{"sl":37}],"name":"Verify that getType and getPublicKey works for both implicit and explicit certificates for alg ecdsaBrainpoolP256r1Signature","pass":true,"statements":[{"sl":38}]},"test_367":{"methods":[{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_376":{"methods":[{"sl":37},{"sl":41}],"name":"Verify CountryOnly toString","pass":true,"statements":[{"sl":38},{"sl":43}]},"test_40":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_412":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_433":{"methods":[{"sl":37}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":38}]},"test_44":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_447":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_47":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_470":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_473":{"methods":[{"sl":37}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":38}]},"test_479":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_549":{"methods":[{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_555":{"methods":[{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":43}]},"test_57":{"methods":[{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_577":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_58":{"methods":[{"sl":37}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":38}]},"test_585":{"methods":[{"sl":37}],"name":"Verify that getPublicKey throws IllegalArgumentException if invalid parameters was given","pass":true,"statements":[{"sl":38}]},"test_61":{"methods":[{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":38}]},"test_614":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_66":{"methods":[{"sl":37}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":38}]},"test_660":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_674":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_687":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_711":{"methods":[{"sl":37}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":38}]},"test_747":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_749":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_778":{"methods":[{"sl":37}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":38}]},"test_806":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_815":{"methods":[{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_822":{"methods":[{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":43}]},"test_825":{"methods":[{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_836":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_850":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_86":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_871":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_876":{"methods":[{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_877":{"methods":[{"sl":41}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":43}]},"test_880":{"methods":[{"sl":37},{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":38},{"sl":43}]},"test_894":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_945":{"methods":[{"sl":37}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":38}]},"test_949":{"methods":[{"sl":30},{"sl":41}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":31},{"sl":43}]},"test_96":{"methods":[{"sl":37}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":38}]},"test_979":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_991":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_992":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [256, 225, 992, 749, 949, 47, 86, 747], [256, 225, 992, 749, 949, 47, 86, 747], [], [], [], [], [], [815, 123, 447, 120, 16, 307, 991, 479, 58, 674, 256, 806, 945, 167, 146, 577, 225, 778, 876, 470, 325, 711, 880, 825, 321, 61, 585, 0, 992, 40, 871, 367, 364, 749, 96, 836, 66, 614, 44, 687, 549, 309, 979, 850, 412, 168, 47, 86, 660, 473, 1, 290, 128, 257, 57, 433, 747, 376, 894], [815, 123, 447, 120, 16, 307, 991, 479, 58, 674, 256, 806, 945, 167, 146, 577, 225, 778, 876, 470, 325, 711, 880, 825, 321, 61, 585, 0, 992, 40, 871, 367, 364, 749, 96, 836, 66, 614, 44, 687, 549, 309, 979, 850, 412, 168, 47, 86, 660, 473, 1, 290, 128, 257, 57, 433, 747, 376, 894], [], [], [555, 880, 822, 949, 877, 332, 376], [], [555, 880, 822, 949, 877, 332, 376], [], []]
