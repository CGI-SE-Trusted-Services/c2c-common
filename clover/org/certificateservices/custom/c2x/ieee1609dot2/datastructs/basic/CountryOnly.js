var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":45,"id":2278,"methods":[{"el":32,"sc":2,"sl":30},{"el":39,"sc":2,"sl":37},{"el":44,"sc":2,"sl":41}],"name":"CountryOnly","sl":23}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_128":{"methods":[{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type SIGNER_CERTIFICATE","pass":true,"statements":[{"sl":38}]},"test_163":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_172":{"methods":[{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":43}]},"test_202":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_226":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_239":{"methods":[{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_246":{"methods":[{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":43}]},"test_248":{"methods":[{"sl":37}],"name":"Verify that getSignedDataStore returns a populate map of all certificate if SignerIdentifier is certificate","pass":true,"statements":[{"sl":38}]},"test_261":{"methods":[{"sl":37}],"name":"Verify that return first certificates public key of complete chain consists of explicit certificates","pass":true,"statements":[{"sl":38}]},"test_278":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_280":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_312":{"methods":[{"sl":37}],"name":"Verify that findFromStores finds certificate from stores","pass":true,"statements":[{"sl":38}]},"test_324":{"methods":[{"sl":37}],"name":"Verify that getSignerId returns the included HashedId8 if type is digest","pass":true,"statements":[{"sl":38}]},"test_340":{"methods":[{"sl":30},{"sl":37}],"name":"Verify constructors","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_35":{"methods":[{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_354":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_360":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_385":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_393":{"methods":[{"sl":37},{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":38},{"sl":43}]},"test_404":{"methods":[{"sl":30},{"sl":37}],"name":"Verify toString","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_406":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with signed data is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_429":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_455":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_465":{"methods":[{"sl":37}],"name":"Verify that getSignerIdentifier returns first signing certificate from a chain for type CERT_CHAIN","pass":true,"statements":[{"sl":38}]},"test_482":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_485":{"methods":[{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_498":{"methods":[{"sl":37}],"name":"Verify that return first certificates public key of enroll cert only consists of implicit certificates","pass":true,"statements":[{"sl":38}]},"test_499":{"methods":[{"sl":37}],"name":"Verify that return first certificates public key of enroll cert and enroll ca consists of implicit certificates","pass":true,"statements":[{"sl":38}]},"test_523":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_532":{"methods":[{"sl":37}],"name":"Verify that getSignedDataStore returns an empty map if SignerIdentifier is digest","pass":true,"statements":[{"sl":38}]},"test_547":{"methods":[{"sl":37}],"name":"Verify that buildRecieverStore generates a correct HashedId8 to Receiver Map","pass":true,"statements":[{"sl":38}]},"test_567":{"methods":[{"sl":37}],"name":"Verify getCertID generates a correct HashedId8","pass":true,"statements":[{"sl":38}]},"test_569":{"methods":[{"sl":37}],"name":"Verify that encryption works with certificate public encryption key for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_587":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_608":{"methods":[{"sl":37}],"name":"Verify that encryption works with secured data public encryption key for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_609":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_616":{"methods":[{"sl":30},{"sl":41}],"name":"Verify that reference structure from D.5.2.2 of P1909.2_D12 is parsed and regenerated correctly","pass":true,"statements":[{"sl":31},{"sl":43}]},"test_62":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_625":{"methods":[{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_650":{"methods":[{"sl":37}],"name":"Verify that buildCertStore() generates certificate store maps correctly and buildChain generates correct certificate chain","pass":true,"statements":[{"sl":38}]},"test_665":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_685":{"methods":[{"sl":41}],"name":"Verify that it is possible to parse the reference implicit certificate","pass":true,"statements":[{"sl":43}]},"test_686":{"methods":[{"sl":37}],"name":"Verify that signed SecuredCrl with signed data is generated correctly","pass":true,"statements":[{"sl":38}]},"test_689":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Root CA is generated correctly for explicit certificate (only type supported) for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_729":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Long term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_73":{"methods":[{"sl":41}],"name":"Verify toString","pass":true,"statements":[{"sl":43}]},"test_735":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly for implicit CA certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_74":{"methods":[{"sl":37}],"name":"Verify that getSignedDataStore returns the HashedId8 of the first certificate if type is certificate","pass":true,"statements":[{"sl":38}]},"test_747":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that constructor and getters are correct and it is correctly encoded","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_749":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_75":{"methods":[{"sl":37}],"name":"Verify that signed Ieee1609Dot2Data with hashed reference is generated correctly for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_769":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_77":{"methods":[{"sl":30},{"sl":37}],"name":"Verify that all fields must be set or IllegalArgumentException is thrown when encoding","pass":true,"statements":[{"sl":31},{"sl":38}]},"test_774":{"methods":[{"sl":37}],"name":"Verify that signAndEncryptData and decryptAndVerifySignedData generates encrypted and signed data structures for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_79":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Enrollment Cert is generated correctly of implicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_829":{"methods":[{"sl":37}],"name":"Verify that getSignerIdentifier returns correct hash value for type HASH_ONLY","pass":true,"statements":[{"sl":38}]},"test_856":{"methods":[{"sl":37},{"sl":41}],"name":"Verify CountryOnly toString","pass":true,"statements":[{"sl":38},{"sl":43}]},"test_901":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Short term CA is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]},"test_946":{"methods":[{"sl":37}],"name":"Verify that encryption works with RekReceipient for alg: ecdsaNistP256","pass":true,"statements":[{"sl":38}]},"test_960":{"methods":[{"sl":37}],"name":"Verify that Ieee1609Dot2 Authorization Cert is generated correctly of explicit certificate for alg: ecdsaBrainpoolP256r1","pass":true,"statements":[{"sl":38}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [280, 747, 77, 340, 616, 202, 429, 404], [280, 747, 77, 340, 616, 202, 429, 404], [], [], [], [], [], [625, 547, 587, 665, 239, 280, 406, 769, 74, 960, 128, 226, 465, 482, 686, 354, 455, 747, 523, 689, 774, 749, 77, 163, 340, 62, 650, 498, 485, 261, 35, 901, 735, 202, 385, 532, 79, 324, 429, 312, 393, 856, 75, 360, 499, 946, 729, 567, 404, 569, 829, 248, 278, 608, 0, 609], [625, 547, 587, 665, 239, 280, 406, 769, 74, 960, 128, 226, 465, 482, 686, 354, 455, 747, 523, 689, 774, 749, 77, 163, 340, 62, 650, 498, 485, 261, 35, 901, 735, 202, 385, 532, 79, 324, 429, 312, 393, 856, 75, 360, 499, 946, 729, 567, 404, 569, 829, 248, 278, 608, 0, 609], [], [], [246, 685, 616, 393, 856, 73, 172], [], [246, 685, 616, 393, 856, 73, 172], [], []]
