var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":60,"id":5702,"methods":[{"el":42,"sc":2,"sl":40},{"el":46,"sc":2,"sl":44},{"el":58,"sc":2,"sl":51}],"name":"EccPointType","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_103":{"methods":[{"sl":44}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":45}]},"test_105":{"methods":[{"sl":44},{"sl":51}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_117":{"methods":[{"sl":51}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_159":{"methods":[{"sl":44}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_161":{"methods":[{"sl":51}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_18":{"methods":[{"sl":44}],"name":"Verify serialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":45}]},"test_208":{"methods":[{"sl":44}],"name":"Verify that x_coordinate_only has bytevalue 0","pass":true,"statements":[{"sl":45}]},"test_253":{"methods":[{"sl":44}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_263":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_28":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_285":{"methods":[{"sl":51}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_292":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_3":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_311":{"methods":[{"sl":51}],"name":"Verify deserialization of EccPoint","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_315":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_339":{"methods":[{"sl":51}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_345":{"methods":[{"sl":44}],"name":"Verify serialization of EcdsaSignature","pass":true,"statements":[{"sl":45}]},"test_353":{"methods":[{"sl":44},{"sl":51}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_359":{"methods":[{"sl":44},{"sl":51}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_379":{"methods":[{"sl":44}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_425":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_450":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_457":{"methods":[{"sl":51}],"name":"Verify deserialization of EcdsaSignature","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_469":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns uncompressed for 4","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_47":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns compressed_lsb_y_1 for 3","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_479":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_501":{"methods":[{"sl":44}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":45}]},"test_530":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_545":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that eCEISEncryptSymmetricKey and eCEISDecryptSymmetricKey encrypts and decrypts symmetric key correcly.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_574":{"methods":[{"sl":44}],"name":"Verify that compressed_lsb_y_0 has bytevalue 2","pass":true,"statements":[{"sl":45}]},"test_575":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_581":{"methods":[{"sl":51}],"name":"Verify deserialization of PublicKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_585":{"methods":[{"sl":44}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":45}]},"test_597":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_622":{"methods":[{"sl":51}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_66":{"methods":[{"sl":44}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_669":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_679":{"methods":[{"sl":44}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":45}]},"test_682":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_694":{"methods":[{"sl":51}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_709":{"methods":[{"sl":44}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_719":{"methods":[{"sl":44}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":45}]},"test_808":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_816":{"methods":[{"sl":44}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":45}]},"test_831":{"methods":[{"sl":44}],"name":"Verify that uncompressed has bytevalue 4","pass":true,"statements":[{"sl":45}]},"test_84":{"methods":[{"sl":44}],"name":"Verify that compressed_lsb_y_1 has bytevalue 3","pass":true,"statements":[{"sl":45}]},"test_846":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_857":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_863":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_868":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_871":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns x_coordinate_only for 0","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_880":{"methods":[{"sl":51}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_900":{"methods":[{"sl":44}],"name":"Verify serialization of EccPoint","pass":true,"statements":[{"sl":45}]},"test_913":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_915":{"methods":[{"sl":44}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_949":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_95":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_952":{"methods":[{"sl":44}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":45}]},"test_959":{"methods":[{"sl":44}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_965":{"methods":[{"sl":44},{"sl":51}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_973":{"methods":[{"sl":44}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":45}]},"test_975":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns compressed_lsb_y_0 for 2","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_99":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [868, 425, 575, 545, 208, 900, 99, 450, 84, 808, 857, 719, 292, 345, 585, 952, 3, 253, 816, 501, 353, 915, 66, 863, 831, 379, 105, 973, 669, 574, 709, 846, 682, 479, 18, 530, 28, 159, 965, 359, 315, 679, 959, 103], [868, 425, 575, 545, 208, 900, 99, 450, 84, 808, 857, 719, 292, 345, 585, 952, 3, 253, 816, 501, 353, 915, 66, 863, 831, 379, 105, 973, 669, 574, 709, 846, 682, 479, 18, 530, 28, 159, 965, 359, 315, 679, 959, 103], [], [], [], [], [], [457, 575, 545, 581, 292, 469, 117, 913, 622, 949, 694, 353, 597, 863, 285, 105, 975, 880, 871, 846, 95, 161, 47, 339, 28, 965, 359, 311, 263], [457, 575, 545, 581, 292, 469, 117, 913, 622, 949, 694, 353, 597, 863, 285, 105, 975, 880, 871, 846, 95, 161, 47, 339, 28, 965, 359, 311, 263], [457, 575, 545, 581, 292, 469, 117, 913, 622, 949, 694, 353, 597, 863, 285, 105, 975, 880, 871, 846, 95, 161, 47, 339, 28, 965, 359, 311, 263], [457, 575, 545, 581, 292, 469, 117, 913, 622, 949, 694, 353, 597, 863, 285, 105, 975, 880, 871, 846, 95, 161, 47, 339, 28, 965, 359, 311, 263], [], [], [], [], [], []]
