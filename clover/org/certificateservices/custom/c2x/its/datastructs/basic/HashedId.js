var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":100,"id":1072,"methods":[{"el":45,"sc":2,"sl":38},{"el":52,"sc":2,"sl":51},{"el":59,"sc":2,"sl":57},{"el":64,"sc":2,"sl":61},{"el":70,"sc":2,"sl":66},{"el":83,"sc":2,"sl":77},{"el":97,"sc":2,"sl":85}],"name":"HashedId","sl":29}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_104":{"methods":[{"sl":51},{"sl":57},{"sl":66}],"name":"Verify deserialization of a hash value","pass":true,"statements":[{"sl":58},{"sl":68},{"sl":69}]},"test_109":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_160":{"methods":[{"sl":61}],"name":"Verify serialization","pass":true,"statements":[{"sl":63}]},"test_162":{"methods":[{"sl":51},{"sl":66}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_175":{"methods":[{"sl":38},{"sl":77},{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":79},{"sl":80},{"sl":81},{"sl":82},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_182":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66},{"sl":85}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_183":{"methods":[{"sl":51},{"sl":66}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_2":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_205":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_209":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":43}]},"test_231":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":43}]},"test_238":{"methods":[{"sl":38},{"sl":61}],"name":"Verify serialization of a hash value","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_25":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66},{"sl":85}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":96}]},"test_253":{"methods":[{"sl":51},{"sl":66}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_260":{"methods":[{"sl":38},{"sl":57}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":58}]},"test_275":{"methods":[{"sl":38},{"sl":61},{"sl":85}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":96}]},"test_279":{"methods":[{"sl":38},{"sl":77},{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":79},{"sl":80},{"sl":81},{"sl":82},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_288":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_294":{"methods":[{"sl":51}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[]},"test_311":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_313":{"methods":[{"sl":61}],"name":"Verify serialization","pass":true,"statements":[{"sl":63}]},"test_322":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_36":{"methods":[{"sl":61}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":63}]},"test_363":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66},{"sl":85}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_368":{"methods":[{"sl":61}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":63}]},"test_371":{"methods":[{"sl":61}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":63}]},"test_382":{"methods":[{"sl":61}],"name":"Verify serialization","pass":true,"statements":[{"sl":63}]},"test_400":{"methods":[{"sl":57}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":58}]},"test_401":{"methods":[{"sl":51},{"sl":66}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_402":{"methods":[{"sl":38}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":39},{"sl":43}]},"test_406":{"methods":[{"sl":38}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":39},{"sl":40}]},"test_50":{"methods":[{"sl":38},{"sl":61},{"sl":85}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":96}]},"test_56":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_59":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69}]},"test_6":{"methods":[{"sl":38},{"sl":77},{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":79},{"sl":80},{"sl":81},{"sl":82},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_61":{"methods":[{"sl":51},{"sl":57},{"sl":66}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":68},{"sl":69}]},"test_73":{"methods":[{"sl":51}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[]},"test_83":{"methods":[{"sl":51},{"sl":66}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_88":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_90":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [279, 56, 90, 363, 50, 109, 238, 6, 231, 175, 59, 275, 25, 288, 209, 406, 402, 260, 182], [279, 56, 90, 363, 50, 109, 238, 6, 231, 175, 59, 275, 25, 288, 209, 406, 402, 260, 182], [406], [], [], [279, 56, 90, 363, 50, 109, 238, 6, 231, 175, 59, 275, 25, 288, 209, 402, 260, 182], [], [], [], [], [], [], [], [322, 162, 311, 401, 104, 363, 183, 88, 2, 253, 83, 294, 205, 59, 73, 25, 61, 182], [], [], [], [], [], [400, 104, 61, 260], [400, 104, 61, 260], [], [], [322, 311, 36, 313, 160, 56, 90, 363, 368, 50, 88, 371, 109, 238, 2, 382, 205, 59, 275, 25, 288, 182], [], [322, 311, 36, 313, 160, 56, 90, 363, 368, 50, 88, 371, 109, 238, 2, 382, 205, 59, 275, 25, 288, 182], [], [], [322, 162, 311, 401, 104, 363, 183, 88, 2, 253, 83, 205, 59, 25, 61, 182], [], [322, 162, 311, 401, 104, 363, 183, 88, 2, 253, 83, 205, 59, 25, 61, 182], [322, 162, 311, 401, 104, 363, 183, 88, 2, 253, 83, 205, 59, 25, 61, 182], [], [], [], [], [], [], [], [279, 6, 175], [], [279, 6, 175], [279, 6, 175], [279, 6, 175], [279, 6, 175], [], [], [279, 363, 50, 6, 175, 275, 25, 182], [], [279, 363, 50, 6, 175, 275, 25, 182], [], [279, 363, 50, 6, 175, 275, 25, 182], [279], [279, 363, 50, 6, 175, 275, 25, 182], [], [279, 363, 50, 6, 175, 275, 25, 182], [279, 363, 50, 6, 175, 275, 25, 182], [279, 363, 6, 175, 182], [279, 363, 50, 6, 175, 275, 25, 182], [], [], [], []]
