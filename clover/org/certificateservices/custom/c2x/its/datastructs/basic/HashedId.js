var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":100,"id":1072,"methods":[{"el":45,"sc":2,"sl":38},{"el":52,"sc":2,"sl":51},{"el":59,"sc":2,"sl":57},{"el":64,"sc":2,"sl":61},{"el":70,"sc":2,"sl":66},{"el":83,"sc":2,"sl":77},{"el":97,"sc":2,"sl":85}],"name":"HashedId","sl":29}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":61}],"name":"Verify serialization","pass":true,"statements":[{"sl":63}]},"test_126":{"methods":[{"sl":38},{"sl":77},{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":79},{"sl":80},{"sl":81},{"sl":82},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_131":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":43}]},"test_143":{"methods":[{"sl":61}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":63}]},"test_160":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_163":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_164":{"methods":[{"sl":51},{"sl":66}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_165":{"methods":[{"sl":38},{"sl":57}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":58}]},"test_173":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_191":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_196":{"methods":[{"sl":61}],"name":"Verify serialization","pass":true,"statements":[{"sl":63}]},"test_209":{"methods":[{"sl":38},{"sl":61},{"sl":85}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":96}]},"test_22":{"methods":[{"sl":51},{"sl":66}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_222":{"methods":[{"sl":61}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":63}]},"test_241":{"methods":[{"sl":51},{"sl":66}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_246":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]},"test_249":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69}]},"test_257":{"methods":[{"sl":38}],"name":"Verify toString","pass":true,"statements":[{"sl":39},{"sl":43}]},"test_259":{"methods":[{"sl":38},{"sl":61},{"sl":85}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":96}]},"test_262":{"methods":[{"sl":57}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":58}]},"test_265":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_269":{"methods":[{"sl":38},{"sl":77},{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":79},{"sl":80},{"sl":81},{"sl":82},{"sl":87},{"sl":89},{"sl":90},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_283":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_333":{"methods":[{"sl":38}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":39},{"sl":40}]},"test_338":{"methods":[{"sl":51}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[]},"test_339":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66},{"sl":85}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_340":{"methods":[{"sl":61}],"name":"Verify serialization","pass":true,"statements":[{"sl":63}]},"test_351":{"methods":[{"sl":51},{"sl":57},{"sl":66}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":68},{"sl":69}]},"test_355":{"methods":[{"sl":51}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[]},"test_361":{"methods":[{"sl":51},{"sl":66}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_367":{"methods":[{"sl":38},{"sl":61}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_381":{"methods":[{"sl":51},{"sl":66}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69}]},"test_401":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66},{"sl":85}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":96}]},"test_48":{"methods":[{"sl":38},{"sl":77},{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":79},{"sl":80},{"sl":81},{"sl":82},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_5":{"methods":[{"sl":61}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":63}]},"test_52":{"methods":[{"sl":38},{"sl":51},{"sl":61},{"sl":66},{"sl":85}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63},{"sl":68},{"sl":69},{"sl":87},{"sl":89},{"sl":91},{"sl":93},{"sl":94},{"sl":95},{"sl":96}]},"test_57":{"methods":[{"sl":51},{"sl":57},{"sl":66}],"name":"Verify deserialization of a hash value","pass":true,"statements":[{"sl":58},{"sl":68},{"sl":69}]},"test_73":{"methods":[{"sl":38},{"sl":61}],"name":"Verify serialization of a hash value","pass":true,"statements":[{"sl":39},{"sl":43},{"sl":63}]},"test_89":{"methods":[{"sl":38}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":39},{"sl":43}]},"test_96":{"methods":[{"sl":51},{"sl":61},{"sl":66}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":63},{"sl":68},{"sl":69}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [367, 191, 339, 283, 126, 257, 89, 333, 73, 48, 265, 259, 131, 209, 52, 249, 269, 401, 165], [367, 191, 339, 283, 126, 257, 89, 333, 73, 48, 265, 259, 131, 209, 52, 249, 269, 401, 165], [333], [], [], [367, 191, 339, 283, 126, 257, 89, 73, 48, 265, 259, 131, 209, 52, 249, 269, 401, 165], [], [], [], [], [], [], [], [160, 241, 338, 173, 339, 381, 361, 351, 96, 246, 57, 164, 52, 249, 163, 22, 355, 401], [], [], [], [], [], [262, 351, 57, 165], [262, 351, 57, 165], [], [], [160, 367, 173, 191, 222, 339, 283, 105, 143, 73, 265, 259, 96, 340, 209, 246, 5, 52, 249, 163, 401, 196], [], [160, 367, 173, 191, 222, 339, 283, 105, 143, 73, 265, 259, 96, 340, 209, 246, 5, 52, 249, 163, 401, 196], [], [], [160, 241, 173, 339, 381, 361, 351, 96, 246, 57, 164, 52, 249, 163, 22, 401], [], [160, 241, 173, 339, 381, 361, 351, 96, 246, 57, 164, 52, 249, 163, 22, 401], [160, 241, 173, 339, 381, 361, 351, 96, 246, 57, 164, 52, 249, 163, 22, 401], [], [], [], [], [], [], [], [126, 48, 269], [], [126, 48, 269], [126, 48, 269], [126, 48, 269], [126, 48, 269], [], [], [339, 126, 48, 259, 209, 52, 269, 401], [], [339, 126, 48, 259, 209, 52, 269, 401], [], [339, 126, 48, 259, 209, 52, 269, 401], [269], [339, 126, 48, 259, 209, 52, 269, 401], [], [339, 126, 48, 259, 209, 52, 269, 401], [339, 126, 48, 259, 209, 52, 269, 401], [339, 126, 48, 52, 269], [339, 126, 48, 259, 209, 52, 269, 401], [], [], [], []]
