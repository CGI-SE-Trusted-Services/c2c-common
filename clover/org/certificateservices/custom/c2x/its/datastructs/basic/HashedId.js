var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":139,"id":6086,"methods":[{"el":65,"sc":2,"sl":52},{"el":74,"sc":2,"sl":72},{"el":83,"sc":2,"sl":76},{"el":91,"sc":2,"sl":90},{"el":98,"sc":2,"sl":96},{"el":103,"sc":2,"sl":100},{"el":109,"sc":2,"sl":105},{"el":122,"sc":2,"sl":116},{"el":136,"sc":2,"sl":124}],"name":"HashedId","sl":34}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1010":{"methods":[{"sl":100}],"name":"Verify that multiple payload works for version 1 of secured DENM message","pass":true,"statements":[{"sl":102}]},"test_102":{"methods":[{"sl":52},{"sl":72},{"sl":76},{"sl":100},{"sl":124}],"name":"Generate version 2 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_105":{"methods":[{"sl":72},{"sl":76},{"sl":90},{"sl":100},{"sl":105},{"sl":124}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":107},{"sl":108},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":134},{"sl":135}]},"test_13":{"methods":[{"sl":90},{"sl":100},{"sl":105}],"name":"Verify interoperability with version 2 certificates generated by ETSI TS 10309603 test suite.","pass":true,"statements":[{"sl":102},{"sl":107},{"sl":108}]},"test_134":{"methods":[{"sl":90},{"sl":105}],"name":"Verify deserialization","pass":true,"statements":[{"sl":107},{"sl":108}]},"test_15":{"methods":[{"sl":90},{"sl":100},{"sl":105}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":102},{"sl":107},{"sl":108}]},"test_155":{"methods":[{"sl":72},{"sl":76},{"sl":116},{"sl":124}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":118},{"sl":119},{"sl":120},{"sl":121},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":134},{"sl":135}]},"test_158":{"methods":[{"sl":52},{"sl":76},{"sl":100}],"name":"Verify that multiple payload works for version 1 of secured CAM message","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":77},{"sl":81},{"sl":102}]},"test_195":{"methods":[{"sl":96}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":97}]},"test_242":{"methods":[{"sl":72},{"sl":76},{"sl":90},{"sl":100},{"sl":105},{"sl":124}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":107},{"sl":108},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_249":{"methods":[{"sl":90},{"sl":105}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":107},{"sl":108}]},"test_259":{"methods":[{"sl":100}],"name":"Verify serialization","pass":true,"statements":[{"sl":102}]},"test_281":{"methods":[{"sl":100}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":102}]},"test_306":{"methods":[{"sl":52},{"sl":76},{"sl":90},{"sl":100},{"sl":105}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":77},{"sl":81},{"sl":102},{"sl":107},{"sl":108}]},"test_31":{"methods":[{"sl":72},{"sl":76}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":78}]},"test_349":{"methods":[{"sl":90},{"sl":96},{"sl":105}],"name":"Verify deserialization of a hash value","pass":true,"statements":[{"sl":97},{"sl":107},{"sl":108}]},"test_350":{"methods":[{"sl":90},{"sl":105}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":107},{"sl":108}]},"test_361":{"methods":[{"sl":90},{"sl":100},{"sl":105}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":102},{"sl":107},{"sl":108}]},"test_363":{"methods":[{"sl":90},{"sl":105}],"name":"Verify deserialization","pass":true,"statements":[{"sl":107},{"sl":108}]},"test_368":{"methods":[{"sl":52},{"sl":76},{"sl":124}],"name":"Verify that certificate signature R point normalises signature r value to X only","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":57},{"sl":58},{"sl":59},{"sl":60},{"sl":61},{"sl":64},{"sl":77},{"sl":81},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_37":{"methods":[{"sl":52},{"sl":72},{"sl":76},{"sl":100},{"sl":124}],"name":"Generate version 2 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_43":{"methods":[{"sl":72},{"sl":76},{"sl":96}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":97}]},"test_438":{"methods":[{"sl":100}],"name":"Verify serialization","pass":true,"statements":[{"sl":102}]},"test_448":{"methods":[{"sl":52},{"sl":72},{"sl":76},{"sl":100},{"sl":124}],"name":"Generate version 1 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_457":{"methods":[{"sl":52},{"sl":72},{"sl":76},{"sl":100},{"sl":124}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_540":{"methods":[{"sl":72},{"sl":76}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81}]},"test_545":{"methods":[{"sl":90},{"sl":105}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":107},{"sl":108}]},"test_572":{"methods":[{"sl":100}],"name":"Generate version 1 Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":102}]},"test_579":{"methods":[{"sl":72},{"sl":76},{"sl":100}],"name":"Generate version 2 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":102}]},"test_637":{"methods":[{"sl":90},{"sl":100},{"sl":105}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":102},{"sl":107},{"sl":108}]},"test_670":{"methods":[{"sl":100}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[1]","pass":true,"statements":[{"sl":102}]},"test_686":{"methods":[{"sl":52},{"sl":76},{"sl":100}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":77},{"sl":81},{"sl":102}]},"test_699":{"methods":[{"sl":72},{"sl":76},{"sl":90},{"sl":100},{"sl":105},{"sl":124}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":107},{"sl":108},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":134},{"sl":135}]},"test_715":{"methods":[{"sl":90},{"sl":96},{"sl":105}],"name":"Verify deserialization","pass":true,"statements":[{"sl":97},{"sl":107},{"sl":108}]},"test_721":{"methods":[{"sl":72},{"sl":76},{"sl":116},{"sl":124}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":118},{"sl":119},{"sl":120},{"sl":121},{"sl":126},{"sl":128},{"sl":129},{"sl":130},{"sl":132},{"sl":133},{"sl":134},{"sl":135}]},"test_723":{"methods":[{"sl":100}],"name":"Generate version 1 Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":102}]},"test_746":{"methods":[{"sl":90},{"sl":105}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":107},{"sl":108}]},"test_764":{"methods":[{"sl":52},{"sl":72},{"sl":76},{"sl":100},{"sl":124}],"name":"Generate version 1 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_768":{"methods":[{"sl":72},{"sl":76},{"sl":116},{"sl":124}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":118},{"sl":119},{"sl":120},{"sl":121},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":134},{"sl":135}]},"test_786":{"methods":[{"sl":100}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":102}]},"test_818":{"methods":[{"sl":72},{"sl":76}],"name":"Verify toString","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81}]},"test_819":{"methods":[{"sl":52},{"sl":72},{"sl":76},{"sl":100},{"sl":124}],"name":"Generate version 2 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_852":{"methods":[{"sl":52},{"sl":76},{"sl":100}],"name":"Generate version 1 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":77},{"sl":81},{"sl":102}]},"test_853":{"methods":[{"sl":90},{"sl":100},{"sl":105}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":102},{"sl":107},{"sl":108}]},"test_855":{"methods":[{"sl":100}],"name":"Generate version 1 Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":102}]},"test_899":{"methods":[{"sl":72},{"sl":76},{"sl":100}],"name":"Generate version 1 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":102}]},"test_90":{"methods":[{"sl":100}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[0]","pass":true,"statements":[{"sl":102}]},"test_913":{"methods":[{"sl":90}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[]},"test_917":{"methods":[{"sl":72},{"sl":76},{"sl":100}],"name":"Verify serialization of a hash value","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81},{"sl":102}]},"test_930":{"methods":[{"sl":72},{"sl":76}],"name":"Verify toString","pass":true,"statements":[{"sl":73},{"sl":77},{"sl":81}]},"test_94":{"methods":[{"sl":90}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[]},"test_950":{"methods":[{"sl":100}],"name":"Verify serialization","pass":true,"statements":[{"sl":102}]},"test_973":{"methods":[{"sl":52},{"sl":72},{"sl":76},{"sl":100},{"sl":124}],"name":"Generate version 2 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":55},{"sl":64},{"sl":73},{"sl":77},{"sl":81},{"sl":102},{"sl":126},{"sl":128},{"sl":130},{"sl":132},{"sl":133},{"sl":135}]},"test_995":{"methods":[{"sl":100}],"name":"Generate version 1 Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":102}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [306, 448, 102, 973, 158, 852, 686, 457, 764, 819, 37, 368], [306, 448, 102, 973, 158, 852, 686, 457, 764, 819, 37, 368], [306, 448, 102, 973, 158, 852, 686, 457, 764, 819, 37, 368], [306, 448, 102, 973, 158, 852, 686, 457, 764, 819, 37, 368], [], [368], [368], [368], [368], [368], [], [], [306, 448, 102, 973, 158, 852, 686, 457, 764, 819, 37, 368], [], [], [], [], [], [], [], [448, 43, 102, 973, 31, 721, 768, 917, 242, 699, 457, 818, 105, 764, 819, 899, 930, 579, 155, 37, 540], [448, 43, 102, 973, 31, 721, 768, 917, 242, 699, 457, 818, 105, 764, 819, 899, 930, 579, 155, 37, 540], [], [], [306, 448, 43, 102, 973, 31, 721, 768, 158, 852, 686, 917, 242, 699, 457, 818, 105, 764, 819, 899, 930, 579, 155, 37, 540, 368], [306, 448, 43, 102, 973, 31, 721, 768, 158, 852, 686, 917, 242, 699, 457, 818, 105, 764, 819, 899, 930, 579, 155, 37, 540, 368], [31], [], [], [306, 448, 43, 102, 973, 721, 768, 158, 852, 686, 917, 242, 699, 457, 818, 105, 764, 819, 899, 930, 579, 155, 37, 540, 368], [], [], [], [], [], [], [], [], [249, 306, 134, 853, 361, 349, 13, 242, 94, 699, 363, 105, 15, 746, 350, 913, 637, 715, 545], [], [], [], [], [], [43, 349, 195, 715], [43, 349, 195, 715], [], [], [306, 448, 102, 90, 438, 973, 281, 853, 158, 852, 686, 361, 917, 723, 855, 13, 786, 950, 242, 699, 259, 1010, 457, 105, 15, 670, 764, 819, 899, 579, 995, 637, 37, 572], [], [306, 448, 102, 90, 438, 973, 281, 853, 158, 852, 686, 361, 917, 723, 855, 13, 786, 950, 242, 699, 259, 1010, 457, 105, 15, 670, 764, 819, 899, 579, 995, 637, 37, 572], [], [], [249, 306, 134, 853, 361, 349, 13, 242, 699, 363, 105, 15, 746, 350, 637, 715, 545], [], [249, 306, 134, 853, 361, 349, 13, 242, 699, 363, 105, 15, 746, 350, 637, 715, 545], [249, 306, 134, 853, 361, 349, 13, 242, 699, 363, 105, 15, 746, 350, 637, 715, 545], [], [], [], [], [], [], [], [721, 768, 155], [], [721, 768, 155], [721, 768, 155], [721, 768, 155], [721, 768, 155], [], [], [448, 102, 973, 721, 768, 242, 699, 457, 105, 764, 819, 155, 37, 368], [], [448, 102, 973, 721, 768, 242, 699, 457, 105, 764, 819, 155, 37, 368], [], [448, 102, 973, 721, 768, 242, 699, 457, 105, 764, 819, 155, 37, 368], [721], [448, 102, 973, 721, 768, 242, 699, 457, 105, 764, 819, 155, 37, 368], [], [448, 102, 973, 721, 768, 242, 699, 457, 105, 764, 819, 155, 37, 368], [448, 102, 973, 721, 768, 242, 699, 457, 105, 764, 819, 155, 37, 368], [721, 768, 699, 105, 155], [448, 102, 973, 721, 768, 242, 699, 457, 105, 764, 819, 155, 37, 368], [], [], [], []]
