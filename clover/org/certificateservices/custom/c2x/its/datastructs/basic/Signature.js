var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":102,"id":1526,"methods":[{"el":52,"sc":2,"sl":46},{"el":61,"sc":2,"sl":60},{"el":68,"sc":2,"sl":66},{"el":75,"sc":2,"sl":73},{"el":84,"sc":2,"sl":78},{"el":93,"sc":2,"sl":86},{"el":99,"sc":2,"sl":95}],"name":"Signature","sl":34}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_104":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_106":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_108":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_112":{"methods":[{"sl":60},{"sl":66},{"sl":73},{"sl":86}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":67},{"sl":74},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_116":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_12":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_0 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_125":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_13":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_133":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_135":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_142":{"methods":[{"sl":60},{"sl":66}],"name":"Verify calculateSignatureLength throws exception for #pubAlg","pass":true,"statements":[{"sl":67}]},"test_143":{"methods":[{"sl":60},{"sl":66},{"sl":86}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":67},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_148":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_151":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_154":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_16":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_170":{"methods":[{"sl":66}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":67}]},"test_182":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_183":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_231":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_232":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_233":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_239":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_243":{"methods":[{"sl":46},{"sl":78}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":80},{"sl":81},{"sl":82}]},"test_256":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Test to generate ECDSA Signature and then verify the signature for algorithm: ecdsa_nistp256_with_sha256","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_26":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_263":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_264":{"methods":[{"sl":78}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_27":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_277":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_285":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_288":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_292":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType uncompressed","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_301":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_0","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_307":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_313":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_315":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with uncompressed ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_323":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_1 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_336":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_339":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly no signature trailer field","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_354":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_357":{"methods":[{"sl":78}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_366":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_37":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_372":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_376":{"methods":[{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_380":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_394":{"methods":[{"sl":46},{"sl":66}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":50},{"sl":51},{"sl":67}]},"test_399":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_403":{"methods":[{"sl":66}],"name":"Verify attachSignature","pass":true,"statements":[{"sl":67}]},"test_47":{"methods":[{"sl":46},{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":97}]},"test_50":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType x_coordinate_only","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_6":{"methods":[{"sl":60},{"sl":86}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_72":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_83":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with x_coordinate_only ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_87":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_89":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_98":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [277, 256, 26, 231, 232, 47, 292, 13, 106, 116, 399, 380, 89, 394, 37, 307, 372, 336, 1, 27, 50, 301, 263, 243, 313, 148, 366, 285], [277, 256, 26, 231, 232, 47, 292, 13, 106, 116, 399, 380, 89, 394, 37, 307, 372, 336, 1, 27, 50, 301, 263, 243, 313, 148, 366, 285], [394], [], [277, 256, 26, 231, 232, 47, 292, 13, 106, 116, 399, 380, 89, 394, 37, 307, 372, 336, 1, 27, 50, 301, 263, 243, 313, 148, 366, 285], [277, 256, 26, 231, 232, 47, 292, 13, 106, 116, 399, 380, 89, 394, 37, 307, 372, 336, 1, 27, 50, 301, 263, 243, 313, 148, 366, 285], [], [], [], [], [], [], [], [], [239, 232, 183, 104, 143, 108, 151, 87, 142, 6, 16, 27, 125, 135, 112, 148, 376], [], [], [], [], [], [277, 256, 315, 83, 26, 231, 232, 292, 143, 13, 106, 170, 12, 339, 116, 399, 142, 380, 89, 403, 394, 37, 307, 372, 323, 336, 1, 27, 50, 301, 263, 112, 313, 148, 366, 376, 285], [277, 256, 315, 83, 26, 231, 232, 292, 143, 13, 106, 170, 12, 339, 116, 399, 142, 380, 89, 403, 394, 37, 307, 372, 323, 336, 1, 27, 50, 301, 263, 112, 313, 148, 366, 376, 285], [], [], [], [], [], [277, 256, 315, 83, 26, 231, 232, 292, 13, 106, 12, 339, 116, 399, 380, 89, 37, 307, 372, 323, 336, 1, 27, 50, 301, 263, 112, 313, 148, 366, 376, 285], [277, 256, 315, 83, 26, 231, 232, 292, 13, 106, 12, 339, 116, 399, 380, 89, 37, 307, 372, 323, 336, 1, 27, 50, 301, 263, 112, 313, 148, 366, 376, 285], [], [], [], [277, 357, 239, 154, 26, 232, 98, 13, 106, 116, 151, 182, 89, 233, 37, 307, 372, 264, 336, 133, 1, 27, 125, 263, 243, 313, 148, 366, 376, 285], [], [277, 357, 239, 154, 26, 232, 98, 13, 106, 116, 151, 182, 89, 233, 37, 307, 372, 264, 336, 133, 1, 27, 125, 263, 243, 313, 148, 366, 376, 285], [277, 357, 239, 154, 26, 232, 98, 13, 106, 116, 151, 182, 89, 233, 37, 307, 372, 264, 336, 133, 1, 27, 125, 263, 243, 313, 148, 366, 376, 285], [277, 357, 239, 154, 26, 232, 98, 13, 106, 116, 151, 182, 89, 233, 37, 307, 372, 264, 336, 133, 1, 27, 125, 263, 243, 313, 148, 366, 376, 285], [], [], [], [239, 232, 183, 104, 143, 108, 151, 87, 6, 16, 27, 125, 135, 112, 148, 376], [], [239, 232, 183, 104, 143, 108, 151, 87, 6, 16, 27, 125, 135, 112, 148, 376], [239, 232, 183, 104, 143, 108, 151, 87, 6, 16, 27, 125, 135, 112, 148, 376], [239, 232, 183, 104, 143, 108, 151, 87, 6, 16, 27, 125, 135, 112, 148, 376], [239, 232, 183, 104, 143, 108, 151, 87, 6, 16, 27, 125, 135, 112, 148, 376], [], [], [], [47, 72, 288, 354], [], [47, 72, 288, 354], [], [], [], [], []]
