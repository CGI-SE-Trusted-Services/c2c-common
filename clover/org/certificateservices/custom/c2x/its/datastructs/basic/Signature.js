var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":102,"id":1526,"methods":[{"el":52,"sc":2,"sl":46},{"el":61,"sc":2,"sl":60},{"el":68,"sc":2,"sl":66},{"el":75,"sc":2,"sl":73},{"el":84,"sc":2,"sl":78},{"el":93,"sc":2,"sl":86},{"el":99,"sc":2,"sl":95}],"name":"Signature","sl":34}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_109":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_12":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_1 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_124":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_140":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_150":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_153":{"methods":[{"sl":46},{"sl":78}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":80},{"sl":81},{"sl":82}]},"test_16":{"methods":[{"sl":78}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_162":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_168":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_173":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_182":{"methods":[{"sl":78}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_2":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_205":{"methods":[{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_206":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_0 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_21":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_210":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_228":{"methods":[{"sl":60},{"sl":66}],"name":"Verify calculateSignatureLength throws exception for #pubAlg","pass":true,"statements":[{"sl":67}]},"test_241":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Test to generate ECDSA Signature and then verify the signature for algorithm: ecdsa_nistp256_with_sha256","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_25":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_251":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType uncompressed","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_253":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_266":{"methods":[{"sl":46},{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":97}]},"test_268":{"methods":[{"sl":60},{"sl":66},{"sl":86}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":67},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_271":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_275":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_288":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_293":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_304":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_0","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_311":{"methods":[{"sl":60},{"sl":66},{"sl":73},{"sl":86}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":67},{"sl":74},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_313":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_322":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_324":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_325":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_326":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with uncompressed ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_327":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with x_coordinate_only ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_339":{"methods":[{"sl":66}],"name":"Verify attachSignature","pass":true,"statements":[{"sl":67}]},"test_350":{"methods":[{"sl":66}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":67}]},"test_353":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_363":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_365":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_368":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_371":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_372":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_381":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_382":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_387":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_394":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_401":{"methods":[{"sl":60},{"sl":86}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_47":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType x_coordinate_only","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_50":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_55":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_56":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_59":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_61":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_63":{"methods":[{"sl":46},{"sl":66}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":50},{"sl":51},{"sl":67}]},"test_80":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_85":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly no signature trailer field","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_88":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_90":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [353, 394, 266, 90, 387, 50, 304, 210, 325, 241, 153, 251, 372, 124, 140, 275, 63, 47, 56, 271, 88, 371, 109, 365, 59, 25, 288, 55], [353, 394, 266, 90, 387, 50, 304, 210, 325, 241, 153, 251, 372, 124, 140, 275, 63, 47, 56, 271, 88, 371, 109, 365, 59, 25, 288, 55], [63], [], [353, 394, 266, 90, 387, 50, 304, 210, 325, 241, 153, 251, 372, 124, 140, 275, 63, 47, 56, 271, 88, 371, 109, 365, 59, 25, 288, 55], [353, 394, 266, 90, 387, 50, 304, 210, 325, 241, 153, 251, 372, 124, 140, 275, 63, 47, 56, 271, 88, 371, 109, 365, 59, 25, 288, 55], [], [], [], [], [], [], [], [], [401, 162, 311, 228, 293, 268, 150, 322, 363, 80, 88, 2, 253, 205, 59, 25, 61], [], [], [], [], [], [353, 311, 228, 394, 90, 387, 50, 206, 304, 210, 85, 325, 12, 241, 327, 339, 251, 372, 124, 140, 268, 275, 63, 47, 350, 56, 326, 271, 88, 371, 109, 365, 205, 59, 25, 288, 55], [353, 311, 228, 394, 90, 387, 50, 206, 304, 210, 85, 325, 12, 241, 327, 339, 251, 372, 124, 140, 268, 275, 63, 47, 350, 56, 326, 271, 88, 371, 109, 365, 205, 59, 25, 288, 55], [], [], [], [], [], [353, 311, 394, 90, 387, 50, 206, 304, 210, 85, 325, 12, 241, 327, 251, 372, 124, 140, 275, 47, 56, 326, 271, 88, 371, 109, 365, 205, 59, 25, 288, 55], [353, 311, 394, 90, 387, 50, 206, 304, 210, 85, 325, 12, 241, 327, 251, 372, 124, 140, 275, 47, 56, 326, 271, 88, 371, 109, 365, 205, 59, 25, 288, 55], [], [], [], [353, 313, 381, 394, 90, 50, 368, 168, 210, 325, 153, 124, 140, 275, 16, 322, 56, 363, 88, 371, 109, 365, 382, 2, 205, 59, 25, 288, 55, 182], [], [353, 313, 381, 394, 90, 50, 368, 168, 210, 325, 153, 124, 140, 275, 16, 322, 56, 363, 88, 371, 109, 365, 382, 2, 205, 59, 25, 288, 55, 182], [353, 313, 381, 394, 90, 50, 368, 168, 210, 325, 153, 124, 140, 275, 16, 322, 56, 363, 88, 371, 109, 365, 382, 2, 205, 59, 25, 288, 55, 182], [353, 313, 381, 394, 90, 50, 368, 168, 210, 325, 153, 124, 140, 275, 16, 322, 56, 363, 88, 371, 109, 365, 382, 2, 205, 59, 25, 288, 55, 182], [], [], [], [401, 162, 311, 293, 268, 150, 322, 363, 80, 88, 2, 253, 205, 59, 25, 61], [], [401, 162, 311, 293, 268, 150, 322, 363, 80, 88, 2, 253, 205, 59, 25, 61], [401, 162, 311, 293, 268, 150, 322, 363, 80, 88, 2, 253, 205, 59, 25, 61], [401, 162, 311, 293, 268, 150, 322, 363, 80, 88, 2, 253, 205, 59, 25, 61], [401, 162, 311, 293, 268, 150, 322, 363, 80, 88, 2, 253, 205, 59, 25, 61], [], [], [], [266, 173, 324, 21], [], [266, 173, 324, 21], [], [], [], [], []]
