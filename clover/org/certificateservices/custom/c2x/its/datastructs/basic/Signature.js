var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":102,"id":1526,"methods":[{"el":52,"sc":2,"sl":46},{"el":61,"sc":2,"sl":60},{"el":68,"sc":2,"sl":66},{"el":75,"sc":2,"sl":73},{"el":84,"sc":2,"sl":78},{"el":93,"sc":2,"sl":86},{"el":99,"sc":2,"sl":95}],"name":"Signature","sl":34}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":60},{"sl":66},{"sl":73},{"sl":86}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":67},{"sl":74},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_103":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_108":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_110":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_121":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_122":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_125":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly no signature trailer field","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_127":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_132":{"methods":[{"sl":78}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_14":{"methods":[{"sl":78}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_174":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_178":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_179":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_181":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_182":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_183":{"methods":[{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_184":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_196":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_1 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_20":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_211":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with x_coordinate_only ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_234":{"methods":[{"sl":46},{"sl":66}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":50},{"sl":51},{"sl":67}]},"test_24":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_25":{"methods":[{"sl":66}],"name":"Verify attachSignature","pass":true,"statements":[{"sl":67}]},"test_253":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with uncompressed ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_256":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_259":{"methods":[{"sl":60},{"sl":66}],"name":"Verify calculateSignatureLength throws exception for #pubAlg","pass":true,"statements":[{"sl":67}]},"test_26":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_282":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_289":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType x_coordinate_only","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_292":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_310":{"methods":[{"sl":66}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":67}]},"test_313":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_317":{"methods":[{"sl":46},{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":97}]},"test_320":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_339":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType uncompressed","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_342":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_346":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_0 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_351":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_0","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_358":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_36":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_365":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_38":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_383":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_392":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_398":{"methods":[{"sl":60},{"sl":86}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_400":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Test to generate ECDSA Signature and then verify the signature for algorithm: ecdsa_nistp256_with_sha256","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_404":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_406":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_42":{"methods":[{"sl":60},{"sl":66},{"sl":86}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":67},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_7":{"methods":[{"sl":46},{"sl":78}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":80},{"sl":81},{"sl":82}]},"test_79":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_8":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_82":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_90":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_92":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_93":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_94":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_97":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_99":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [127, 174, 7, 103, 339, 358, 92, 365, 79, 351, 342, 182, 36, 234, 121, 392, 317, 406, 93, 38, 289, 99, 178, 313, 90, 94, 82, 400], [127, 174, 7, 103, 339, 358, 92, 365, 79, 351, 342, 182, 36, 234, 121, 392, 317, 406, 93, 38, 289, 99, 178, 313, 90, 94, 82, 400], [234], [], [127, 174, 7, 103, 339, 358, 92, 365, 79, 351, 342, 182, 36, 234, 121, 392, 317, 406, 93, 38, 289, 99, 178, 313, 90, 94, 82, 400], [127, 174, 7, 103, 339, 358, 92, 365, 79, 351, 342, 182, 36, 234, 121, 392, 317, 406, 93, 38, 289, 99, 178, 313, 90, 94, 82, 400], [], [], [], [], [], [], [], [], [26, 8, 179, 103, 92, 256, 183, 398, 42, 36, 1, 320, 97, 259, 24, 20, 282], [], [], [], [], [], [346, 127, 174, 310, 253, 103, 339, 358, 92, 365, 183, 79, 351, 342, 182, 42, 125, 36, 234, 1, 259, 121, 392, 196, 25, 406, 93, 38, 289, 99, 211, 178, 313, 90, 94, 82, 400], [346, 127, 174, 310, 253, 103, 339, 358, 92, 365, 183, 79, 351, 342, 182, 42, 125, 36, 234, 1, 259, 121, 392, 196, 25, 406, 93, 38, 289, 99, 211, 178, 313, 90, 94, 82, 400], [], [], [], [], [], [346, 127, 174, 253, 103, 339, 358, 92, 365, 183, 79, 351, 342, 182, 125, 36, 1, 121, 392, 196, 406, 93, 38, 289, 99, 211, 178, 313, 90, 94, 82, 400], [346, 127, 174, 253, 103, 339, 358, 92, 365, 183, 79, 351, 342, 182, 125, 36, 1, 121, 392, 196, 406, 93, 38, 289, 99, 211, 178, 313, 90, 94, 82, 400], [], [], [], [26, 127, 174, 7, 108, 103, 92, 122, 365, 183, 79, 342, 182, 36, 97, 392, 184, 20, 406, 181, 93, 38, 14, 178, 313, 90, 94, 132, 292, 82], [], [26, 127, 174, 7, 108, 103, 92, 122, 365, 183, 79, 342, 182, 36, 97, 392, 184, 20, 406, 181, 93, 38, 14, 178, 313, 90, 94, 132, 292, 82], [26, 127, 174, 7, 108, 103, 92, 122, 365, 183, 79, 342, 182, 36, 97, 392, 184, 20, 406, 181, 93, 38, 14, 178, 313, 90, 94, 132, 292, 82], [26, 127, 174, 7, 108, 103, 92, 122, 365, 183, 79, 342, 182, 36, 97, 392, 184, 20, 406, 181, 93, 38, 14, 178, 313, 90, 94, 132, 292, 82], [], [], [], [26, 8, 179, 103, 92, 256, 183, 398, 42, 36, 1, 320, 97, 24, 20, 282], [], [26, 8, 179, 103, 92, 256, 183, 398, 42, 36, 1, 320, 97, 24, 20, 282], [26, 8, 179, 103, 92, 256, 183, 398, 42, 36, 1, 320, 97, 24, 20, 282], [26, 8, 179, 103, 92, 256, 183, 398, 42, 36, 1, 320, 97, 24, 20, 282], [26, 8, 179, 103, 92, 256, 183, 398, 42, 36, 1, 320, 97, 24, 20, 282], [], [], [], [404, 110, 317, 383], [], [404, 110, 317, 383], [], [], [], [], []]
