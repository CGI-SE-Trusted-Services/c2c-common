var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":149,"id":6706,"methods":[{"el":54,"sc":2,"sl":50},{"el":63,"sc":2,"sl":61},{"el":72,"sc":2,"sl":69},{"el":85,"sc":2,"sl":80},{"el":93,"sc":2,"sl":91},{"el":106,"sc":2,"sl":96},{"el":113,"sc":2,"sl":108},{"el":118,"sc":2,"sl":115},{"el":127,"sc":2,"sl":120},{"el":144,"sc":2,"sl":129}],"name":"Time64","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_159":{"methods":[{"sl":50},{"sl":96}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_192":{"methods":[{"sl":50},{"sl":91}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":92}]},"test_220":{"methods":[{"sl":61},{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":62},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_229":{"methods":[{"sl":50},{"sl":91}],"name":"Verify the constructors and asElapsedTime","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":92}]},"test_28":{"methods":[{"sl":50},{"sl":69},{"sl":96},{"sl":108}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104},{"sl":110},{"sl":111},{"sl":112}]},"test_292":{"methods":[{"sl":50},{"sl":69},{"sl":96},{"sl":108}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104},{"sl":110},{"sl":111},{"sl":112}]},"test_3":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_30":{"methods":[{"sl":50},{"sl":120},{"sl":129}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":122},{"sl":123},{"sl":124},{"sl":126},{"sl":131},{"sl":133},{"sl":135},{"sl":137},{"sl":138},{"sl":141},{"sl":142},{"sl":143}]},"test_353":{"methods":[{"sl":69},{"sl":96},{"sl":108}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104},{"sl":110},{"sl":111},{"sl":112}]},"test_359":{"methods":[{"sl":61},{"sl":69},{"sl":96},{"sl":108}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":62},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104},{"sl":110},{"sl":111},{"sl":112}]},"test_376":{"methods":[{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]},"test_419":{"methods":[{"sl":50},{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]},"test_570":{"methods":[{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]},"test_597":{"methods":[{"sl":69},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":110},{"sl":111},{"sl":112}]},"test_61":{"methods":[{"sl":69},{"sl":80},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":110},{"sl":111},{"sl":112}]},"test_629":{"methods":[{"sl":50},{"sl":120},{"sl":129}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":122},{"sl":123},{"sl":124},{"sl":126},{"sl":131},{"sl":133},{"sl":135},{"sl":137},{"sl":138},{"sl":141},{"sl":142},{"sl":143}]},"test_669":{"methods":[{"sl":50},{"sl":96}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_692":{"methods":[{"sl":50}],"name":"Verify that addHeader adds the header value in correct order","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53}]},"test_694":{"methods":[{"sl":69},{"sl":108}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":110},{"sl":111},{"sl":112}]},"test_7":{"methods":[{"sl":69},{"sl":80},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":110},{"sl":111},{"sl":112}]},"test_701":{"methods":[{"sl":61},{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":62},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_709":{"methods":[{"sl":50},{"sl":96}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_719":{"methods":[{"sl":96}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_803":{"methods":[{"sl":50},{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]},"test_846":{"methods":[{"sl":50},{"sl":69},{"sl":96},{"sl":108}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104},{"sl":110},{"sl":111},{"sl":112}]},"test_913":{"methods":[{"sl":69},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":110},{"sl":111},{"sl":112}]},"test_915":{"methods":[{"sl":50},{"sl":96}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_961":{"methods":[{"sl":50}],"name":"Verify that findHeader finds the correct header in a SecureMessage","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53}]},"test_978":{"methods":[{"sl":61},{"sl":80}],"name":"Make sure asDate converts the date correctly","pass":true,"statements":[{"sl":62},{"sl":81},{"sl":82},{"sl":83},{"sl":84}]},"test_99":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [692, 803, 915, 30, 961, 419, 229, 292, 669, 709, 846, 28, 159, 192, 629], [692, 803, 915, 30, 961, 419, 229, 292, 669, 709, 846, 28, 159, 192, 629], [692, 803, 915, 30, 961, 419, 229, 292, 669, 709, 846, 28, 159, 192, 629], [692, 803, 915, 30, 961, 419, 229, 292, 669, 709, 846, 28, 159, 192, 629], [], [], [], [], [], [], [], [701, 978, 220, 359], [701, 978, 220, 359], [], [], [], [], [], [], [353, 7, 597, 292, 846, 913, 28, 359, 694, 61], [], [], [], [], [], [], [], [], [], [], [7, 803, 419, 978, 376, 570, 61], [7, 803, 419, 978, 376, 570, 61], [7, 803, 419, 978, 376, 570, 61], [7, 803, 419, 978, 376, 570, 61], [7, 803, 419, 978, 376, 570, 61], [], [], [], [], [], [], [229, 192], [229, 192], [], [], [], [353, 915, 99, 701, 719, 292, 669, 709, 846, 220, 3, 28, 159, 359], [], [353, 915, 99, 701, 719, 292, 669, 709, 846, 220, 3, 28, 159, 359], [353, 915, 99, 701, 719, 292, 669, 709, 846, 220, 3, 28, 159, 359], [], [], [353, 915, 99, 701, 719, 292, 669, 709, 846, 220, 3, 28, 159, 359], [353, 915, 99, 701, 719, 292, 669, 709, 846, 220, 3, 28, 159, 359], [353, 915, 99, 701, 719, 292, 669, 709, 846, 220, 3, 28, 159, 359], [], [], [], [353, 7, 597, 292, 846, 913, 28, 359, 694, 61], [], [353, 7, 597, 292, 846, 913, 28, 359, 694, 61], [353, 7, 597, 292, 846, 913, 28, 359, 694, 61], [353, 7, 597, 292, 846, 913, 28, 359, 694, 61], [], [], [803, 419, 376, 570], [], [803, 419, 376, 570], [], [], [30, 629], [], [30, 629], [30, 629], [30, 629], [], [30, 629], [], [], [30, 629], [], [30, 629], [], [30, 629], [], [30, 629], [], [30, 629], [30, 629], [], [], [30, 629], [30, 629], [30, 629], [], [], [], [], [], []]
