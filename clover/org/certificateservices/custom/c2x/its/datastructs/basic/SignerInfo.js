var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":282,"id":1553,"methods":[{"el":57,"sc":2,"sl":55},{"el":66,"sc":2,"sl":63},{"el":75,"sc":2,"sl":72},{"el":87,"sc":2,"sl":84},{"el":100,"sc":2,"sl":96},{"el":111,"sc":2,"sl":109},{"el":120,"sc":2,"sl":118},{"el":129,"sc":2,"sl":127},{"el":141,"sc":2,"sl":139},{"el":150,"sc":2,"sl":148},{"el":174,"sc":2,"sl":152},{"el":202,"sc":2,"sl":176},{"el":222,"sc":2,"sl":205},{"el":254,"sc":2,"sl":225},{"el":278,"sc":2,"sl":258}],"name":"SignerInfo","sl":41}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":55},{"sl":109},{"sl":152},{"sl":176}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":56},{"sl":110},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_103":{"methods":[{"sl":55},{"sl":72},{"sl":109},{"sl":127},{"sl":152},{"sl":176}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":56},{"sl":73},{"sl":74},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163},{"sl":179},{"sl":180},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_108":{"methods":[{"sl":152}],"name":"Verify serialization","pass":true,"statements":[{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163},{"sl":164},{"sl":165},{"sl":166},{"sl":167},{"sl":168},{"sl":169},{"sl":170}]},"test_110":{"methods":[{"sl":258}],"name":"Verify toString","pass":true,"statements":[{"sl":260},{"sl":261},{"sl":262},{"sl":266},{"sl":267}]},"test_122":{"methods":[{"sl":152}],"name":"Verify serialization","pass":true,"statements":[{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160}]},"test_127":{"methods":[{"sl":72},{"sl":127},{"sl":152}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":73},{"sl":74},{"sl":128},{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163}]},"test_132":{"methods":[{"sl":152}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160}]},"test_154":{"methods":[{"sl":258}],"name":"Verify toString","pass":true,"statements":[{"sl":260},{"sl":261},{"sl":262}]},"test_174":{"methods":[{"sl":55},{"sl":72},{"sl":109},{"sl":127},{"sl":152}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":56},{"sl":73},{"sl":74},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163}]},"test_178":{"methods":[{"sl":63},{"sl":72},{"sl":109},{"sl":118},{"sl":127},{"sl":152}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":64},{"sl":65},{"sl":73},{"sl":74},{"sl":110},{"sl":119},{"sl":128},{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163}]},"test_179":{"methods":[{"sl":55},{"sl":176}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":179},{"sl":180},{"sl":183},{"sl":184},{"sl":185},{"sl":186}]},"test_181":{"methods":[{"sl":152}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163}]},"test_182":{"methods":[{"sl":84},{"sl":109},{"sl":139},{"sl":152}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":85},{"sl":86},{"sl":110},{"sl":140},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163},{"sl":164},{"sl":165},{"sl":166}]},"test_183":{"methods":[{"sl":55},{"sl":109},{"sl":127},{"sl":152},{"sl":176}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":56},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163},{"sl":179},{"sl":180},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_184":{"methods":[{"sl":152}],"name":"Verify serialization","pass":true,"statements":[{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163}]},"test_20":{"methods":[{"sl":55},{"sl":152},{"sl":176}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":56},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_24":{"methods":[{"sl":55},{"sl":176}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":56},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_240":{"methods":[{"sl":72}],"name":"Verify illegal subjec type no root ca and CA certificate null throws illegal argument exception","pass":true,"statements":[{"sl":73},{"sl":74}]},"test_256":{"methods":[{"sl":55},{"sl":176}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":56},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_26":{"methods":[{"sl":55},{"sl":152},{"sl":176}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":56},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_292":{"methods":[{"sl":152}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160}]},"test_310":{"methods":[{"sl":109}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":110}]},"test_313":{"methods":[{"sl":84},{"sl":109},{"sl":139},{"sl":152}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":85},{"sl":86},{"sl":110},{"sl":140},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163},{"sl":164},{"sl":165},{"sl":166}]},"test_320":{"methods":[{"sl":55},{"sl":109},{"sl":118},{"sl":127},{"sl":139},{"sl":148},{"sl":176}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":110},{"sl":119},{"sl":128},{"sl":140},{"sl":149},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190},{"sl":191},{"sl":192},{"sl":193},{"sl":194},{"sl":195},{"sl":196},{"sl":197},{"sl":198}]},"test_342":{"methods":[{"sl":63},{"sl":152}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":64},{"sl":65},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163}]},"test_36":{"methods":[{"sl":55},{"sl":72},{"sl":109},{"sl":127},{"sl":152},{"sl":176}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":56},{"sl":73},{"sl":74},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163},{"sl":179},{"sl":180},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_365":{"methods":[{"sl":72},{"sl":109},{"sl":127},{"sl":152}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":73},{"sl":74},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163}]},"test_377":{"methods":[{"sl":152}],"name":"Verify serialization","pass":true,"statements":[{"sl":154},{"sl":155},{"sl":156},{"sl":157}]},"test_38":{"methods":[{"sl":63},{"sl":109},{"sl":118},{"sl":152}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":64},{"sl":65},{"sl":110},{"sl":119},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163}]},"test_383":{"methods":[{"sl":258}],"name":"Verify toString","pass":true,"statements":[{"sl":260},{"sl":263},{"sl":264}]},"test_392":{"methods":[{"sl":63},{"sl":152}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":64},{"sl":65},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163}]},"test_397":{"methods":[{"sl":63},{"sl":205},{"sl":225}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":64},{"sl":65},{"sl":207},{"sl":208},{"sl":209},{"sl":210},{"sl":211},{"sl":213},{"sl":214},{"sl":215},{"sl":217},{"sl":219},{"sl":221},{"sl":227},{"sl":229},{"sl":231},{"sl":233},{"sl":234},{"sl":235},{"sl":236},{"sl":239},{"sl":240},{"sl":241},{"sl":244},{"sl":247},{"sl":248},{"sl":249},{"sl":251},{"sl":253}]},"test_398":{"methods":[{"sl":55},{"sl":176}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":56},{"sl":179},{"sl":180},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_402":{"methods":[{"sl":109},{"sl":118},{"sl":127},{"sl":139},{"sl":148}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":110},{"sl":119},{"sl":128},{"sl":140},{"sl":149}]},"test_406":{"methods":[{"sl":55},{"sl":72},{"sl":109},{"sl":127},{"sl":152}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":56},{"sl":73},{"sl":74},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163}]},"test_47":{"methods":[{"sl":258}],"name":"Verify toString","pass":true,"statements":[{"sl":260},{"sl":261},{"sl":262},{"sl":263},{"sl":264},{"sl":271},{"sl":272}]},"test_55":{"methods":[{"sl":55},{"sl":176}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":179},{"sl":180},{"sl":181},{"sl":182}]},"test_79":{"methods":[{"sl":72},{"sl":109},{"sl":127},{"sl":152}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":73},{"sl":74},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163}]},"test_8":{"methods":[{"sl":55},{"sl":109},{"sl":176}],"name":"Verify deserialization","pass":true,"statements":[{"sl":56},{"sl":110},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_82":{"methods":[{"sl":72},{"sl":109},{"sl":127},{"sl":152}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":73},{"sl":74},{"sl":110},{"sl":128},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":161},{"sl":162},{"sl":163}]},"test_90":{"methods":[{"sl":63},{"sl":109},{"sl":118},{"sl":152}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":64},{"sl":65},{"sl":110},{"sl":119},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163}]},"test_92":{"methods":[{"sl":55},{"sl":63},{"sl":152},{"sl":176}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":56},{"sl":64},{"sl":65},{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160},{"sl":179},{"sl":180},{"sl":183},{"sl":184},{"sl":185},{"sl":186}]},"test_93":{"methods":[{"sl":55},{"sl":109},{"sl":152}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":56},{"sl":110},{"sl":154},{"sl":155},{"sl":156},{"sl":157}]},"test_94":{"methods":[{"sl":63},{"sl":118},{"sl":152}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":64},{"sl":65},{"sl":119},{"sl":154},{"sl":155},{"sl":158},{"sl":159},{"sl":160}]},"test_97":{"methods":[{"sl":55},{"sl":152},{"sl":176}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":56},{"sl":154},{"sl":155},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":161},{"sl":162},{"sl":163},{"sl":179},{"sl":180},{"sl":181},{"sl":182},{"sl":183},{"sl":184},{"sl":185},{"sl":186},{"sl":187},{"sl":188},{"sl":189},{"sl":190}]},"test_99":{"methods":[{"sl":55},{"sl":109},{"sl":152}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":56},{"sl":110},{"sl":154},{"sl":155},{"sl":156},{"sl":157}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [26, 174, 8, 179, 55, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20, 406, 93, 99], [26, 174, 8, 179, 55, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20, 406, 93, 99], [], [], [], [], [], [], [397, 92, 342, 392, 38, 178, 90, 94], [397, 92, 342, 392, 38, 178, 90, 94], [397, 92, 342, 392, 38, 178, 90, 94], [], [], [], [], [], [], [127, 174, 103, 365, 79, 36, 406, 178, 240, 82], [127, 174, 103, 365, 79, 36, 406, 178, 240, 82], [127, 174, 103, 365, 79, 36, 406, 178, 240, 82], [], [], [], [], [], [], [], [], [], [182, 313], [182, 313], [182, 313], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [174, 402, 8, 310, 103, 365, 183, 79, 182, 36, 1, 320, 406, 93, 38, 99, 178, 313, 90, 82], [174, 402, 8, 310, 103, 365, 183, 79, 182, 36, 1, 320, 406, 93, 38, 99, 178, 313, 90, 82], [], [], [], [], [], [], [], [402, 320, 38, 178, 90, 94], [402, 320, 38, 178, 90, 94], [], [], [], [], [], [], [], [127, 174, 402, 103, 365, 183, 79, 36, 320, 406, 178, 82], [127, 174, 402, 103, 365, 183, 79, 36, 320, 406, 178, 82], [], [], [], [], [], [], [], [], [], [], [402, 182, 320, 313], [402, 182, 320, 313], [], [], [], [], [], [], [], [402, 320], [402, 320], [], [], [127, 26, 174, 108, 103, 92, 122, 365, 183, 79, 342, 182, 36, 1, 377, 97, 392, 184, 20, 406, 181, 93, 38, 99, 178, 313, 90, 94, 132, 292, 82], [], [127, 26, 174, 108, 103, 92, 122, 365, 183, 79, 342, 182, 36, 1, 377, 97, 392, 184, 20, 406, 181, 93, 38, 99, 178, 313, 90, 94, 132, 292, 82], [127, 26, 174, 108, 103, 92, 122, 365, 183, 79, 342, 182, 36, 1, 377, 97, 392, 184, 20, 406, 181, 93, 38, 99, 178, 313, 90, 94, 132, 292, 82], [26, 174, 108, 365, 79, 342, 182, 1, 377, 97, 392, 184, 20, 406, 181, 93, 38, 99, 313, 90, 82], [26, 174, 108, 365, 79, 342, 182, 1, 377, 97, 392, 184, 20, 406, 181, 93, 38, 99, 313, 90, 82], [127, 26, 108, 103, 92, 122, 183, 342, 36, 1, 97, 392, 20, 38, 178, 90, 94, 132, 292], [127, 26, 108, 103, 92, 122, 183, 342, 36, 1, 97, 392, 20, 38, 178, 90, 94, 132, 292], [127, 26, 108, 103, 92, 122, 183, 342, 36, 1, 97, 392, 20, 38, 178, 90, 94, 132, 292], [127, 26, 174, 108, 103, 365, 183, 79, 342, 182, 36, 97, 392, 184, 20, 406, 181, 38, 178, 313, 90, 82], [127, 26, 174, 108, 103, 365, 183, 79, 342, 182, 36, 97, 392, 184, 20, 406, 181, 38, 178, 313, 90, 82], [127, 26, 174, 108, 103, 365, 183, 79, 342, 182, 36, 97, 392, 184, 20, 406, 181, 38, 178, 313, 90, 82], [108, 182, 313], [108, 182, 313], [108, 182, 313], [108], [108], [108], [108], [], [], [], [], [], [26, 8, 179, 55, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20], [], [], [26, 8, 179, 55, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20], [26, 8, 179, 55, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20], [26, 8, 55, 256, 1, 320, 97, 24, 20], [26, 8, 55, 256, 1, 320, 97, 24, 20], [26, 179, 103, 92, 398, 183, 36, 1, 320, 97, 24, 20], [26, 179, 103, 92, 398, 183, 36, 1, 320, 97, 24, 20], [26, 179, 103, 92, 398, 183, 36, 1, 320, 97, 24, 20], [26, 179, 103, 92, 398, 183, 36, 1, 320, 97, 24, 20], [26, 8, 103, 256, 398, 183, 36, 1, 320, 97, 24, 20], [26, 8, 103, 256, 398, 183, 36, 1, 320, 97, 24, 20], [26, 8, 103, 256, 398, 183, 36, 1, 320, 97, 24, 20], [26, 8, 103, 256, 398, 183, 36, 1, 320, 97, 24, 20], [320], [320], [320], [320], [320], [320], [320], [320], [], [], [], [], [], [], [397], [], [397], [397], [397], [397], [397], [], [397], [397], [397], [], [397], [], [397], [], [397], [], [], [], [397], [], [397], [], [397], [], [397], [], [397], [397], [397], [397], [], [], [397], [397], [397], [], [], [397], [], [], [397], [397], [397], [], [397], [], [397], [], [], [], [], [47, 110, 154, 383], [], [47, 110, 154, 383], [47, 110, 154], [47, 110, 154], [47, 383], [47, 383], [], [110], [110], [], [], [], [47], [47], [], [], [], [], [], [], [], [], [], []]
