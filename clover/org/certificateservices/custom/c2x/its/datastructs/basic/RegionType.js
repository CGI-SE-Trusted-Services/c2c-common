var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":63,"id":1515,"methods":[{"el":45,"sc":2,"sl":43},{"el":49,"sc":2,"sl":47},{"el":61,"sc":2,"sl":54}],"name":"RegionType","sl":34}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_126":{"methods":[{"sl":54}],"name":"Verify deserialization","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_151":{"methods":[{"sl":47}],"name":"Verify serialization","pass":true,"statements":[{"sl":48}]},"test_162":{"methods":[{"sl":54}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_2":{"methods":[{"sl":47},{"sl":54}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_205":{"methods":[{"sl":47},{"sl":54}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_23":{"methods":[{"sl":54}],"name":"Verify that RegionType.getByValue returns rectangle for 2","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_242":{"methods":[{"sl":54}],"name":"Verify deserialization","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_272":{"methods":[{"sl":47}],"name":"Verify that none has bytevalue 0","pass":true,"statements":[{"sl":48}]},"test_274":{"methods":[{"sl":47}],"name":"Verify serialization","pass":true,"statements":[{"sl":48}]},"test_291":{"methods":[{"sl":47}],"name":"Verify that rectangle has bytevalue 2","pass":true,"statements":[{"sl":48}]},"test_292":{"methods":[{"sl":54}],"name":"Verify that RegionType.getByValue returns circle for 1","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_293":{"methods":[{"sl":54}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_311":{"methods":[{"sl":47},{"sl":54}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_322":{"methods":[{"sl":47},{"sl":54}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_337":{"methods":[{"sl":47}],"name":"Verify that id has bytevalue 4","pass":true,"statements":[{"sl":48}]},"test_363":{"methods":[{"sl":47},{"sl":54}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_365":{"methods":[{"sl":47}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":48}]},"test_390":{"methods":[{"sl":47}],"name":"Verify that circle has bytevalue 1","pass":true,"statements":[{"sl":48}]},"test_401":{"methods":[{"sl":54}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_403":{"methods":[{"sl":54}],"name":"Verify that RegionType.getByValue returns polygon for 3","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_405":{"methods":[{"sl":54}],"name":"Verify that RegionType.getByValue returns none for 0","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_48":{"methods":[{"sl":54}],"name":"Verify that RegionType.getByValue returns id for 4","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_59":{"methods":[{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_7":{"methods":[{"sl":47}],"name":"Verify that polygon has bytevalue 3","pass":true,"statements":[{"sl":48}]},"test_88":{"methods":[{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [311, 291, 272, 337, 322, 390, 7, 363, 365, 2, 151, 205, 274], [311, 291, 272, 337, 322, 390, 7, 363, 365, 2, 151, 205, 274], [], [], [], [], [], [405, 401, 311, 162, 242, 293, 126, 23, 322, 403, 363, 88, 2, 48, 205, 59, 292], [405, 401, 311, 162, 242, 293, 126, 23, 322, 403, 363, 88, 2, 48, 205, 59, 292], [405, 401, 311, 162, 242, 293, 126, 23, 322, 403, 363, 88, 2, 48, 205, 59, 292], [405, 401, 311, 162, 242, 293, 126, 23, 322, 403, 363, 88, 2, 48, 205, 59, 292], [], [], [], [], [], []]
