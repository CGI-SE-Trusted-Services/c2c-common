var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":65,"id":6774,"methods":[{"el":47,"sc":2,"sl":45},{"el":51,"sc":2,"sl":49},{"el":63,"sc":2,"sl":56}],"name":"SignerInfoType","sl":36}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1010":{"methods":[{"sl":49}],"name":"Verify that multiple payload works for version 1 of secured DENM message","pass":true,"statements":[{"sl":50}]},"test_102":{"methods":[{"sl":49}],"name":"Generate version 2 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_105":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_13":{"methods":[{"sl":49},{"sl":56}],"name":"Verify interoperability with version 2 certificates generated by ETSI TS 10309603 test suite.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_134":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_15":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_152":{"methods":[{"sl":49}],"name":"Verify that self has bytevalue 0","pass":true,"statements":[{"sl":50}]},"test_158":{"methods":[{"sl":49}],"name":"Verify that multiple payload works for version 1 of secured CAM message","pass":true,"statements":[{"sl":50}]},"test_226":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_227":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_chain for 3","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_230":{"methods":[{"sl":49}],"name":"Verify that certificate_chain has bytevalue 3","pass":true,"statements":[{"sl":50}]},"test_242":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_259":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_28":{"methods":[{"sl":49}],"name":"Generate version 1 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":50}]},"test_281":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_283":{"methods":[{"sl":49}],"name":"Generate version 1 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_295":{"methods":[{"sl":49}],"name":"Generate version 1 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_306":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_350":{"methods":[{"sl":56}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_361":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_362":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_ecdsap256 has bytevalue 1","pass":true,"statements":[{"sl":50}]},"test_363":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_368":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that certificate signature R point normalises signature r value to X only","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_37":{"methods":[{"sl":49}],"name":"Generate version 2 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_38":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_438":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_448":{"methods":[{"sl":49}],"name":"Generate version 1 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_457":{"methods":[{"sl":49}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":50}]},"test_484":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate for 2","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_545":{"methods":[{"sl":56}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_556":{"methods":[{"sl":49}],"name":"Verify that certificate has bytevalue 2","pass":true,"statements":[{"sl":50}]},"test_569":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_572":{"methods":[{"sl":49}],"name":"Generate version 1 Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_576":{"methods":[{"sl":49}],"name":"Generate version 1 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":50}]},"test_579":{"methods":[{"sl":49}],"name":"Generate version 2 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_637":{"methods":[{"sl":49},{"sl":56}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_670":{"methods":[{"sl":49}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[1]","pass":true,"statements":[{"sl":50}]},"test_682":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_other_algorithm for 4","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_686":{"methods":[{"sl":49}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_699":{"methods":[{"sl":49}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":50}]},"test_715":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_723":{"methods":[{"sl":49}],"name":"Generate version 1 Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_746":{"methods":[{"sl":56}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_764":{"methods":[{"sl":49}],"name":"Generate version 1 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_798":{"methods":[{"sl":49}],"name":"Generate version 2 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":50}]},"test_819":{"methods":[{"sl":49}],"name":"Generate version 2 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_852":{"methods":[{"sl":49}],"name":"Generate version 1 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_853":{"methods":[{"sl":49},{"sl":56}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_855":{"methods":[{"sl":49}],"name":"Generate version 1 Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":50}]},"test_860":{"methods":[{"sl":49}],"name":"Generate version 2 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":50}]},"test_883":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns self for 0","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_899":{"methods":[{"sl":49}],"name":"Generate version 1 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_90":{"methods":[{"sl":49}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[0]","pass":true,"statements":[{"sl":50}]},"test_950":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_958":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_other_algorithm has bytevalue 4","pass":true,"statements":[{"sl":50}]},"test_973":{"methods":[{"sl":49}],"name":"Generate version 2 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_977":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_ecdsap256 for 1","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_995":{"methods":[{"sl":49}],"name":"Generate version 1 Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":50}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [152, 306, 448, 102, 90, 569, 438, 973, 281, 853, 958, 158, 852, 686, 361, 723, 230, 855, 13, 798, 556, 950, 242, 699, 259, 1010, 457, 362, 105, 15, 670, 295, 764, 819, 226, 860, 899, 28, 283, 579, 995, 637, 37, 572, 576, 368], [152, 306, 448, 102, 90, 569, 438, 973, 281, 853, 958, 158, 852, 686, 361, 723, 230, 855, 13, 798, 556, 950, 242, 699, 259, 1010, 457, 362, 105, 15, 670, 295, 764, 819, 226, 860, 899, 28, 283, 579, 995, 637, 37, 572, 576, 368], [], [], [], [], [], [306, 134, 853, 883, 361, 13, 242, 977, 363, 227, 682, 105, 15, 746, 38, 350, 484, 637, 715, 545, 368], [306, 134, 853, 883, 361, 13, 242, 977, 363, 227, 682, 105, 15, 746, 38, 350, 484, 637, 715, 545, 368], [306, 134, 853, 883, 361, 13, 242, 977, 363, 227, 682, 105, 15, 746, 38, 350, 484, 637, 715, 545, 368], [306, 134, 853, 883, 361, 13, 242, 977, 363, 227, 682, 105, 15, 746, 38, 350, 484, 637, 715, 545, 368], [], [], [], [], [], []]
