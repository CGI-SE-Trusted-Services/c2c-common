var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":65,"id":1711,"methods":[{"el":47,"sc":2,"sl":45},{"el":51,"sc":2,"sl":49},{"el":63,"sc":2,"sl":56}],"name":"SignerInfoType","sl":36}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":49},{"sl":56}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_103":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_105":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate for 2","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_108":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_114":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns self for 0","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_122":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_127":{"methods":[{"sl":49}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_132":{"methods":[{"sl":49}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":50}]},"test_168":{"methods":[{"sl":49}],"name":"Verify that certificate_chain has bytevalue 3","pass":true,"statements":[{"sl":50}]},"test_169":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_ecdsap256 for 1","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_171":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_chain for 3","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_174":{"methods":[{"sl":49}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_178":{"methods":[{"sl":49}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_179":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_181":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_182":{"methods":[{"sl":49}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_183":{"methods":[{"sl":49},{"sl":56}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_184":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_20":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_237":{"methods":[{"sl":49}],"name":"Verify that self has bytevalue 0","pass":true,"statements":[{"sl":50}]},"test_24":{"methods":[{"sl":56}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_256":{"methods":[{"sl":56}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_26":{"methods":[{"sl":49},{"sl":56}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_292":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_313":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_320":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_324":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_ecdsap256 has bytevalue 1","pass":true,"statements":[{"sl":50}]},"test_342":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_36":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_365":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":50}]},"test_377":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_38":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_39":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_other_algorithm for 4","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_392":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_398":{"methods":[{"sl":56}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_406":{"methods":[{"sl":49}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_55":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_64":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_other_algorithm has bytevalue 4","pass":true,"statements":[{"sl":50}]},"test_79":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":50}]},"test_8":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_82":{"methods":[{"sl":49}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_83":{"methods":[{"sl":49}],"name":"Verify that certificate has bytevalue 2","pass":true,"statements":[{"sl":50}]},"test_90":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_92":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_93":{"methods":[{"sl":49}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":50}]},"test_94":{"methods":[{"sl":49}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_97":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_99":{"methods":[{"sl":49}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":50}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [26, 127, 174, 108, 324, 103, 83, 92, 122, 365, 183, 79, 168, 342, 182, 36, 1, 377, 97, 392, 184, 64, 20, 406, 181, 93, 38, 237, 99, 178, 313, 90, 94, 132, 292, 82], [26, 127, 174, 108, 324, 103, 83, 92, 122, 365, 183, 79, 168, 342, 182, 36, 1, 377, 97, 392, 184, 64, 20, 406, 181, 93, 38, 237, 99, 178, 313, 90, 94, 132, 292, 82], [], [], [], [], [], [171, 26, 8, 179, 55, 103, 169, 39, 92, 256, 398, 183, 36, 1, 320, 97, 105, 24, 20, 114], [171, 26, 8, 179, 55, 103, 169, 39, 92, 256, 398, 183, 36, 1, 320, 97, 105, 24, 20, 114], [171, 26, 8, 179, 55, 103, 169, 39, 92, 256, 398, 183, 36, 1, 320, 97, 105, 24, 20, 114], [171, 26, 8, 179, 55, 103, 169, 39, 92, 256, 398, 183, 36, 1, 320, 97, 105, 24, 20, 114], [], [], [], [], [], []]
