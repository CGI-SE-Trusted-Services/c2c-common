var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":65,"id":6577,"methods":[{"el":47,"sc":2,"sl":45},{"el":51,"sc":2,"sl":49},{"el":63,"sc":2,"sl":56}],"name":"SignerInfoType","sl":36}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":49},{"sl":56}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_159":{"methods":[{"sl":49}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_253":{"methods":[{"sl":49}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_28":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_283":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_ecdsap256 has bytevalue 1","pass":true,"statements":[{"sl":50}]},"test_285":{"methods":[{"sl":56}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_292":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_3":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_315":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_320":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_other_algorithm has bytevalue 4","pass":true,"statements":[{"sl":50}]},"test_34":{"methods":[{"sl":49}],"name":"Verify that certificate has bytevalue 2","pass":true,"statements":[{"sl":50}]},"test_353":{"methods":[{"sl":49},{"sl":56}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_359":{"methods":[{"sl":49}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":50}]},"test_379":{"methods":[{"sl":49}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_450":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_479":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_501":{"methods":[{"sl":49}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":50}]},"test_509":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_chain for 3","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_530":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":50}]},"test_575":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_597":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_611":{"methods":[{"sl":49}],"name":"Verify that certificate_chain has bytevalue 3","pass":true,"statements":[{"sl":50}]},"test_622":{"methods":[{"sl":56}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_66":{"methods":[{"sl":49}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_669":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_679":{"methods":[{"sl":49}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":50}]},"test_682":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_694":{"methods":[{"sl":56}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_709":{"methods":[{"sl":49}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_719":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_780":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_other_algorithm for 4","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_808":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":50}]},"test_845":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns self for 0","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_846":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_857":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_863":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_868":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_899":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_ecdsap256 for 1","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_902":{"methods":[{"sl":49}],"name":"Verify that self has bytevalue 0","pass":true,"statements":[{"sl":50}]},"test_911":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate for 2","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_913":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_915":{"methods":[{"sl":49}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_949":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_95":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_959":{"methods":[{"sl":49}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_965":{"methods":[{"sl":49},{"sl":56}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_973":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_99":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [868, 575, 99, 450, 808, 857, 719, 292, 283, 3, 253, 501, 353, 915, 34, 66, 863, 320, 379, 105, 973, 611, 669, 709, 846, 902, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [868, 575, 99, 450, 808, 857, 719, 292, 283, 3, 253, 501, 353, 915, 34, 66, 863, 320, 379, 105, 973, 611, 669, 709, 846, 902, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [], [], [], [], [], [575, 780, 292, 911, 509, 913, 622, 949, 694, 353, 597, 863, 285, 105, 845, 846, 95, 28, 965, 899], [575, 780, 292, 911, 509, 913, 622, 949, 694, 353, 597, 863, 285, 105, 845, 846, 95, 28, 965, 899], [575, 780, 292, 911, 509, 913, 622, 949, 694, 353, 597, 863, 285, 105, 845, 846, 95, 28, 965, 899], [575, 780, 292, 911, 509, 913, 622, 949, 694, 353, 597, 863, 285, 105, 845, 846, 95, 28, 965, 899], [], [], [], [], [], []]
