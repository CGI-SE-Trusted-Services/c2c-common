var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":65,"id":1711,"methods":[{"el":47,"sc":2,"sl":45},{"el":51,"sc":2,"sl":49},{"el":63,"sc":2,"sl":56}],"name":"SignerInfoType","sl":36}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_1":{"methods":[{"sl":49}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":50}]},"test_116":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_ecdsap256 for 1","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_117":{"methods":[{"sl":49}],"name":"Verify that self has bytevalue 0","pass":true,"statements":[{"sl":50}]},"test_119":{"methods":[{"sl":49},{"sl":56}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_121":{"methods":[{"sl":49}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_123":{"methods":[{"sl":49}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_124":{"methods":[{"sl":49},{"sl":56}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_14":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_142":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_148":{"methods":[{"sl":56}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_15":{"methods":[{"sl":49}],"name":"Verify that certificate has bytevalue 2","pass":true,"statements":[{"sl":50}]},"test_150":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_162":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_20":{"methods":[{"sl":49}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_202":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns self for 0","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_203":{"methods":[{"sl":49}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":50}]},"test_207":{"methods":[{"sl":49}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":50}]},"test_214":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_chain for 3","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_216":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_231":{"methods":[{"sl":56}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_252":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_26":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_265":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_266":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_28":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_288":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":50}]},"test_289":{"methods":[{"sl":49},{"sl":56}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_296":{"methods":[{"sl":49}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":50}]},"test_299":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_ecdsap256 has bytevalue 1","pass":true,"statements":[{"sl":50}]},"test_327":{"methods":[{"sl":49}],"name":"Verify serialization","pass":true,"statements":[{"sl":50}]},"test_341":{"methods":[{"sl":49}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":50}]},"test_350":{"methods":[{"sl":49},{"sl":56}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_366":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_371":{"methods":[{"sl":49}],"name":"Verify that certificate_chain has bytevalue 3","pass":true,"statements":[{"sl":50}]},"test_387":{"methods":[{"sl":49}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":50}]},"test_394":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":50}]},"test_395":{"methods":[{"sl":49}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_49":{"methods":[{"sl":49}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":50}]},"test_50":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_56":{"methods":[{"sl":56}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_57":{"methods":[{"sl":49},{"sl":56}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":50},{"sl":57},{"sl":58},{"sl":59}]},"test_63":{"methods":[{"sl":56}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_72":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate for 2","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]},"test_80":{"methods":[{"sl":49}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":50}]},"test_82":{"methods":[{"sl":49}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":50}]},"test_84":{"methods":[{"sl":49}],"name":"Verify that certificate_digest_with_other_algorithm has bytevalue 4","pass":true,"statements":[{"sl":50}]},"test_90":{"methods":[{"sl":56}],"name":"Verify that SignerInfoType.getByValue returns certificate_digest_with_other_algorithm for 4","pass":true,"statements":[{"sl":57},{"sl":58},{"sl":59}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [288, 123, 395, 289, 327, 299, 57, 15, 371, 203, 387, 207, 350, 162, 1, 119, 82, 265, 216, 80, 0, 366, 20, 121, 142, 28, 14, 296, 124, 341, 394, 150, 84, 117, 26, 49], [288, 123, 395, 289, 327, 299, 57, 15, 371, 203, 387, 207, 350, 162, 1, 119, 82, 265, 216, 80, 0, 366, 20, 121, 142, 28, 14, 296, 124, 341, 394, 150, 84, 117, 26, 49], [], [], [], [], [], [266, 289, 252, 148, 57, 90, 56, 231, 50, 202, 350, 119, 265, 0, 116, 72, 14, 214, 124, 63], [266, 289, 252, 148, 57, 90, 56, 231, 50, 202, 350, 119, 265, 0, 116, 72, 14, 214, 124, 63], [266, 289, 252, 148, 57, 90, 56, 231, 50, 202, 350, 119, 265, 0, 116, 72, 14, 214, 124, 63], [266, 289, 252, 148, 57, 90, 56, 231, 50, 202, 350, 119, 265, 0, 116, 72, 14, 214, 124, 63], [], [], [], [], [], []]
