var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":86,"id":6148,"methods":[{"el":54,"sc":2,"sl":52},{"el":63,"sc":2,"sl":61},{"el":71,"sc":2,"sl":69},{"el":79,"sc":2,"sl":76},{"el":84,"sc":2,"sl":81}],"name":"HashedId8","sl":36}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":52},{"sl":61},{"sl":76}],"name":"Generate version 2 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":62},{"sl":78}]},"test_105":{"methods":[{"sl":61},{"sl":69},{"sl":76},{"sl":81}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":62},{"sl":70},{"sl":78},{"sl":83}]},"test_13":{"methods":[{"sl":69},{"sl":76},{"sl":81}],"name":"Verify interoperability with version 2 certificates generated by ETSI TS 10309603 test suite.","pass":true,"statements":[{"sl":70},{"sl":78},{"sl":83}]},"test_134":{"methods":[{"sl":69},{"sl":76}],"name":"Verify deserialization","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_15":{"methods":[{"sl":69},{"sl":76}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_158":{"methods":[{"sl":52},{"sl":76}],"name":"Verify that multiple payload works for version 1 of secured CAM message","pass":true,"statements":[{"sl":53},{"sl":78}]},"test_22":{"methods":[{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":83}]},"test_236":{"methods":[{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":83}]},"test_242":{"methods":[{"sl":61},{"sl":69},{"sl":76}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":62},{"sl":70},{"sl":78}]},"test_249":{"methods":[{"sl":69},{"sl":76}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_306":{"methods":[{"sl":52},{"sl":69},{"sl":76}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":53},{"sl":70},{"sl":78}]},"test_31":{"methods":[{"sl":76}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":78}]},"test_350":{"methods":[{"sl":69},{"sl":76}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_361":{"methods":[{"sl":69},{"sl":76}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_363":{"methods":[{"sl":69},{"sl":76}],"name":"Verify deserialization","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_368":{"methods":[{"sl":52},{"sl":76}],"name":"Verify that certificate signature R point normalises signature r value to X only","pass":true,"statements":[{"sl":53},{"sl":78}]},"test_37":{"methods":[{"sl":52},{"sl":61},{"sl":76}],"name":"Generate version 2 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":53},{"sl":62},{"sl":78}]},"test_43":{"methods":[{"sl":61},{"sl":76}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":62},{"sl":78}]},"test_448":{"methods":[{"sl":52},{"sl":61},{"sl":76}],"name":"Generate version 1 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":62},{"sl":78}]},"test_457":{"methods":[{"sl":52},{"sl":61},{"sl":76}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":53},{"sl":62},{"sl":78}]},"test_505":{"methods":[{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":83}]},"test_545":{"methods":[{"sl":69},{"sl":76}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_637":{"methods":[{"sl":69},{"sl":76}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_686":{"methods":[{"sl":52},{"sl":76}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":53},{"sl":78}]},"test_699":{"methods":[{"sl":61},{"sl":69},{"sl":76},{"sl":81}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":62},{"sl":70},{"sl":78},{"sl":83}]},"test_715":{"methods":[{"sl":69},{"sl":76}],"name":"Verify deserialization","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_721":{"methods":[{"sl":61},{"sl":76}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":62},{"sl":78}]},"test_746":{"methods":[{"sl":69},{"sl":76}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_764":{"methods":[{"sl":52},{"sl":61},{"sl":76}],"name":"Generate version 1 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":62},{"sl":78}]},"test_768":{"methods":[{"sl":61},{"sl":76}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":62},{"sl":78}]},"test_818":{"methods":[{"sl":61},{"sl":76},{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":62},{"sl":78},{"sl":83}]},"test_819":{"methods":[{"sl":52},{"sl":61},{"sl":76}],"name":"Generate version 2 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":53},{"sl":62},{"sl":78}]},"test_852":{"methods":[{"sl":52},{"sl":76}],"name":"Generate version 1 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":53},{"sl":78}]},"test_853":{"methods":[{"sl":69},{"sl":76}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_884":{"methods":[{"sl":81}],"name":"Verify toString","pass":true,"statements":[{"sl":83}]},"test_913":{"methods":[{"sl":69},{"sl":76}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[{"sl":70},{"sl":78}]},"test_973":{"methods":[{"sl":52},{"sl":61},{"sl":76}],"name":"Generate version 2 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":53},{"sl":62},{"sl":78}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [457, 306, 448, 102, 764, 819, 973, 158, 852, 686, 37, 368], [457, 306, 448, 102, 764, 819, 973, 158, 852, 686, 37, 368], [], [], [], [], [], [], [], [457, 818, 105, 448, 43, 102, 764, 819, 973, 721, 768, 37, 242, 699], [457, 818, 105, 448, 43, 102, 764, 819, 973, 721, 768, 37, 242, 699], [], [], [], [], [], [], [249, 105, 306, 134, 15, 853, 746, 350, 913, 361, 637, 13, 715, 545, 242, 699, 363], [249, 105, 306, 134, 15, 853, 746, 350, 913, 361, 637, 13, 715, 545, 242, 699, 363], [], [], [], [], [], [249, 457, 818, 105, 306, 448, 43, 102, 134, 15, 764, 819, 973, 31, 853, 721, 746, 768, 158, 350, 852, 686, 913, 361, 637, 37, 13, 715, 545, 242, 368, 699, 363], [], [249, 457, 818, 105, 306, 448, 43, 102, 134, 15, 764, 819, 973, 31, 853, 721, 746, 768, 158, 350, 852, 686, 913, 361, 637, 37, 13, 715, 545, 242, 368, 699, 363], [], [], [818, 105, 884, 505, 22, 236, 13, 699], [], [818, 105, 884, 505, 22, 236, 13, 699], [], [], []]
