var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":57,"id":1118,"methods":[{"el":34,"sc":2,"sl":32},{"el":42,"sc":2,"sl":40},{"el":50,"sc":2,"sl":47},{"el":55,"sc":2,"sl":52}],"name":"HashedId8","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_119":{"methods":[{"sl":40},{"sl":47}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_123":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_124":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_125":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_138":{"methods":[{"sl":47}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":49}]},"test_14":{"methods":[{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_148":{"methods":[{"sl":40},{"sl":47}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_150":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_16":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_162":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_2":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_20":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_216":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_265":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_266":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_274":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_283":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_289":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_300":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_315":{"methods":[{"sl":40},{"sl":47}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_350":{"methods":[{"sl":40},{"sl":47}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_362":{"methods":[{"sl":32},{"sl":47},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":49},{"sl":54}]},"test_387":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_394":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_396":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_42":{"methods":[{"sl":32},{"sl":47}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_50":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_56":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_57":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_63":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [123, 289, 265, 216, 42, 20, 57, 300, 387, 394, 16, 150, 362, 162], [123, 289, 265, 216, 42, 20, 57, 300, 387, 394, 16, 150, 362, 162], [], [], [], [], [], [], [266, 119, 289, 315, 265, 148, 0, 57, 14, 56, 387, 124, 50, 350, 63, 2], [266, 119, 289, 315, 265, 148, 0, 57, 14, 56, 387, 124, 50, 350, 63, 2], [], [], [], [], [], [123, 266, 119, 289, 315, 265, 216, 42, 148, 0, 20, 57, 14, 56, 300, 387, 124, 394, 50, 16, 150, 350, 138, 362, 63, 2, 162], [], [123, 266, 119, 289, 315, 265, 216, 42, 148, 0, 20, 57, 14, 56, 300, 387, 124, 394, 50, 16, 150, 350, 138, 362, 63, 2, 162], [], [], [283, 274, 396, 57, 387, 125, 362], [], [283, 274, 396, 57, 387, 125, 362], [], [], []]
