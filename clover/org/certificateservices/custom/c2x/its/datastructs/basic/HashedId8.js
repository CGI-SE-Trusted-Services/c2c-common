var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":57,"id":1118,"methods":[{"el":34,"sc":2,"sl":32},{"el":42,"sc":2,"sl":40},{"el":50,"sc":2,"sl":47},{"el":55,"sc":2,"sl":52}],"name":"HashedId8","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":40},{"sl":47}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_103":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_132":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_154":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_178":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_179":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_183":{"methods":[{"sl":40},{"sl":47}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_20":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_233":{"methods":[{"sl":32},{"sl":47},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":49},{"sl":54}]},"test_235":{"methods":[{"sl":47}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":49}]},"test_24":{"methods":[{"sl":40},{"sl":47}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_248":{"methods":[{"sl":32},{"sl":47}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_26":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_297":{"methods":[{"sl":40},{"sl":47}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_301":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_308":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_320":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_342":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_348":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_36":{"methods":[{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_38":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_383":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_392":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_397":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_398":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_47":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_55":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_90":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_92":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_94":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_97":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":41},{"sl":49}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [397, 392, 103, 92, 20, 348, 38, 178, 90, 233, 94, 342, 132, 248], [397, 392, 103, 92, 20, 348, 38, 178, 90, 233, 94, 342, 132, 248], [], [], [], [], [], [], [36, 1, 297, 26, 320, 97, 179, 55, 103, 308, 92, 24, 20, 398, 183, 132], [36, 1, 297, 26, 320, 97, 179, 55, 103, 308, 92, 24, 20, 398, 183, 132], [], [], [], [], [], [235, 397, 36, 1, 297, 26, 320, 97, 179, 392, 55, 103, 308, 92, 24, 20, 348, 38, 398, 183, 178, 90, 233, 94, 342, 132, 248], [], [235, 397, 36, 1, 297, 26, 320, 97, 179, 392, 55, 103, 308, 92, 24, 20, 348, 38, 398, 183, 178, 90, 233, 94, 342, 132, 248], [], [], [301, 47, 20, 233, 154, 383, 132], [], [301, 47, 20, 233, 154, 383, 132], [], [], []]
