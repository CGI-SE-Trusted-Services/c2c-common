var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":57,"id":1118,"methods":[{"el":34,"sc":2,"sl":32},{"el":42,"sc":2,"sl":40},{"el":50,"sc":2,"sl":47},{"el":55,"sc":2,"sl":52}],"name":"HashedId8","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_109":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_162":{"methods":[{"sl":40},{"sl":47}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_182":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_183":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_2":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_205":{"methods":[{"sl":40},{"sl":47}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_21":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_220":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_221":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_231":{"methods":[{"sl":32},{"sl":47},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":49},{"sl":54}]},"test_25":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_253":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_260":{"methods":[{"sl":32},{"sl":47}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_275":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_279":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_288":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_311":{"methods":[{"sl":40},{"sl":47}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_322":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_363":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_375":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_401":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_406":{"methods":[{"sl":47}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":49}]},"test_50":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_56":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_59":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_6":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_61":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_73":{"methods":[{"sl":40},{"sl":47}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_83":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_88":{"methods":[{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_90":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [279, 56, 90, 363, 50, 109, 6, 231, 59, 25, 275, 288, 260, 182], [279, 56, 90, 363, 50, 109, 6, 231, 59, 25, 275, 288, 260, 182], [], [], [], [], [], [], [311, 322, 162, 401, 363, 183, 88, 2, 253, 83, 205, 59, 25, 73, 61, 182], [311, 322, 162, 401, 363, 183, 88, 2, 253, 83, 205, 59, 25, 73, 61, 182], [], [], [], [], [], [311, 322, 162, 401, 279, 56, 90, 363, 50, 183, 88, 109, 6, 2, 253, 231, 83, 205, 59, 25, 275, 73, 288, 406, 61, 260, 182], [], [311, 322, 162, 401, 279, 56, 90, 363, 50, 183, 88, 109, 6, 2, 253, 231, 83, 205, 59, 25, 275, 73, 288, 406, 61, 260, 182], [], [], [375, 363, 221, 231, 21, 220, 182], [], [375, 363, 221, 231, 21, 220, 182], [], [], []]
