var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":57,"id":1118,"methods":[{"el":34,"sc":2,"sl":32},{"el":42,"sc":2,"sl":40},{"el":50,"sc":2,"sl":47},{"el":55,"sc":2,"sl":52}],"name":"HashedId8","sl":25}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_116":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_123":{"methods":[{"sl":40},{"sl":47}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_124":{"methods":[{"sl":32},{"sl":47},{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":33},{"sl":49},{"sl":54}]},"test_13":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_135":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_152":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_154":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_158":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_166":{"methods":[{"sl":40},{"sl":47}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_208":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_209":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_216":{"methods":[{"sl":40},{"sl":47}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_220":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_221":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_227":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_235":{"methods":[{"sl":32},{"sl":47}],"name":"Verify the correct octet length of the HashedId3","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_248":{"methods":[{"sl":52}],"name":"Verify toString","pass":true,"statements":[{"sl":54}]},"test_284":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_322":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_332":{"methods":[{"sl":32},{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_34":{"methods":[{"sl":40},{"sl":47}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_405":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_64":{"methods":[{"sl":32},{"sl":40},{"sl":47},{"sl":52}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49},{"sl":54}]},"test_7":{"methods":[{"sl":32},{"sl":47}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":33},{"sl":49}]},"test_75":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_76":{"methods":[{"sl":40},{"sl":47}],"name":"Verify the correct octet length of the HashedId8","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_81":{"methods":[{"sl":32},{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":33},{"sl":41},{"sl":49}]},"test_84":{"methods":[{"sl":40},{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_85":{"methods":[{"sl":40},{"sl":47}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":41},{"sl":49}]},"test_95":{"methods":[{"sl":47}],"name":"Verify IllegalArgumentException is thrown if to small hash value is given.","pass":true,"statements":[{"sl":49}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [227, 81, 332, 158, 124, 235, 152, 13, 116, 284, 405, 135, 7, 64], [227, 81, 332, 158, 124, 235, 152, 13, 116, 284, 405, 135, 7, 64], [], [], [], [], [], [], [85, 81, 105, 158, 123, 166, 152, 75, 216, 221, 322, 84, 208, 34, 76, 64], [85, 81, 105, 158, 123, 166, 152, 75, 216, 221, 322, 84, 208, 34, 76, 64], [], [], [], [], [], [227, 85, 81, 105, 332, 158, 124, 235, 123, 166, 152, 13, 95, 75, 116, 284, 216, 221, 322, 405, 135, 84, 7, 208, 34, 76, 64], [], [227, 85, 81, 105, 332, 158, 124, 235, 123, 166, 152, 13, 95, 75, 116, 284, 216, 221, 322, 405, 135, 84, 7, 208, 34, 76, 64], [], [], [154, 209, 158, 124, 248, 220, 64], [], [154, 209, 158, 124, 248, 220, 64], [], [], []]
