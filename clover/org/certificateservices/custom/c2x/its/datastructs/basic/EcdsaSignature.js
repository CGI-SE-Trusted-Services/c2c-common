var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":105,"id":855,"methods":[{"el":52,"sc":2,"sl":45},{"el":63,"sc":2,"sl":61},{"el":70,"sc":2,"sl":68},{"el":77,"sc":2,"sl":75},{"el":84,"sc":2,"sl":80},{"el":92,"sc":2,"sl":86},{"el":102,"sc":2,"sl":97}],"name":"EcdsaSignature","sl":31}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":99}]},"test_103":{"methods":[{"sl":61},{"sl":68}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_105":{"methods":[{"sl":61},{"sl":86}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_107":{"methods":[{"sl":45},{"sl":68},{"sl":75}],"name":"Test to generate ECDSA Signature and then verify the signature for algorithm: ecdsa_nistp256_with_sha256","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76}]},"test_116":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_120":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_123":{"methods":[{"sl":61},{"sl":86}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_13":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_135":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_142":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with uncompressed ecc point","pass":true,"statements":[{"sl":69}]},"test_150":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":86}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_152":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_158":{"methods":[{"sl":61},{"sl":80},{"sl":86}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":62},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_166":{"methods":[{"sl":61},{"sl":80},{"sl":86}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":62},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_170":{"methods":[{"sl":80}],"name":"Verify serialization","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_184":{"methods":[{"sl":80}],"name":"Verify serialization","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_185":{"methods":[{"sl":45},{"sl":68},{"sl":75}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76}]},"test_200":{"methods":[{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":99}]},"test_202":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_208":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_209":{"methods":[{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":99}]},"test_214":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_0","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_216":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_221":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_222":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType uncompressed","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_237":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType x_coordinate_only","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_244":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_271":{"methods":[{"sl":61},{"sl":86}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_274":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_275":{"methods":[{"sl":80}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_284":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_289":{"methods":[{"sl":80}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_290":{"methods":[{"sl":45},{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":99}]},"test_295":{"methods":[{"sl":45},{"sl":80}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":82},{"sl":83}]},"test_301":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_302":{"methods":[{"sl":45},{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":99}]},"test_314":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_317":{"methods":[{"sl":61}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":62}]},"test_322":{"methods":[{"sl":61},{"sl":80},{"sl":86}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":62},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_324":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_1 ecc point","pass":true,"statements":[{"sl":69}]},"test_34":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":86}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_341":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with x_coordinate_only ecc point","pass":true,"statements":[{"sl":69}]},"test_353":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_1","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_364":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_389":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":86}],"name":"Verify deserialization of EcdsaSignature","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_397":{"methods":[{"sl":80}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_403":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_405":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_406":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_43":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly no signature trailer field","pass":true,"statements":[{"sl":69}]},"test_45":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_0 ecc point","pass":true,"statements":[{"sl":69}]},"test_49":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_54":{"methods":[{"sl":45},{"sl":80}],"name":"Verify serialization of EcdsaSignature","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":82},{"sl":83}]},"test_64":{"methods":[{"sl":80}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_7":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_72":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":49},{"sl":51},{"sl":62},{"sl":69},{"sl":76}]},"test_73":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_81":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_85":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_88":{"methods":[{"sl":80}],"name":"Verify serialization","pass":true,"statements":[{"sl":82},{"sl":83}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [120, 73, 13, 364, 302, 284, 405, 403, 7, 72, 274, 85, 314, 81, 54, 406, 107, 185, 290, 295, 244, 152, 116, 135, 301], [120, 73, 13, 364, 302, 284, 405, 403, 7, 72, 274, 85, 314, 81, 54, 406, 107, 185, 290, 295, 244, 152, 116, 135, 301], [120, 73, 13, 364, 302, 284, 405, 403, 7, 72, 274, 85, 314, 81, 54, 406, 107, 185, 290, 295, 244, 152, 116, 135, 301], [120, 73, 13, 364, 302, 284, 405, 403, 7, 72, 274, 85, 314, 81, 54, 406, 107, 185, 290, 295, 244, 152, 116, 135, 301], [72], [], [120, 73, 13, 364, 302, 284, 405, 403, 7, 72, 274, 85, 314, 81, 54, 406, 107, 185, 290, 295, 244, 152, 116, 135, 301], [], [], [], [], [], [], [], [], [], [49, 158, 222, 389, 103, 317, 322, 208, 202, 271, 34, 353, 72, 85, 81, 105, 166, 123, 152, 150, 216, 237, 221, 214], [49, 158, 222, 389, 103, 317, 322, 208, 202, 271, 34, 353, 72, 85, 81, 105, 166, 123, 152, 150, 216, 237, 221, 214], [], [], [], [], [], [142, 120, 73, 222, 324, 13, 389, 364, 284, 103, 405, 403, 341, 7, 34, 45, 353, 72, 274, 85, 314, 81, 406, 107, 185, 244, 152, 116, 150, 216, 237, 135, 43, 301, 214], [142, 120, 73, 222, 324, 13, 389, 364, 284, 103, 405, 403, 341, 7, 34, 45, 353, 72, 274, 85, 314, 81, 406, 107, 185, 244, 152, 116, 150, 216, 237, 135, 43, 301, 214], [], [], [], [], [], [120, 73, 13, 389, 364, 284, 405, 403, 7, 34, 72, 274, 85, 314, 81, 406, 107, 185, 244, 152, 116, 150, 216, 135, 301], [120, 73, 13, 389, 364, 284, 405, 403, 7, 34, 72, 274, 85, 314, 81, 406, 107, 185, 244, 152, 116, 150, 216, 135, 301], [], [], [], [120, 158, 73, 88, 13, 364, 289, 284, 275, 322, 405, 403, 7, 184, 274, 85, 314, 81, 54, 406, 170, 295, 244, 166, 152, 397, 116, 216, 135, 301, 64], [], [120, 158, 73, 88, 13, 364, 289, 284, 275, 322, 405, 403, 7, 184, 274, 85, 314, 81, 54, 406, 170, 295, 244, 166, 152, 397, 116, 216, 135, 301, 64], [120, 158, 73, 88, 13, 364, 289, 284, 275, 322, 405, 403, 7, 184, 274, 85, 314, 81, 54, 406, 170, 295, 244, 166, 152, 397, 116, 216, 135, 301, 64], [], [], [49, 158, 389, 322, 208, 202, 271, 34, 85, 81, 105, 166, 123, 152, 150, 216, 221], [], [49, 158, 389, 322, 208, 202, 271, 34, 85, 81, 105, 166, 123, 152, 150, 216, 221], [49, 158, 389, 322, 208, 202, 271, 34, 85, 81, 105, 166, 123, 152, 150, 216, 221], [49, 158, 389, 322, 208, 202, 271, 34, 85, 81, 105, 166, 123, 152, 150, 216, 221], [49, 158, 389, 322, 208, 202, 271, 34, 85, 81, 105, 166, 123, 152, 150, 216, 221], [], [], [], [], [], [209, 302, 200, 290, 102], [], [209, 302, 200, 290, 102], [], [], [], [], [], []]
