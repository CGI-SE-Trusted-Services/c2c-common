var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":105,"id":855,"methods":[{"el":52,"sc":2,"sl":45},{"el":63,"sc":2,"sl":61},{"el":70,"sc":2,"sl":68},{"el":77,"sc":2,"sl":75},{"el":84,"sc":2,"sl":80},{"el":92,"sc":2,"sl":86},{"el":102,"sc":2,"sl":97}],"name":"EcdsaSignature","sl":31}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":61},{"sl":80},{"sl":86}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":62},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_1":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_115":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":86}],"name":"Verify deserialization of EcdsaSignature","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_119":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":86}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_121":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_123":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_124":{"methods":[{"sl":61},{"sl":80},{"sl":86}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":62},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_133":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_0 ecc point","pass":true,"statements":[{"sl":69}]},"test_139":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType x_coordinate_only","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_14":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_142":{"methods":[{"sl":80}],"name":"Verify serialization","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_143":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly no signature trailer field","pass":true,"statements":[{"sl":69}]},"test_144":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with uncompressed ecc point","pass":true,"statements":[{"sl":69}]},"test_148":{"methods":[{"sl":61},{"sl":86}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_150":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_162":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_198":{"methods":[{"sl":45},{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":99}]},"test_20":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_203":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_206":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":86}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_207":{"methods":[{"sl":45},{"sl":68},{"sl":75}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76}]},"test_216":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_231":{"methods":[{"sl":61},{"sl":86}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_252":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_258":{"methods":[{"sl":61}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":62}]},"test_26":{"methods":[{"sl":80}],"name":"Verify serialization","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_261":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_1","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_262":{"methods":[{"sl":45},{"sl":68},{"sl":75}],"name":"Test to generate ECDSA Signature and then verify the signature for algorithm: ecdsa_nistp256_with_sha256","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76}]},"test_265":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_266":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_28":{"methods":[{"sl":80}],"name":"Verify serialization","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_283":{"methods":[{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":99}]},"test_288":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_289":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_296":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_297":{"methods":[{"sl":80}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_336":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType uncompressed","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_341":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_350":{"methods":[{"sl":61},{"sl":68},{"sl":75},{"sl":80},{"sl":86}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":62},{"sl":69},{"sl":76},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_353":{"methods":[{"sl":45},{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":99}]},"test_358":{"methods":[{"sl":45},{"sl":80}],"name":"Verify serialization of EcdsaSignature","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":82},{"sl":83}]},"test_364":{"methods":[{"sl":45},{"sl":61},{"sl":68},{"sl":75}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":49},{"sl":51},{"sl":62},{"sl":69},{"sl":76}]},"test_365":{"methods":[{"sl":61},{"sl":68}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_0","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_366":{"methods":[{"sl":80}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_37":{"methods":[{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":99}]},"test_373":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_387":{"methods":[{"sl":80}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":82},{"sl":83}]},"test_394":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_395":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_399":{"methods":[{"sl":97}],"name":"Verify toString","pass":true,"statements":[{"sl":99}]},"test_403":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with x_coordinate_only ecc point","pass":true,"statements":[{"sl":69}]},"test_49":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_56":{"methods":[{"sl":61},{"sl":86}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_57":{"methods":[{"sl":61},{"sl":80},{"sl":86}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":62},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_63":{"methods":[{"sl":61},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_68":{"methods":[{"sl":45},{"sl":80}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":82},{"sl":83}]},"test_69":{"methods":[{"sl":68}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_1 ecc point","pass":true,"statements":[{"sl":69}]},"test_71":{"methods":[{"sl":61},{"sl":68}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":62},{"sl":69}]},"test_80":{"methods":[{"sl":45},{"sl":68},{"sl":75},{"sl":80}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":51},{"sl":69},{"sl":76},{"sl":82},{"sl":83}]},"test_82":{"methods":[{"sl":80}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":82},{"sl":83}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [288, 123, 395, 289, 364, 203, 358, 68, 353, 207, 162, 1, 265, 216, 80, 262, 121, 20, 14, 296, 341, 394, 150, 49, 198], [288, 123, 395, 289, 364, 203, 358, 68, 353, 207, 162, 1, 265, 216, 80, 262, 121, 20, 14, 296, 341, 394, 150, 49, 198], [288, 123, 395, 289, 364, 203, 358, 68, 353, 207, 162, 1, 265, 216, 80, 262, 121, 20, 14, 296, 341, 394, 150, 49, 198], [288, 123, 395, 289, 364, 203, 358, 68, 353, 207, 162, 1, 265, 216, 80, 262, 121, 20, 14, 296, 341, 394, 150, 49, 198], [364], [], [288, 123, 395, 289, 364, 203, 358, 68, 353, 207, 162, 1, 265, 216, 80, 262, 121, 20, 14, 296, 341, 394, 150, 49, 198], [], [], [], [], [], [], [], [], [], [115, 266, 139, 289, 252, 261, 364, 148, 336, 57, 258, 206, 56, 231, 350, 373, 71, 119, 265, 0, 365, 14, 124, 63], [115, 266, 139, 289, 252, 261, 364, 148, 336, 57, 258, 206, 56, 231, 350, 373, 71, 119, 265, 0, 365, 14, 124, 63], [], [], [], [], [], [115, 288, 123, 139, 403, 143, 395, 289, 261, 364, 336, 206, 203, 144, 69, 133, 207, 350, 162, 71, 119, 1, 265, 216, 80, 262, 365, 121, 20, 14, 296, 341, 394, 150, 49], [115, 288, 123, 139, 403, 143, 395, 289, 261, 364, 336, 206, 203, 144, 69, 133, 207, 350, 162, 71, 119, 1, 265, 216, 80, 262, 365, 121, 20, 14, 296, 341, 394, 150, 49], [], [], [], [], [], [115, 288, 123, 395, 289, 364, 206, 203, 207, 350, 162, 119, 1, 265, 216, 80, 262, 121, 20, 14, 296, 341, 394, 150, 49], [115, 288, 123, 395, 289, 364, 206, 203, 207, 350, 162, 119, 1, 265, 216, 80, 262, 121, 20, 14, 296, 341, 394, 150, 49], [], [], [], [288, 123, 395, 289, 57, 203, 387, 358, 68, 350, 297, 162, 1, 82, 265, 216, 80, 0, 366, 121, 20, 142, 28, 14, 296, 124, 341, 394, 150, 26, 49], [], [288, 123, 395, 289, 57, 203, 387, 358, 68, 350, 297, 162, 1, 82, 265, 216, 80, 0, 366, 121, 20, 142, 28, 14, 296, 124, 341, 394, 150, 26, 49], [288, 123, 395, 289, 57, 203, 387, 358, 68, 350, 297, 162, 1, 82, 265, 216, 80, 0, 366, 121, 20, 142, 28, 14, 296, 124, 341, 394, 150, 26, 49], [], [], [115, 266, 289, 252, 148, 57, 206, 56, 231, 350, 373, 119, 265, 0, 14, 124, 63], [], [115, 266, 289, 252, 148, 57, 206, 56, 231, 350, 373, 119, 265, 0, 14, 124, 63], [115, 266, 289, 252, 148, 57, 206, 56, 231, 350, 373, 119, 265, 0, 14, 124, 63], [115, 266, 289, 252, 148, 57, 206, 56, 231, 350, 373, 119, 265, 0, 14, 124, 63], [115, 266, 289, 252, 148, 57, 206, 56, 231, 350, 373, 119, 265, 0, 14, 124, 63], [], [], [], [], [], [399, 283, 353, 37, 198], [], [399, 283, 353, 37, 198], [], [], [], [], [], []]
