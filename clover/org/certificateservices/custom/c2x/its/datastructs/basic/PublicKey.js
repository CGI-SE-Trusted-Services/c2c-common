var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":173,"id":6191,"methods":[{"el":59,"sc":2,"sl":57},{"el":72,"sc":2,"sl":68},{"el":81,"sc":2,"sl":80},{"el":88,"sc":2,"sl":86},{"el":96,"sc":2,"sl":94},{"el":106,"sc":2,"sl":101},{"el":116,"sc":2,"sl":109},{"el":126,"sc":2,"sl":118},{"el":142,"sc":2,"sl":128},{"el":163,"sc":2,"sl":144},{"el":170,"sc":2,"sl":165}],"name":"PublicKey","sl":45}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_138":{"methods":[{"sl":86}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":87}]},"test_159":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_160":{"methods":[{"sl":68},{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":70},{"sl":71},{"sl":167}]},"test_20":{"methods":[{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":147},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157}]},"test_253":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_263":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_28":{"methods":[{"sl":80},{"sl":86},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_285":{"methods":[{"sl":80},{"sl":86},{"sl":118}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":87},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_292":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_315":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_353":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_359":{"methods":[{"sl":86},{"sl":94},{"sl":109}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_379":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_425":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_450":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_479":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_501":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":101},{"sl":109}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":105},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_530":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_575":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_576":{"methods":[{"sl":57},{"sl":68},{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":162}]},"test_581":{"methods":[{"sl":80},{"sl":86},{"sl":94},{"sl":101},{"sl":118}],"name":"Verify deserialization of PublicKey","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_622":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_66":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_669":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_679":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_682":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_694":{"methods":[{"sl":80},{"sl":118}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_709":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_8":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_808":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_816":{"methods":[{"sl":57},{"sl":68},{"sl":109}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_819":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_842":{"methods":[{"sl":57},{"sl":68},{"sl":80},{"sl":86},{"sl":94},{"sl":101}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":105}]},"test_846":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_857":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_863":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_868":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_915":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_949":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_95":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_959":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_965":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_973":{"methods":[{"sl":109}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [868, 842, 808, 816, 66, 669, 679, 576, 450, 253, 501, 379, 682, 530, 315, 959], [868, 842, 808, 816, 66, 669, 679, 576, 450, 253, 501, 379, 682, 530, 315, 959], [], [], [], [], [], [], [], [], [], [868, 842, 808, 816, 160, 66, 669, 679, 576, 450, 253, 501, 379, 682, 530, 315, 959], [868, 842, 808, 816, 160, 66, 669, 679, 576, 450, 253, 501, 379, 682, 530, 315, 959], [868, 842, 808, 816, 160, 66, 669, 679, 576, 450, 253, 501, 379, 682, 530, 315, 959], [868, 842, 808, 816, 160, 66, 669, 679, 576, 450, 253, 501, 379, 682, 530, 315, 959], [], [], [], [], [], [], [], [], [575, 842, 622, 694, 353, 863, 105, 846, 28, 965, 263, 581, 292, 949, 285, 95], [], [], [], [], [], [868, 842, 808, 28, 359, 679, 581, 138, 253, 501, 285, 379, 682, 530, 315, 959], [868, 842, 808, 28, 359, 679, 581, 138, 253, 501, 285, 379, 682, 530, 315, 959], [], [], [], [], [], [], [868, 842, 808, 622, 353, 66, 669, 709, 846, 28, 965, 359, 679, 263, 581, 450, 292, 253, 501, 915, 379, 682, 530, 159, 315, 959], [868, 842, 808, 622, 353, 66, 669, 709, 846, 28, 965, 359, 679, 263, 581, 450, 292, 253, 501, 915, 379, 682, 530, 159, 315, 959], [], [], [], [], [], [842, 581, 501], [842, 581, 501], [842, 581], [], [842, 501], [], [], [], [868, 425, 575, 808, 816, 353, 66, 863, 105, 973, 669, 709, 846, 28, 965, 359, 679, 450, 857, 292, 253, 501, 915, 379, 682, 479, 530, 159, 315, 959], [], [868, 425, 575, 808, 816, 353, 66, 863, 105, 973, 669, 709, 846, 28, 965, 359, 679, 450, 857, 292, 253, 501, 915, 379, 682, 479, 530, 159, 315, 959], [868, 425, 575, 808, 816, 353, 66, 863, 105, 973, 669, 709, 846, 28, 965, 359, 679, 450, 857, 292, 253, 501, 915, 379, 682, 479, 530, 159, 315, 959], [575, 816, 863, 105, 846, 28, 965, 359, 450, 292, 501], [], [868, 425, 575, 808, 816, 353, 66, 863, 105, 973, 669, 709, 846, 28, 965, 359, 679, 450, 857, 292, 253, 501, 915, 379, 682, 479, 530, 159, 315, 959], [], [], [575, 622, 694, 353, 863, 105, 846, 28, 965, 263, 581, 292, 949, 285, 95], [], [575, 622, 694, 353, 863, 105, 846, 28, 965, 263, 581, 292, 949, 285, 95], [575, 622, 694, 353, 863, 105, 846, 28, 965, 263, 581, 292, 949, 285, 95], [575, 622, 863, 105, 846, 28, 965, 292, 285], [], [575, 622, 694, 353, 863, 105, 846, 28, 965, 263, 581, 292, 949, 285, 95], [575, 622, 694, 353, 863, 105, 846, 28, 965, 263, 581, 292, 949, 285, 95], [], [], [576, 20], [], [576, 20], [576, 20], [576, 20], [], [576, 20], [], [], [], [576, 20], [], [576, 20], [576, 20], [], [], [576, 20], [], [576, 20], [20], [576, 20], [], [576, 20], [], [576, 20], [576, 20], [], [], [576, 20], [576, 20], [576], [576], [576], [], [576], [], [], [160, 8, 819], [], [160, 8, 819], [], [], [], [], [], []]
