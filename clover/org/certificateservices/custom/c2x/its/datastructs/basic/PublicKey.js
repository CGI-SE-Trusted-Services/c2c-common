var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":173,"id":1333,"methods":[{"el":59,"sc":2,"sl":57},{"el":72,"sc":2,"sl":68},{"el":81,"sc":2,"sl":80},{"el":88,"sc":2,"sl":86},{"el":96,"sc":2,"sl":94},{"el":106,"sc":2,"sl":101},{"el":116,"sc":2,"sl":109},{"el":126,"sc":2,"sl":118},{"el":142,"sc":2,"sl":128},{"el":163,"sc":2,"sl":144},{"el":170,"sc":2,"sl":165}],"name":"PublicKey","sl":45}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_105":{"methods":[{"sl":80},{"sl":118}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_110":{"methods":[{"sl":57},{"sl":68},{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":162}]},"test_111":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_116":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_120":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_123":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_13":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_135":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_152":{"methods":[{"sl":80},{"sl":86},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_158":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_161":{"methods":[{"sl":57},{"sl":68},{"sl":109}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_166":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_170":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_185":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_196":{"methods":[{"sl":80},{"sl":86},{"sl":94},{"sl":101},{"sl":118}],"name":"Verify deserialization of PublicKey","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_202":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_216":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_221":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_244":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_255":{"methods":[{"sl":57},{"sl":68},{"sl":80},{"sl":86},{"sl":94},{"sl":101}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":105}]},"test_271":{"methods":[{"sl":80},{"sl":86},{"sl":118}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":87},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_274":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_275":{"methods":[{"sl":109}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_279":{"methods":[{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":147},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157}]},"test_284":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_286":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_296":{"methods":[{"sl":86}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":87}]},"test_301":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_314":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_322":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_34":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_364":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":101},{"sl":109}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":105},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_398":{"methods":[{"sl":68},{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":70},{"sl":71},{"sl":167}]},"test_40":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_403":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_405":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_406":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_64":{"methods":[{"sl":86},{"sl":94},{"sl":109}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_7":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_73":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_81":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_85":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_88":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [120, 73, 364, 255, 284, 405, 274, 406, 135, 110, 403, 161, 314, 185, 244, 116], [120, 73, 364, 255, 284, 405, 274, 406, 135, 110, 403, 161, 314, 185, 244, 116], [], [], [], [], [], [], [], [], [], [120, 73, 364, 255, 284, 405, 274, 406, 135, 110, 403, 161, 314, 185, 244, 116, 398], [120, 73, 364, 255, 284, 405, 274, 406, 135, 110, 403, 161, 314, 185, 244, 116, 398], [120, 73, 364, 255, 284, 405, 274, 406, 135, 110, 403, 161, 314, 185, 244, 116, 398], [120, 73, 364, 255, 284, 405, 274, 406, 135, 110, 403, 161, 314, 185, 244, 116, 398], [], [], [], [], [], [], [], [], [255, 202, 271, 85, 81, 166, 123, 216, 158, 196, 322, 34, 105, 152, 221, 40], [], [], [], [], [], [296, 120, 73, 364, 255, 405, 271, 274, 406, 135, 64, 196, 314, 185, 244, 152], [296, 120, 73, 364, 255, 405, 271, 274, 406, 135, 64, 196, 314, 185, 244, 152], [], [], [], [], [], [], [120, 73, 364, 255, 284, 405, 7, 274, 85, 81, 406, 123, 216, 135, 301, 64, 13, 196, 403, 34, 314, 185, 244, 152, 116, 40], [120, 73, 364, 255, 284, 405, 7, 274, 85, 81, 406, 123, 216, 135, 301, 64, 13, 196, 403, 34, 314, 185, 244, 152, 116, 40], [], [], [], [], [], [364, 255, 196], [364, 255, 196], [255, 196], [], [364, 255], [], [], [], [120, 73, 88, 364, 284, 405, 7, 274, 85, 111, 81, 406, 166, 216, 135, 301, 64, 158, 13, 275, 322, 403, 34, 161, 314, 170, 185, 244, 152, 116], [], [120, 73, 88, 364, 284, 405, 7, 274, 85, 111, 81, 406, 166, 216, 135, 301, 64, 158, 13, 275, 322, 403, 34, 161, 314, 170, 185, 244, 152, 116], [120, 73, 88, 364, 284, 405, 7, 274, 85, 111, 81, 406, 166, 216, 135, 301, 64, 158, 13, 275, 322, 403, 34, 161, 314, 170, 185, 244, 152, 116], [364, 85, 81, 166, 64, 158, 322, 34, 161, 152, 116], [], [120, 73, 88, 364, 284, 405, 7, 274, 85, 111, 81, 406, 166, 216, 135, 301, 64, 158, 13, 275, 322, 403, 34, 161, 314, 170, 185, 244, 152, 116], [], [], [202, 271, 85, 81, 166, 123, 216, 158, 196, 322, 34, 105, 152, 221, 40], [], [202, 271, 85, 81, 166, 123, 216, 158, 196, 322, 34, 105, 152, 221, 40], [202, 271, 85, 81, 166, 123, 216, 158, 196, 322, 34, 105, 152, 221, 40], [271, 85, 81, 166, 123, 158, 322, 34, 152], [], [202, 271, 85, 81, 166, 123, 216, 158, 196, 322, 34, 105, 152, 221, 40], [202, 271, 85, 81, 166, 123, 216, 158, 196, 322, 34, 105, 152, 221, 40], [], [], [279, 110], [], [279, 110], [279, 110], [279, 110], [], [279, 110], [], [], [], [279, 110], [], [279, 110], [279, 110], [], [], [279, 110], [], [279, 110], [279], [279, 110], [], [279, 110], [], [279, 110], [279, 110], [], [], [279, 110], [279, 110], [110], [110], [110], [], [110], [], [], [286, 398, 102], [], [286, 398, 102], [], [], [], [], [], []]
