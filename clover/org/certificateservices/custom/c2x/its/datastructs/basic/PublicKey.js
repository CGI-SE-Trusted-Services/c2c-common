var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":173,"id":1333,"methods":[{"el":59,"sc":2,"sl":57},{"el":72,"sc":2,"sl":68},{"el":81,"sc":2,"sl":80},{"el":88,"sc":2,"sl":86},{"el":96,"sc":2,"sl":94},{"el":106,"sc":2,"sl":101},{"el":116,"sc":2,"sl":109},{"el":126,"sc":2,"sl":118},{"el":142,"sc":2,"sl":128},{"el":163,"sc":2,"sl":144},{"el":170,"sc":2,"sl":165}],"name":"PublicKey","sl":45}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_109":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_124":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_131":{"methods":[{"sl":57},{"sl":68},{"sl":109}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_140":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_144":{"methods":[{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":147},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157}]},"test_162":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_168":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_172":{"methods":[{"sl":57},{"sl":68},{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":162}]},"test_182":{"methods":[{"sl":86},{"sl":94},{"sl":109}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_197":{"methods":[{"sl":80},{"sl":86},{"sl":94},{"sl":101},{"sl":118}],"name":"Verify deserialization of PublicKey","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_2":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_205":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_210":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_246":{"methods":[{"sl":57},{"sl":68},{"sl":80},{"sl":86},{"sl":94},{"sl":101}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":105}]},"test_25":{"methods":[{"sl":80},{"sl":86},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_259":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_26":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_275":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_288":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_293":{"methods":[{"sl":80},{"sl":86},{"sl":118}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":87},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_311":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_313":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_322":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_324":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_325":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_353":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_363":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_365":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":101},{"sl":109}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":105},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_371":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_372":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_381":{"methods":[{"sl":109}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_394":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_401":{"methods":[{"sl":80},{"sl":118}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_50":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_55":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_56":{"methods":[{"sl":57},{"sl":68},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_59":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_61":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_80":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_84":{"methods":[{"sl":68},{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":70},{"sl":71},{"sl":167}]},"test_88":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_90":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_95":{"methods":[{"sl":86}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":87}]},"test_96":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [394, 50, 210, 325, 372, 140, 246, 109, 55, 353, 131, 172, 124, 275, 56, 365], [394, 50, 210, 325, 372, 140, 246, 109, 55, 353, 131, 172, 124, 275, 56, 365], [], [], [], [], [], [], [], [], [], [394, 50, 210, 325, 372, 140, 246, 109, 55, 353, 84, 131, 172, 124, 275, 56, 365], [394, 50, 210, 325, 372, 140, 246, 109, 55, 353, 84, 131, 172, 124, 275, 56, 365], [394, 50, 210, 325, 372, 140, 246, 109, 55, 353, 84, 131, 172, 124, 275, 56, 365], [394, 50, 210, 325, 372, 140, 246, 109, 55, 353, 84, 131, 172, 124, 275, 56, 365], [], [], [], [], [], [], [], [], [197, 246, 322, 88, 96, 205, 25, 61, 162, 311, 401, 293, 363, 80, 2, 59], [], [], [], [], [], [394, 50, 210, 197, 325, 372, 246, 95, 25, 55, 182, 353, 293, 124, 275, 365], [394, 50, 210, 197, 325, 372, 246, 95, 25, 55, 182, 353, 293, 124, 275, 365], [], [], [], [], [], [], [394, 90, 50, 210, 197, 325, 372, 140, 246, 88, 371, 109, 96, 205, 25, 55, 182, 353, 162, 311, 124, 275, 56, 365, 59, 288], [394, 90, 50, 210, 197, 325, 372, 140, 246, 88, 371, 109, 96, 205, 25, 55, 182, 353, 162, 311, 124, 275, 56, 365, 59, 288], [], [], [], [], [], [197, 246, 365], [197, 246, 365], [197, 246], [], [246, 365], [], [], [], [394, 90, 50, 26, 168, 210, 325, 372, 140, 322, 88, 371, 109, 205, 25, 55, 182, 353, 311, 313, 381, 131, 124, 275, 56, 363, 365, 2, 59, 288], [], [394, 90, 50, 26, 168, 210, 325, 372, 140, 322, 88, 371, 109, 205, 25, 55, 182, 353, 311, 313, 381, 131, 124, 275, 56, 363, 365, 2, 59, 288], [394, 90, 50, 26, 168, 210, 325, 372, 140, 322, 88, 371, 109, 205, 25, 55, 182, 353, 311, 313, 381, 131, 124, 275, 56, 363, 365, 2, 59, 288], [322, 88, 25, 182, 311, 131, 56, 363, 365, 2, 59], [], [394, 90, 50, 26, 168, 210, 325, 372, 140, 322, 88, 371, 109, 205, 25, 55, 182, 353, 311, 313, 381, 131, 124, 275, 56, 363, 365, 2, 59, 288], [], [], [197, 322, 88, 96, 205, 25, 61, 162, 311, 401, 293, 363, 80, 2, 59], [], [197, 322, 88, 96, 205, 25, 61, 162, 311, 401, 293, 363, 80, 2, 59], [197, 322, 88, 96, 205, 25, 61, 162, 311, 401, 293, 363, 80, 2, 59], [322, 88, 25, 162, 311, 293, 363, 2, 59], [], [197, 322, 88, 96, 205, 25, 61, 162, 311, 401, 293, 363, 80, 2, 59], [197, 322, 88, 96, 205, 25, 61, 162, 311, 401, 293, 363, 80, 2, 59], [], [], [144, 172], [], [144, 172], [144, 172], [144, 172], [], [144, 172], [], [], [], [144, 172], [], [144, 172], [144, 172], [], [], [144, 172], [], [144, 172], [144], [144, 172], [], [144, 172], [], [144, 172], [144, 172], [], [], [144, 172], [144, 172], [172], [172], [172], [], [172], [], [], [259, 324, 84], [], [259, 324, 84], [], [], [], [], [], []]
