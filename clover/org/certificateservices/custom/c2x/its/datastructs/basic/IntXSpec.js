var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":138,"id":3625,"methods":[{"el":48,"sc":2,"sl":32},{"el":68,"sc":2,"sl":50},{"el":81,"sc":2,"sl":70},{"el":96,"sc":2,"sl":83},{"el":103,"sc":2,"sl":98},{"el":115,"sc":2,"sl":105},{"el":127,"sc":2,"sl":117},{"el":132,"sc":2,"sl":129},{"el":137,"sc":2,"sl":134}],"name":"IntXSpec","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_109":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 226 where: 3 is removed becomes: 2","pass":true,"statements":[{"sl":53}]},"test_124":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 1 where: 1 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_131":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 255 where: 7 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_141":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x8888 properly into: 2184","pass":true,"statements":[{"sl":73}]},"test_153":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 250 where: 5 is removed becomes: 2","pass":true,"statements":[{"sl":53}]},"test_160":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 233 has number of octets: 4","pass":true,"statements":[{"sl":35}]},"test_162":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x01 properly into: 1","pass":true,"statements":[{"sl":73}]},"test_164":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 193 where: 2 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_176":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 254 where: 6 is removed becomes: 2","pass":true,"statements":[{"sl":53}]},"test_189":{"methods":[{"sl":134}],"name":"Verify long value constructor","pass":true,"statements":[{"sl":136}]},"test_191":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x0888 properly into: 0x8888","pass":true,"statements":[{"sl":86}]},"test_200":{"methods":[{"sl":117}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":119},{"sl":120},{"sl":121},{"sl":123},{"sl":124},{"sl":125},{"sl":126}]},"test_205":{"methods":[{"sl":105}],"name":"Verify that serialize ecodes the value 0x0a properly into: 0x0a","pass":true,"statements":[{"sl":108}]},"test_213":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 255 where: 8 is removed becomes: 0","pass":true,"statements":[{"sl":53}]},"test_218":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0xdb3bfd properly into: 0xe0db3bfd","pass":true,"statements":[{"sl":86}]},"test_222":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x00 properly into: 0x00","pass":true,"statements":[{"sl":86}]},"test_257":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 241 has number of octets: 5","pass":true,"statements":[{"sl":35}]},"test_262":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 127 where: 1 is removed becomes: 127","pass":true,"statements":[{"sl":53}]},"test_270":{"methods":[{"sl":105}],"name":"Verify that serialize ecodes the value 0x0888 properly into: 0x8888","pass":true,"statements":[{"sl":108}]},"test_275":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x10000 properly into: 0xc10000","pass":true,"statements":[{"sl":86}]},"test_286":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x00 properly into: 0","pass":true,"statements":[{"sl":73}]},"test_340":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 253 has number of octets: 7","pass":true,"statements":[{"sl":35}]},"test_35":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 1 has number of octets: 1","pass":true,"statements":[{"sl":35}]},"test_355":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 129 has number of octets: 2","pass":true,"statements":[{"sl":35}]},"test_376":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x80 properly into: 0x8080","pass":true,"statements":[{"sl":86}]},"test_378":{"methods":[{"sl":105}],"name":"Verify that serialize ecodes the value 0x00 properly into: 0x00","pass":true,"statements":[{"sl":108}]},"test_379":{"methods":[{"sl":98}],"name":"Verify that encodeValue throws NumberFormatException","pass":true,"statements":[{"sl":100},{"sl":102}]},"test_382":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 194 where: 2 is removed becomes: 2","pass":true,"statements":[{"sl":53}]},"test_384":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 209 has number of octets: 3","pass":true,"statements":[{"sl":35}]},"test_405":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 249 has number of octets: 6","pass":true,"statements":[{"sl":35}]},"test_48":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 65 has number of octets: 1","pass":true,"statements":[{"sl":35}]},"test_54":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x0a properly into: 10","pass":true,"statements":[{"sl":73}]},"test_59":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x0a properly into: 0x0a","pass":true,"statements":[{"sl":86}]},"test_60":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 129 where: 1 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_70":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 239 where: 4 is removed becomes: 15","pass":true,"statements":[{"sl":53}]},"test_85":{"methods":[{"sl":129}],"name":"Verify toString","pass":true,"statements":[{"sl":131}]},"test_86":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 209 has number of octets: 3","pass":true,"statements":[{"sl":35}]},"test_89":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 254 has number of octets: 8","pass":true,"statements":[{"sl":35}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [48, 340, 257, 89, 405, 86, 35, 160, 355, 384], [], [], [48, 340, 257, 89, 405, 86, 35, 160, 355, 384], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [382, 109, 153, 70, 262, 60, 124, 164, 131, 213, 176], [], [], [382, 109, 153, 70, 262, 60, 124, 164, 131, 213, 176], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [162, 54, 141, 286], [], [], [162, 54, 141, 286], [], [], [], [], [], [], [], [], [], [376, 222, 191, 275, 59, 218], [], [], [376, 222, 191, 275, 59, 218], [], [], [], [], [], [], [], [], [], [], [], [379], [], [379], [], [379], [], [], [270, 378, 205], [], [], [270, 378, 205], [], [], [], [], [], [], [], [], [200], [], [200], [200], [200], [], [200], [200], [200], [200], [], [], [85], [], [85], [], [], [189], [], [189], [], []]
