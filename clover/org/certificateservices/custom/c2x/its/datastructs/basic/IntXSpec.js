var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":138,"id":3625,"methods":[{"el":48,"sc":2,"sl":32},{"el":68,"sc":2,"sl":50},{"el":81,"sc":2,"sl":70},{"el":96,"sc":2,"sl":83},{"el":103,"sc":2,"sl":98},{"el":115,"sc":2,"sl":105},{"el":127,"sc":2,"sl":117},{"el":132,"sc":2,"sl":129},{"el":137,"sc":2,"sl":134}],"name":"IntXSpec","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x01 properly into: 1","pass":true,"statements":[{"sl":73}]},"test_10":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x0888 properly into: 0x8888","pass":true,"statements":[{"sl":86}]},"test_100":{"methods":[{"sl":105}],"name":"Verify that serialize ecodes the value 0x00 properly into: 0x00","pass":true,"statements":[{"sl":108}]},"test_104":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 255 where: 8 is removed becomes: 0","pass":true,"statements":[{"sl":53}]},"test_108":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 250 where: 5 is removed becomes: 2","pass":true,"statements":[{"sl":53}]},"test_117":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 233 has number of octets: 4","pass":true,"statements":[{"sl":35}]},"test_153":{"methods":[{"sl":105}],"name":"Verify that serialize ecodes the value 0x0888 properly into: 0x8888","pass":true,"statements":[{"sl":108}]},"test_169":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x8888 properly into: 2184","pass":true,"statements":[{"sl":73}]},"test_180":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x00 properly into: 0x00","pass":true,"statements":[{"sl":86}]},"test_203":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 241 has number of octets: 5","pass":true,"statements":[{"sl":35}]},"test_207":{"methods":[{"sl":98}],"name":"Verify that encodeValue throws NumberFormatException","pass":true,"statements":[{"sl":100},{"sl":102}]},"test_217":{"methods":[{"sl":117}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":119},{"sl":120},{"sl":121},{"sl":123},{"sl":124},{"sl":125},{"sl":126}]},"test_242":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 254 has number of octets: 8","pass":true,"statements":[{"sl":35}]},"test_247":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 239 where: 4 is removed becomes: 15","pass":true,"statements":[{"sl":53}]},"test_252":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 194 where: 2 is removed becomes: 2","pass":true,"statements":[{"sl":53}]},"test_262":{"methods":[{"sl":134}],"name":"Verify long value constructor","pass":true,"statements":[{"sl":136}]},"test_263":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 255 where: 7 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_268":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 1 has number of octets: 1","pass":true,"statements":[{"sl":35}]},"test_269":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0xdb3bfd properly into: 0xe0db3bfd","pass":true,"statements":[{"sl":86}]},"test_282":{"methods":[{"sl":129}],"name":"Verify toString","pass":true,"statements":[{"sl":131}]},"test_288":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 127 where: 1 is removed becomes: 127","pass":true,"statements":[{"sl":53}]},"test_299":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 249 has number of octets: 6","pass":true,"statements":[{"sl":35}]},"test_305":{"methods":[{"sl":105}],"name":"Verify that serialize ecodes the value 0x0a properly into: 0x0a","pass":true,"statements":[{"sl":108}]},"test_312":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 253 has number of octets: 7","pass":true,"statements":[{"sl":35}]},"test_329":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 209 has number of octets: 3","pass":true,"statements":[{"sl":35}]},"test_331":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 209 has number of octets: 3","pass":true,"statements":[{"sl":35}]},"test_342":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x10000 properly into: 0xc10000","pass":true,"statements":[{"sl":86}]},"test_346":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x0a properly into: 10","pass":true,"statements":[{"sl":73}]},"test_356":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x80 properly into: 0x8080","pass":true,"statements":[{"sl":86}]},"test_371":{"methods":[{"sl":70}],"name":"Verify that deserialize decodes the value 0x00 properly into: 0","pass":true,"statements":[{"sl":73}]},"test_38":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 129 where: 1 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_388":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 129 has number of octets: 2","pass":true,"statements":[{"sl":35}]},"test_390":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 1 where: 1 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_4":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 226 where: 3 is removed becomes: 2","pass":true,"statements":[{"sl":53}]},"test_71":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 193 where: 2 is removed becomes: 1","pass":true,"statements":[{"sl":53}]},"test_77":{"methods":[{"sl":32}],"name":"Verify getNumberOfOctets for number: 65 has number of octets: 1","pass":true,"statements":[{"sl":35}]},"test_91":{"methods":[{"sl":83}],"name":"Verify that encodeValue encodes the value 0x0a properly into: 0x0a","pass":true,"statements":[{"sl":86}]},"test_98":{"methods":[{"sl":50}],"name":"Verify getFirstByteValue for number: 254 where: 6 is removed becomes: 2","pass":true,"statements":[{"sl":53}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [268, 299, 77, 203, 242, 329, 117, 312, 331, 388], [], [], [268, 299, 77, 203, 242, 329, 117, 312, 331, 388], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [247, 108, 288, 38, 4, 390, 252, 71, 104, 98, 263], [], [], [247, 108, 288, 38, 4, 390, 252, 71, 104, 98, 263], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [346, 371, 1, 169], [], [], [346, 371, 1, 169], [], [], [], [], [], [], [], [], [], [342, 180, 269, 356, 10, 91], [], [], [342, 180, 269, 356, 10, 91], [], [], [], [], [], [], [], [], [], [], [], [207], [], [207], [], [207], [], [], [100, 153, 305], [], [], [100, 153, 305], [], [], [], [], [], [], [], [], [217], [], [217], [217], [217], [], [217], [217], [217], [217], [], [], [282], [], [282], [], [], [262], [], [262], [], []]
