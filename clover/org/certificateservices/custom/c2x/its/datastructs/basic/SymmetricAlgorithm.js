var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":63,"id":1722,"methods":[{"el":41,"sc":2,"sl":38},{"el":45,"sc":2,"sl":43},{"el":49,"sc":2,"sl":47},{"el":61,"sc":2,"sl":54}],"name":"SymmetricAlgorithm","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_116":{"methods":[{"sl":43}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":44}]},"test_123":{"methods":[{"sl":54}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_152":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_158":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_161":{"methods":[{"sl":43}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":44}]},"test_166":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_174":{"methods":[{"sl":54}],"name":"Verify that SymmetricAlgorithm.getByValue returns aes_128_ccm for 0","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_210":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_227":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_229":{"methods":[{"sl":43}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":44}]},"test_245":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_271":{"methods":[{"sl":54}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_280":{"methods":[{"sl":54}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_322":{"methods":[{"sl":43},{"sl":54}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_34":{"methods":[{"sl":43},{"sl":54}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_364":{"methods":[{"sl":43}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":44}]},"test_376":{"methods":[{"sl":47}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":48}]},"test_39":{"methods":[{"sl":43}],"name":"Verify serialization","pass":true,"statements":[{"sl":44}]},"test_400":{"methods":[{"sl":47}],"name":"Verify that eCEISEncryptSymmetricKey and eCEISDecryptSymmetricKey encrypts and decrypts symmetric key correcly.","pass":true,"statements":[{"sl":48}]},"test_57":{"methods":[{"sl":43},{"sl":47}],"name":"Verify that aes_128_ccm has bytevalue 0","pass":true,"statements":[{"sl":44},{"sl":48}]},"test_64":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_75":{"methods":[{"sl":47},{"sl":54}],"name":"Verify deserialization","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_81":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_84":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_85":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [85, 81, 39, 229, 158, 166, 152, 364, 57, 116, 322, 34, 161, 64], [85, 81, 39, 229, 158, 166, 152, 364, 57, 116, 322, 34, 161, 64], [], [], [227, 210, 152, 57, 75, 376, 400, 84, 245, 64], [227, 210, 152, 57, 75, 376, 400, 84, 245, 64], [], [], [], [], [], [85, 81, 158, 166, 123, 152, 75, 174, 322, 271, 280, 34, 64], [85, 81, 158, 166, 123, 152, 75, 174, 322, 271, 280, 34, 64], [85, 81, 158, 166, 123, 152, 75, 174, 322, 271, 280, 34, 64], [85, 81, 158, 166, 123, 152, 75, 174, 322, 271, 280, 34, 64], [], [], [], [], [], []]
