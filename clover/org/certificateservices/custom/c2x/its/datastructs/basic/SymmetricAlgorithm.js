var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":63,"id":1722,"methods":[{"el":41,"sc":2,"sl":38},{"el":45,"sc":2,"sl":43},{"el":49,"sc":2,"sl":47},{"el":61,"sc":2,"sl":54}],"name":"SymmetricAlgorithm","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_104":{"methods":[{"sl":54}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_112":{"methods":[{"sl":43},{"sl":54}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_125":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_138":{"methods":[{"sl":47},{"sl":54}],"name":"Verify deserialization","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_148":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_151":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_159":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_16":{"methods":[{"sl":54}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_176":{"methods":[{"sl":47}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":48}]},"test_177":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_181":{"methods":[{"sl":54}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_209":{"methods":[{"sl":43}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":44}]},"test_221":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_224":{"methods":[{"sl":43}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":44}]},"test_232":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_239":{"methods":[{"sl":43},{"sl":54}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_241":{"methods":[{"sl":43}],"name":"Verify serialization","pass":true,"statements":[{"sl":44}]},"test_27":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_313":{"methods":[{"sl":43}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":44}]},"test_316":{"methods":[{"sl":43},{"sl":47}],"name":"Verify that aes_128_ccm has bytevalue 0","pass":true,"statements":[{"sl":44},{"sl":48}]},"test_336":{"methods":[{"sl":43}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":44}]},"test_357":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_4":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_57":{"methods":[{"sl":47}],"name":"Verify that eCEISEncryptSymmetricKey and eCEISDecryptSymmetricKey encrypts and decrypts symmetric key correcly.","pass":true,"statements":[{"sl":48}]},"test_73":{"methods":[{"sl":54}],"name":"Verify that SymmetricAlgorithm.getByValue returns aes_128_ccm for 0","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [357, 224, 239, 232, 316, 336, 27, 125, 241, 209, 112, 313, 148, 151], [357, 224, 239, 232, 316, 336, 27, 125, 241, 209, 112, 313, 148, 151], [], [], [357, 138, 221, 232, 159, 176, 316, 4, 177, 57], [357, 138, 221, 232, 159, 176, 316, 4, 177, 57], [], [], [], [], [], [357, 239, 138, 232, 104, 16, 27, 125, 73, 112, 181, 148, 151], [357, 239, 138, 232, 104, 16, 27, 125, 73, 112, 181, 148, 151], [357, 239, 138, 232, 104, 16, 27, 125, 73, 112, 181, 148, 151], [357, 239, 138, 232, 104, 16, 27, 125, 73, 112, 181, 148, 151], [], [], [], [], [], []]
