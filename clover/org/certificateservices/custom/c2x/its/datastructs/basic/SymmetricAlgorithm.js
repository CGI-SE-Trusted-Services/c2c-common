var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":63,"id":1722,"methods":[{"el":41,"sc":2,"sl":38},{"el":45,"sc":2,"sl":43},{"el":49,"sc":2,"sl":47},{"el":61,"sc":2,"sl":54}],"name":"SymmetricAlgorithm","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_1":{"methods":[{"sl":43}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":44}]},"test_11":{"methods":[{"sl":47}],"name":"Verify that eCEISEncryptSymmetricKey and eCEISDecryptSymmetricKey encrypts and decrypts symmetric key correcly.","pass":true,"statements":[{"sl":48}]},"test_119":{"methods":[{"sl":43},{"sl":54}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_124":{"methods":[{"sl":43},{"sl":54}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_14":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_148":{"methods":[{"sl":54}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_150":{"methods":[{"sl":43}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":44}]},"test_191":{"methods":[{"sl":43}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":44}]},"test_2":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_231":{"methods":[{"sl":54}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_237":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_24":{"methods":[{"sl":47}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":48}]},"test_265":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_284":{"methods":[{"sl":43},{"sl":47}],"name":"Verify that aes_128_ccm has bytevalue 0","pass":true,"statements":[{"sl":44},{"sl":48}]},"test_289":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_300":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_327":{"methods":[{"sl":43}],"name":"Verify serialization","pass":true,"statements":[{"sl":44}]},"test_383":{"methods":[{"sl":54}],"name":"Verify that SymmetricAlgorithm.getByValue returns aes_128_ccm for 0","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_385":{"methods":[{"sl":54}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_387":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_50":{"methods":[{"sl":47},{"sl":54}],"name":"Verify deserialization","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_57":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_86":{"methods":[{"sl":43}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":44}]},"test_88":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [284, 1, 119, 289, 191, 265, 327, 0, 57, 14, 387, 124, 150, 86], [284, 1, 119, 289, 191, 265, 327, 0, 57, 14, 387, 124, 150, 86], [], [], [284, 265, 88, 24, 11, 237, 300, 387, 50, 2], [284, 265, 88, 24, 11, 237, 300, 387, 50, 2], [], [], [], [], [], [383, 119, 289, 265, 148, 0, 57, 14, 387, 231, 124, 50, 385], [383, 119, 289, 265, 148, 0, 57, 14, 387, 231, 124, 50, 385], [383, 119, 289, 265, 148, 0, 57, 14, 387, 231, 124, 50, 385], [383, 119, 289, 265, 148, 0, 57, 14, 387, 231, 124, 50, 385], [], [], [], [], [], []]
