var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":63,"id":1722,"methods":[{"el":41,"sc":2,"sl":38},{"el":45,"sc":2,"sl":43},{"el":49,"sc":2,"sl":47},{"el":61,"sc":2,"sl":54}],"name":"SymmetricAlgorithm","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_126":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_155":{"methods":[{"sl":54}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_160":{"methods":[{"sl":43},{"sl":54}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_163":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_164":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_173":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_186":{"methods":[{"sl":47}],"name":"Verify that eCEISEncryptSymmetricKey and eCEISDecryptSymmetricKey encrypts and decrypts symmetric key correcly.","pass":true,"statements":[{"sl":48}]},"test_199":{"methods":[{"sl":47}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":48}]},"test_22":{"methods":[{"sl":54}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_236":{"methods":[{"sl":43}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":44}]},"test_249":{"methods":[{"sl":43},{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_303":{"methods":[{"sl":43}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":44}]},"test_33":{"methods":[{"sl":43}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":44}]},"test_339":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_340":{"methods":[{"sl":43}],"name":"Verify serialization","pass":true,"statements":[{"sl":44}]},"test_367":{"methods":[{"sl":43}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":44}]},"test_381":{"methods":[{"sl":47},{"sl":54}],"name":"Verify deserialization","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_386":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_393":{"methods":[{"sl":54}],"name":"Verify that SymmetricAlgorithm.getByValue returns aes_128_ccm for 0","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_401":{"methods":[{"sl":43},{"sl":47},{"sl":54}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":44},{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_51":{"methods":[{"sl":54}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_52":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_61":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_71":{"methods":[{"sl":43},{"sl":47}],"name":"Verify that aes_128_ccm has bytevalue 0","pass":true,"statements":[{"sl":44},{"sl":48}]},"test_96":{"methods":[{"sl":43},{"sl":54}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [160, 303, 367, 173, 33, 339, 96, 340, 52, 236, 249, 163, 401, 71], [160, 303, 367, 173, 33, 339, 96, 340, 52, 236, 249, 163, 401, 71], [], [], [186, 199, 339, 126, 381, 61, 386, 164, 401, 71], [186, 199, 339, 126, 381, 61, 386, 164, 401, 71], [], [], [], [], [], [160, 173, 393, 339, 381, 155, 96, 52, 249, 51, 163, 22, 401], [160, 173, 393, 339, 381, 155, 96, 52, 249, 51, 163, 22, 401], [160, 173, 393, 339, 381, 155, 96, 52, 249, 51, 163, 22, 401], [160, 173, 393, 339, 381, 155, 96, 52, 249, 51, 163, 22, 401], [], [], [], [], [], []]
