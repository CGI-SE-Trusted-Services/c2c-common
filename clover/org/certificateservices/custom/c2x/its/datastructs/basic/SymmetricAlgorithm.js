var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":71,"id":6588,"methods":[{"el":44,"sc":2,"sl":41},{"el":48,"sc":2,"sl":46},{"el":52,"sc":2,"sl":50},{"el":64,"sc":2,"sl":57},{"el":69,"sc":2,"sl":66}],"name":"SymmetricAlgorithm","sl":35}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":46},{"sl":57}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_134":{"methods":[{"sl":50}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51}]},"test_135":{"methods":[{"sl":57}],"name":"Verify that SymmetricAlgorithm.getByValue returns aes_128_ccm for 0","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_161":{"methods":[{"sl":50}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":51}]},"test_28":{"methods":[{"sl":46},{"sl":50},{"sl":57},{"sl":66}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":47},{"sl":51},{"sl":58},{"sl":59},{"sl":60},{"sl":68}]},"test_285":{"methods":[{"sl":57}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_292":{"methods":[{"sl":46},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_3":{"methods":[{"sl":46}],"name":"Verify serialization","pass":true,"statements":[{"sl":47}]},"test_339":{"methods":[{"sl":50}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":51}]},"test_359":{"methods":[{"sl":46},{"sl":50},{"sl":57},{"sl":66}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":47},{"sl":51},{"sl":58},{"sl":59},{"sl":60},{"sl":68}]},"test_440":{"methods":[{"sl":57}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_450":{"methods":[{"sl":46}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":47}]},"test_501":{"methods":[{"sl":46}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":47}]},"test_507":{"methods":[{"sl":50}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51}]},"test_545":{"methods":[{"sl":50}],"name":"Verify that eCEISEncryptSymmetricKey and eCEISDecryptSymmetricKey encrypts and decrypts symmetric key correcly.","pass":true,"statements":[{"sl":51}]},"test_575":{"methods":[{"sl":46},{"sl":57}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_60":{"methods":[{"sl":46}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":47}]},"test_622":{"methods":[{"sl":57}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_645":{"methods":[{"sl":66}],"name":"Verify that symmetric encrypt and decrypt works for aes_128_ccm","pass":true,"statements":[{"sl":68}]},"test_674":{"methods":[{"sl":50}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":51}]},"test_713":{"methods":[{"sl":46},{"sl":50}],"name":"Verify that aes_128_ccm has bytevalue 0","pass":true,"statements":[{"sl":47},{"sl":51}]},"test_816":{"methods":[{"sl":46}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":47}]},"test_846":{"methods":[{"sl":46},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_847":{"methods":[{"sl":66}],"name":"Verify correct algorithms indicator is returned.","pass":true,"statements":[{"sl":68}]},"test_863":{"methods":[{"sl":46},{"sl":57}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_913":{"methods":[{"sl":50},{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_965":{"methods":[{"sl":46},{"sl":57}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [575, 713, 863, 105, 450, 292, 846, 60, 3, 816, 28, 965, 359, 501], [575, 713, 863, 105, 450, 292, 846, 60, 3, 816, 28, 965, 359, 501], [], [], [545, 713, 507, 674, 161, 134, 913, 339, 28, 359], [545, 713, 507, 674, 161, 134, 913, 339, 28, 359], [], [], [], [], [], [575, 863, 285, 105, 135, 292, 440, 846, 913, 622, 28, 965, 359], [575, 863, 285, 105, 135, 292, 440, 846, 913, 622, 28, 965, 359], [575, 863, 285, 105, 135, 292, 440, 846, 913, 622, 28, 965, 359], [575, 863, 285, 105, 135, 292, 440, 846, 913, 622, 28, 965, 359], [], [], [], [], [], [645, 847, 28, 359], [], [645, 847, 28, 359], [], [], []]
