var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":71,"id":6785,"methods":[{"el":44,"sc":2,"sl":41},{"el":48,"sc":2,"sl":46},{"el":52,"sc":2,"sl":50},{"el":64,"sc":2,"sl":57},{"el":69,"sc":2,"sl":66}],"name":"SymmetricAlgorithm","sl":35}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":46},{"sl":57}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_134":{"methods":[{"sl":50},{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_15":{"methods":[{"sl":46},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_240":{"methods":[{"sl":50}],"name":"Verify that constructor throws IllegalArgumentException for wrong version data","pass":true,"statements":[{"sl":51}]},"test_242":{"methods":[{"sl":46},{"sl":50},{"sl":57},{"sl":66}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":47},{"sl":51},{"sl":58},{"sl":59},{"sl":60},{"sl":68}]},"test_249":{"methods":[{"sl":50}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":51}]},"test_294":{"methods":[{"sl":50}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":51}]},"test_306":{"methods":[{"sl":46},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_339":{"methods":[{"sl":46},{"sl":50}],"name":"Verify that aes_128_ccm has bytevalue 0","pass":true,"statements":[{"sl":47},{"sl":51}]},"test_350":{"methods":[{"sl":57}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_361":{"methods":[{"sl":46},{"sl":57}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_374":{"methods":[{"sl":50}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":51}]},"test_383":{"methods":[{"sl":46}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":47}]},"test_438":{"methods":[{"sl":46}],"name":"Verify serialization","pass":true,"statements":[{"sl":47}]},"test_457":{"methods":[{"sl":46}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":47}]},"test_487":{"methods":[{"sl":66}],"name":"Verify that symmetric encrypt and decrypt works for aes_128_ccm","pass":true,"statements":[{"sl":68}]},"test_575":{"methods":[{"sl":57}],"name":"Verify that SymmetricAlgorithm.getByValue returns aes_128_ccm for 0","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_576":{"methods":[{"sl":46}],"name":"Generate version 1 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":47}]},"test_579":{"methods":[{"sl":46}],"name":"Generate version 2 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47}]},"test_637":{"methods":[{"sl":46},{"sl":57}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":47},{"sl":58},{"sl":59},{"sl":60}]},"test_670":{"methods":[{"sl":46}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[1]","pass":true,"statements":[{"sl":47}]},"test_686":{"methods":[{"sl":46}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47}]},"test_699":{"methods":[{"sl":46},{"sl":50},{"sl":57},{"sl":66}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":47},{"sl":51},{"sl":58},{"sl":59},{"sl":60},{"sl":68}]},"test_707":{"methods":[{"sl":50}],"name":"Verify that eCEISEncryptSymmetricKey and eCEISDecryptSymmetricKey encrypts and decrypts symmetric key correcly.","pass":true,"statements":[{"sl":51}]},"test_746":{"methods":[{"sl":57}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_768":{"methods":[{"sl":50}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51}]},"test_781":{"methods":[{"sl":50}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51}]},"test_795":{"methods":[{"sl":66}],"name":"Verify correct algorithms indicator is returned.","pass":true,"statements":[{"sl":68}]},"test_860":{"methods":[{"sl":46}],"name":"Generate version 2 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":47}]},"test_891":{"methods":[{"sl":46}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":47}]},"test_935":{"methods":[{"sl":57}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [339, 457, 383, 105, 306, 15, 670, 438, 860, 686, 579, 361, 637, 242, 891, 576, 699], [339, 457, 383, 105, 306, 15, 670, 438, 860, 686, 579, 361, 637, 242, 891, 576, 699], [], [], [249, 339, 374, 134, 707, 294, 240, 768, 242, 781, 699], [249, 339, 374, 134, 707, 294, 240, 768, 242, 781, 699], [], [], [], [], [], [105, 306, 134, 15, 575, 746, 350, 935, 361, 637, 242, 699], [105, 306, 134, 15, 575, 746, 350, 935, 361, 637, 242, 699], [105, 306, 134, 15, 575, 746, 350, 935, 361, 637, 242, 699], [105, 306, 134, 15, 575, 746, 350, 935, 361, 637, 242, 699], [], [], [], [], [], [795, 487, 242, 699], [], [795, 487, 242, 699], [], [], []]
