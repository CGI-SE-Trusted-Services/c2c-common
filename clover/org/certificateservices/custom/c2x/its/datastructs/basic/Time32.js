var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":136,"id":6662,"methods":[{"el":56,"sc":2,"sl":51},{"el":65,"sc":2,"sl":63},{"el":74,"sc":2,"sl":71},{"el":85,"sc":2,"sl":82},{"el":93,"sc":2,"sl":91},{"el":99,"sc":2,"sl":96},{"el":106,"sc":2,"sl":101},{"el":111,"sc":2,"sl":108},{"el":119,"sc":2,"sl":113},{"el":133,"sc":2,"sl":121}],"name":"Time32","sl":38}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_111":{"methods":[{"sl":71},{"sl":82},{"sl":101}],"name":"Verify deserialization","pass":true,"statements":[{"sl":83},{"sl":84},{"sl":103},{"sl":104},{"sl":105}]},"test_159":{"methods":[{"sl":96}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":98}]},"test_253":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_28":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_285":{"methods":[{"sl":71},{"sl":101}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":103},{"sl":104},{"sl":105}]},"test_292":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_299":{"methods":[{"sl":82}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":83},{"sl":84}]},"test_3":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98}]},"test_315":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_348":{"methods":[{"sl":51},{"sl":82},{"sl":108}],"name":"Verify toString","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":110}]},"test_353":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_359":{"methods":[{"sl":96}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":98}]},"test_376":{"methods":[{"sl":82},{"sl":108}],"name":"Verify toString","pass":true,"statements":[{"sl":83},{"sl":84},{"sl":110}]},"test_377":{"methods":[{"sl":71},{"sl":82},{"sl":101}],"name":"Verify deserialization","pass":true,"statements":[{"sl":83},{"sl":84},{"sl":103},{"sl":104},{"sl":105}]},"test_379":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_450":{"methods":[{"sl":51},{"sl":96}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":98}]},"test_479":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98}]},"test_501":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_530":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_539":{"methods":[{"sl":63},{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":64},{"sl":98}]},"test_575":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_578":{"methods":[{"sl":51},{"sl":113},{"sl":121}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":115},{"sl":116},{"sl":117},{"sl":118},{"sl":123},{"sl":125},{"sl":126},{"sl":127},{"sl":129},{"sl":130},{"sl":132}]},"test_622":{"methods":[{"sl":71},{"sl":101}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":103},{"sl":104},{"sl":105}]},"test_66":{"methods":[{"sl":51},{"sl":96}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":98}]},"test_669":{"methods":[{"sl":51},{"sl":96}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":98}]},"test_671":{"methods":[{"sl":63},{"sl":82}],"name":"Make sure asDate converts the date correctly","pass":true,"statements":[{"sl":64},{"sl":83},{"sl":84}]},"test_672":{"methods":[{"sl":51},{"sl":91}],"name":"Verify the constructors and asElapsedTime","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":92}]},"test_679":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_682":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_692":{"methods":[{"sl":51}],"name":"Verify that addHeader adds the header value in correct order","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_694":{"methods":[{"sl":71},{"sl":101}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":103},{"sl":104},{"sl":105}]},"test_709":{"methods":[{"sl":96}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":98}]},"test_793":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98}]},"test_808":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_819":{"methods":[{"sl":82},{"sl":108}],"name":"Verify toString","pass":true,"statements":[{"sl":83},{"sl":84},{"sl":110}]},"test_828":{"methods":[{"sl":51},{"sl":113},{"sl":121}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":115},{"sl":116},{"sl":117},{"sl":118},{"sl":123},{"sl":125},{"sl":127},{"sl":129},{"sl":130},{"sl":131},{"sl":132}]},"test_846":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_857":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98}]},"test_863":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_868":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_888":{"methods":[{"sl":63},{"sl":96}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":64},{"sl":98}]},"test_891":{"methods":[{"sl":82},{"sl":108}],"name":"Verify toString","pass":true,"statements":[{"sl":83},{"sl":84},{"sl":110}]},"test_913":{"methods":[{"sl":71},{"sl":101}],"name":"Verify deserialization","pass":true,"statements":[{"sl":103},{"sl":104},{"sl":105}]},"test_915":{"methods":[{"sl":96}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":98}]},"test_949":{"methods":[{"sl":71},{"sl":101}],"name":"Verify deserialization","pass":true,"statements":[{"sl":103},{"sl":104},{"sl":105}]},"test_95":{"methods":[{"sl":71},{"sl":101}],"name":"Verify deserialization","pass":true,"statements":[{"sl":103},{"sl":104},{"sl":105}]},"test_959":{"methods":[{"sl":51},{"sl":82},{"sl":96}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54},{"sl":83},{"sl":84},{"sl":98}]},"test_961":{"methods":[{"sl":51}],"name":"Verify that findHeader finds the correct header in a SecureMessage","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_965":{"methods":[{"sl":71},{"sl":96},{"sl":101}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":98},{"sl":103},{"sl":104},{"sl":105}]},"test_973":{"methods":[{"sl":96}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":98}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [868, 692, 961, 450, 828, 808, 672, 253, 578, 501, 348, 66, 379, 669, 682, 530, 315, 679, 959], [868, 692, 961, 450, 828, 808, 672, 253, 578, 501, 348, 66, 379, 669, 682, 530, 315, 679, 959], [868, 692, 961, 450, 828, 808, 672, 253, 578, 501, 348, 66, 379, 669, 682, 530, 315, 679, 959], [868, 692, 961, 450, 828, 808, 672, 253, 578, 501, 348, 66, 379, 669, 682, 530, 315, 679, 959], [], [], [], [], [], [], [], [], [539, 888, 671], [539, 888, 671], [], [], [], [], [], [], [575, 292, 913, 622, 949, 694, 353, 863, 377, 285, 105, 111, 846, 95, 28, 965], [], [], [], [], [], [], [], [], [], [], [868, 299, 808, 891, 253, 501, 348, 377, 379, 111, 376, 819, 682, 530, 315, 679, 959, 671], [868, 299, 808, 891, 253, 501, 348, 377, 379, 111, 376, 819, 682, 530, 315, 679, 959, 671], [868, 299, 808, 891, 253, 501, 348, 377, 379, 111, 376, 819, 682, 530, 315, 679, 959, 671], [], [], [], [], [], [], [672], [672], [], [], [], [868, 575, 450, 808, 857, 539, 292, 3, 253, 501, 353, 915, 888, 66, 863, 793, 379, 105, 973, 669, 709, 846, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [], [868, 575, 450, 808, 857, 539, 292, 3, 253, 501, 353, 915, 888, 66, 863, 793, 379, 105, 973, 669, 709, 846, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [], [], [575, 292, 913, 622, 949, 694, 353, 863, 377, 285, 105, 111, 846, 95, 28, 965], [], [575, 292, 913, 622, 949, 694, 353, 863, 377, 285, 105, 111, 846, 95, 28, 965], [575, 292, 913, 622, 949, 694, 353, 863, 377, 285, 105, 111, 846, 95, 28, 965], [575, 292, 913, 622, 949, 694, 353, 863, 377, 285, 105, 111, 846, 95, 28, 965], [], [], [891, 348, 376, 819], [], [891, 348, 376, 819], [], [], [828, 578], [], [828, 578], [828, 578], [828, 578], [828, 578], [], [], [828, 578], [], [828, 578], [], [828, 578], [578], [828, 578], [], [828, 578], [828, 578], [828], [828, 578], [], [], [], []]
