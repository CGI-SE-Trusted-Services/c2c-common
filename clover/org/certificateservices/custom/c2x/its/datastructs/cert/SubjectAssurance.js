var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":114,"id":2253,"methods":[{"el":49,"sc":2,"sl":40},{"el":54,"sc":2,"sl":54},{"el":64,"sc":2,"sl":62},{"el":68,"sc":2,"sl":66},{"el":72,"sc":5,"sl":70},{"el":77,"sc":2,"sl":74},{"el":82,"sc":2,"sl":79},{"el":91,"sc":2,"sl":85},{"el":105,"sc":2,"sl":93},{"el":110,"sc":2,"sl":107}],"name":"SubjectAssurance","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 1 for assuranceLevel: 0 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_109":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 0 for assuranceLevel: 0 and confidenceLevel: 0","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_111":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[1]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_114":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_13":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_150":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_153":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_158":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":109}]},"test_160":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_163":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_173":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_183":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_191":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_193":{"methods":[{"sl":74}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":76}]},"test_196":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_20":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_206":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[2]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_209":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_213":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_218":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_22":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":81}]},"test_222":{"methods":[{"sl":74}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_232":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_236":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_241":{"methods":[{"sl":54},{"sl":79}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":81}]},"test_243":{"methods":[{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":89},{"sl":90}]},"test_246":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_249":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_254":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_259":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_265":{"methods":[{"sl":74}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_270":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_272":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 33 for assuranceLevel: 1 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_283":{"methods":[{"sl":74}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_29":{"methods":[{"sl":54},{"sl":70},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":71},{"sl":81}]},"test_314":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 227 for assuranceLevel: 7 and confidenceLevel: 3","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_316":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 8","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_32":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_339":{"methods":[{"sl":74}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":76}]},"test_344":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 4","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_351":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_367":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_375":{"methods":[{"sl":40},{"sl":85},{"sl":93}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":95},{"sl":97},{"sl":99},{"sl":101},{"sl":102},{"sl":103},{"sl":104}]},"test_382":{"methods":[{"sl":40},{"sl":66},{"sl":70}],"name":"Verify getAssurranceLevel and getConfidence","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71}]},"test_39":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_396":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_398":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_401":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_402":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_51":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":81}]},"test_52":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_53":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[0]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_66":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_96":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":76},{"sl":81}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [316, 367, 191, 158, 150, 382, 375, 32, 232, 398, 114, 111, 39, 183, 314, 236, 206, 344, 13, 109, 272, 396, 254, 259, 209, 66, 0, 53, 270], [316, 367, 191, 158, 150, 382, 375, 32, 232, 398, 114, 111, 39, 183, 314, 236, 206, 344, 13, 109, 272, 396, 254, 259, 209, 66, 0, 53, 270], [316, 13, 254], [], [367, 191, 158, 150, 382, 375, 32, 232, 398, 114, 111, 39, 183, 314, 236, 206, 344, 109, 272, 396, 259, 209, 66, 0, 53, 270], [150, 183, 344], [], [367, 191, 158, 382, 375, 32, 232, 398, 114, 111, 39, 314, 236, 206, 109, 272, 396, 259, 209, 66, 0, 53, 270], [367, 191, 158, 382, 375, 32, 232, 398, 114, 111, 39, 314, 236, 206, 109, 272, 396, 259, 209, 66, 0, 53, 270], [], [], [], [], [], [20, 246, 401, 160, 241, 173, 351, 96, 29, 52, 249, 51, 163, 22], [], [], [], [], [], [], [], [314, 109, 272, 0], [314, 109, 272, 0], [], [], [402, 158, 382, 232, 398, 114, 39, 236, 396, 259, 209, 66, 218, 270], [402, 158, 382, 232, 398, 114, 39, 236, 396, 259, 209, 66, 218, 270], [], [], [402, 158, 382, 232, 398, 114, 39, 236, 396, 259, 29, 209, 66, 218, 270], [402, 158, 382, 232, 398, 114, 39, 236, 396, 259, 29, 209, 66, 218, 270], [], [], [367, 191, 222, 339, 283, 32, 232, 398, 114, 111, 39, 213, 265, 246, 236, 206, 401, 196, 160, 173, 396, 193, 259, 96, 153, 209, 52, 66, 249, 163, 53, 270], [], [367, 191, 222, 339, 283, 32, 232, 398, 114, 111, 39, 213, 265, 246, 236, 206, 401, 196, 160, 173, 396, 193, 259, 96, 153, 209, 52, 66, 249, 163, 53, 270], [], [], [20, 246, 401, 160, 241, 173, 351, 96, 29, 52, 249, 51, 163, 22], [], [20, 246, 401, 160, 241, 173, 351, 96, 29, 52, 249, 51, 163, 22], [], [], [], [375, 243], [], [375, 243], [375, 243], [375, 243], [375, 243], [], [], [375], [], [375], [], [375], [], [375], [], [375], [375], [375], [375], [], [], [402, 158, 218], [], [402, 158, 218], [], [], [], [], []]
