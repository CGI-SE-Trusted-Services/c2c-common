var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":114,"id":7121,"methods":[{"el":49,"sc":2,"sl":40},{"el":54,"sc":2,"sl":54},{"el":64,"sc":2,"sl":62},{"el":68,"sc":2,"sl":66},{"el":72,"sc":5,"sl":70},{"el":77,"sc":2,"sl":74},{"el":82,"sc":2,"sl":79},{"el":91,"sc":2,"sl":85},{"el":105,"sc":2,"sl":93},{"el":110,"sc":2,"sl":107}],"name":"SubjectAssurance","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_131":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 8","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_159":{"methods":[{"sl":74}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_198":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 33 for assuranceLevel: 1 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_20":{"methods":[{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":89},{"sl":90}]},"test_218":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[0]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_219":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 1 for assuranceLevel: 0 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_225":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[1]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_253":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_263":{"methods":[{"sl":54},{"sl":70},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":71},{"sl":81}]},"test_28":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_285":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":81}]},"test_292":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_315":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_338":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[2]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_353":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_359":{"methods":[{"sl":74}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":76}]},"test_379":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_425":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_439":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 4","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_450":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_479":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_501":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_526":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_530":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_543":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 227 for assuranceLevel: 7 and confidenceLevel: 3","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_562":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":109}]},"test_575":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_589":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_622":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":81}]},"test_644":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 0 for assuranceLevel: 0 and confidenceLevel: 0","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_66":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_669":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_679":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_682":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_694":{"methods":[{"sl":54},{"sl":79}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":81}]},"test_709":{"methods":[{"sl":74}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_787":{"methods":[{"sl":40},{"sl":85},{"sl":93}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":95},{"sl":97},{"sl":99},{"sl":101},{"sl":102},{"sl":103},{"sl":104}]},"test_8":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_808":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_819":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_846":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_857":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_863":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_868":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_876":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_903":{"methods":[{"sl":40},{"sl":66},{"sl":70}],"name":"Verify getAssurranceLevel and getConfidence","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71}]},"test_907":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_915":{"methods":[{"sl":74}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_949":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_95":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_959":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_965":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_973":{"methods":[{"sl":74}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":76}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [868, 907, 338, 450, 439, 808, 876, 225, 644, 526, 253, 198, 218, 501, 562, 543, 66, 903, 589, 379, 219, 669, 682, 131, 530, 315, 679, 959, 787], [868, 907, 338, 450, 439, 808, 876, 225, 644, 526, 253, 198, 218, 501, 562, 543, 66, 903, 589, 379, 219, 669, 682, 131, 530, 315, 679, 959, 787], [526, 589, 131], [], [868, 907, 338, 450, 439, 808, 876, 225, 644, 253, 198, 218, 501, 562, 543, 66, 903, 379, 219, 669, 682, 530, 315, 679, 959, 787], [907, 439, 876], [], [868, 338, 450, 808, 225, 644, 253, 198, 218, 501, 562, 543, 66, 903, 379, 219, 669, 682, 530, 315, 679, 959, 787], [868, 338, 450, 808, 225, 644, 253, 198, 218, 501, 562, 543, 66, 903, 379, 219, 669, 682, 530, 315, 679, 959, 787], [], [], [], [], [], [575, 292, 622, 949, 694, 353, 863, 285, 105, 846, 95, 28, 965, 263], [], [], [], [], [], [], [], [644, 198, 543, 219], [644, 198, 543, 219], [], [], [868, 808, 8, 253, 501, 562, 903, 379, 819, 682, 530, 315, 679, 959], [868, 808, 8, 253, 501, 562, 903, 379, 819, 682, 530, 315, 679, 959], [], [], [868, 808, 8, 253, 501, 562, 903, 379, 819, 682, 530, 315, 679, 959, 263], [868, 808, 8, 253, 501, 562, 903, 379, 819, 682, 530, 315, 679, 959, 263], [], [], [868, 425, 575, 338, 450, 808, 857, 292, 225, 253, 218, 501, 353, 915, 66, 863, 379, 105, 973, 669, 709, 846, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [], [868, 425, 575, 338, 450, 808, 857, 292, 225, 253, 218, 501, 353, 915, 66, 863, 379, 105, 973, 669, 709, 846, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [], [], [575, 292, 622, 949, 694, 353, 863, 285, 105, 846, 95, 28, 965, 263], [], [575, 292, 622, 949, 694, 353, 863, 285, 105, 846, 95, 28, 965, 263], [], [], [], [20, 787], [], [20, 787], [20, 787], [20, 787], [20, 787], [], [], [787], [], [787], [], [787], [], [787], [], [787], [787], [787], [787], [], [], [8, 562, 819], [], [8, 562, 819], [], [], [], [], []]
