var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":114,"id":7402,"methods":[{"el":49,"sc":2,"sl":40},{"el":54,"sc":2,"sl":54},{"el":64,"sc":2,"sl":62},{"el":68,"sc":2,"sl":66},{"el":72,"sc":5,"sl":70},{"el":77,"sc":2,"sl":74},{"el":82,"sc":2,"sl":79},{"el":91,"sc":2,"sl":85},{"el":105,"sc":2,"sl":93},{"el":110,"sc":2,"sl":107}],"name":"SubjectAssurance","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1010":{"methods":[{"sl":74}],"name":"Verify that multiple payload works for version 1 of secured DENM message","pass":true,"statements":[{"sl":76}]},"test_102":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 2 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_105":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_13":{"methods":[{"sl":54},{"sl":66},{"sl":70},{"sl":74},{"sl":79},{"sl":107}],"name":"Verify interoperability with version 2 certificates generated by ETSI TS 10309603 test suite.","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":76},{"sl":81},{"sl":109}]},"test_15":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_158":{"methods":[{"sl":74}],"name":"Verify that multiple payload works for version 1 of secured CAM message","pass":true,"statements":[{"sl":76}]},"test_2":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_219":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[0]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_221":{"methods":[{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":89},{"sl":90}]},"test_226":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_242":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_28":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_283":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_295":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_306":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_319":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_350":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":81}]},"test_361":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_365":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[1]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_368":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that certificate signature R point normalises signature r value to X only","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_37":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 2 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_38":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_418":{"methods":[{"sl":54},{"sl":70},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":71},{"sl":81}]},"test_448":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_457":{"methods":[{"sl":74}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":76}]},"test_472":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_505":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_512":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 1 for assuranceLevel: 0 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_545":{"methods":[{"sl":54},{"sl":79}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":81}]},"test_569":{"methods":[{"sl":74}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":76}]},"test_572":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_576":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_579":{"methods":[{"sl":74}],"name":"Generate version 2 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_586":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 4","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_589":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[2]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_621":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 8","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_637":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_670":{"methods":[{"sl":74}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[1]","pass":true,"statements":[{"sl":76}]},"test_680":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_685":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_686":{"methods":[{"sl":74}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_699":{"methods":[{"sl":74}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":76}]},"test_715":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_723":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_746":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":81}]},"test_764":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_798":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 2 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_819":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 2 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_852":{"methods":[{"sl":74}],"name":"Generate version 1 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_853":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_855":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_860":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 2 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_884":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_885":{"methods":[{"sl":40},{"sl":85},{"sl":93}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":95},{"sl":97},{"sl":99},{"sl":101},{"sl":102},{"sl":103},{"sl":104}]},"test_899":{"methods":[{"sl":74}],"name":"Generate version 1 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_90":{"methods":[{"sl":74}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[0]","pass":true,"statements":[{"sl":76}]},"test_909":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":109}]},"test_912":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 227 for assuranceLevel: 7 and confidenceLevel: 3","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_929":{"methods":[{"sl":40}],"name":"Verify that subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_933":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 0 for assuranceLevel: 0 and confidenceLevel: 0","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_936":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that subjectAssurance calculates a byte value of: 33 for assuranceLevel: 1 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_950":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_959":{"methods":[{"sl":40},{"sl":66},{"sl":70}],"name":"Verify getAssurranceLevel and getConfidence","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71}]},"test_973":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 2 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_978":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_995":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate version 1 Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [621, 448, 102, 680, 973, 959, 586, 912, 723, 855, 798, 933, 909, 295, 764, 819, 860, 936, 929, 589, 28, 472, 283, 512, 995, 37, 572, 219, 2, 365, 576, 885], [621, 448, 102, 680, 973, 959, 586, 912, 723, 855, 798, 933, 909, 295, 764, 819, 860, 936, 929, 589, 28, 472, 283, 512, 995, 37, 572, 219, 2, 365, 576, 885], [621, 680, 2], [], [448, 102, 973, 959, 586, 912, 723, 855, 798, 933, 909, 295, 764, 819, 860, 936, 929, 589, 28, 472, 283, 512, 995, 37, 572, 219, 365, 576, 885], [586, 929, 472], [], [448, 102, 973, 959, 912, 723, 855, 798, 933, 909, 295, 764, 819, 860, 936, 589, 28, 283, 512, 995, 37, 572, 219, 365, 576, 885], [448, 102, 973, 959, 912, 723, 855, 798, 933, 909, 295, 764, 819, 860, 936, 589, 28, 283, 512, 995, 37, 572, 219, 365, 576, 885], [], [], [], [], [], [306, 853, 361, 13, 242, 105, 15, 746, 38, 350, 637, 418, 715, 545, 368], [], [], [], [], [], [], [], [912, 933, 936, 512], [912, 933, 936, 512], [], [], [448, 102, 505, 973, 959, 723, 855, 13, 798, 978, 909, 884, 685, 295, 764, 819, 860, 28, 283, 995, 37, 572, 576], [448, 102, 505, 973, 959, 723, 855, 13, 798, 978, 909, 884, 685, 295, 764, 819, 860, 28, 283, 995, 37, 572, 576], [], [], [448, 102, 505, 973, 959, 723, 855, 13, 798, 978, 909, 884, 685, 295, 764, 819, 860, 28, 283, 995, 37, 572, 418, 576], [448, 102, 505, 973, 959, 723, 855, 13, 798, 978, 909, 884, 685, 295, 764, 819, 860, 28, 283, 995, 37, 572, 418, 576], [], [], [306, 448, 102, 90, 569, 973, 853, 319, 158, 852, 686, 361, 723, 855, 13, 798, 950, 242, 699, 1010, 457, 105, 15, 670, 295, 764, 819, 226, 860, 899, 589, 28, 283, 579, 995, 637, 37, 572, 219, 365, 576, 368], [], [306, 448, 102, 90, 569, 973, 853, 319, 158, 852, 686, 361, 723, 855, 13, 798, 950, 242, 699, 1010, 457, 105, 15, 670, 295, 764, 819, 226, 860, 899, 589, 28, 283, 579, 995, 637, 37, 572, 219, 365, 576, 368], [], [], [306, 853, 361, 13, 242, 105, 15, 746, 38, 350, 637, 418, 715, 545, 368], [], [306, 853, 361, 13, 242, 105, 15, 746, 38, 350, 637, 418, 715, 545, 368], [], [], [], [221, 885], [], [221, 885], [221, 885], [221, 885], [221, 885], [], [], [885], [], [885], [], [885], [], [885], [], [885], [885], [885], [885], [], [], [505, 13, 978, 909, 884, 685], [], [505, 13, 978, 909, 884, 685], [], [], [], [], []]
