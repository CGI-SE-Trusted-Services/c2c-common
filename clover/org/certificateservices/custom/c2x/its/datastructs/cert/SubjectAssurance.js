var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":114,"id":2253,"methods":[{"el":49,"sc":2,"sl":40},{"el":54,"sc":2,"sl":54},{"el":64,"sc":2,"sl":62},{"el":68,"sc":2,"sl":66},{"el":72,"sc":5,"sl":70},{"el":77,"sc":2,"sl":74},{"el":82,"sc":2,"sl":79},{"el":91,"sc":2,"sl":85},{"el":105,"sc":2,"sl":93},{"el":110,"sc":2,"sl":107}],"name":"SubjectAssurance","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_103":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_108":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_110":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_111":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_127":{"methods":[{"sl":74}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_132":{"methods":[{"sl":74}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":76}]},"test_136":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_137":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 4","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_139":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_147":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[0]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_156":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[1]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_174":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_178":{"methods":[{"sl":74}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_181":{"methods":[{"sl":74}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":76}]},"test_182":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_183":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_184":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_197":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 33 for assuranceLevel: 1 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_20":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_207":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 1 for assuranceLevel: 0 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_214":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_24":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":81}]},"test_256":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":81}]},"test_26":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_295":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_307":{"methods":[{"sl":54},{"sl":70},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":71},{"sl":81}]},"test_313":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_320":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_323":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[2]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_326":{"methods":[{"sl":40},{"sl":85},{"sl":93}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":95},{"sl":97},{"sl":99},{"sl":101},{"sl":102},{"sl":103},{"sl":104}]},"test_342":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_345":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":109}]},"test_36":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_360":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 0 for assuranceLevel: 0 and confidenceLevel: 0","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_362":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 8","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_365":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_368":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 227 for assuranceLevel: 7 and confidenceLevel: 3","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_38":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_392":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_398":{"methods":[{"sl":54},{"sl":79}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":81}]},"test_406":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_45":{"methods":[{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":89},{"sl":90}]},"test_49":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_65":{"methods":[{"sl":40},{"sl":66},{"sl":70}],"name":"Verify getAssurranceLevel and getConfidence","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71}]},"test_79":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_8":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_82":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_90":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_92":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_93":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_94":{"methods":[{"sl":74}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_97":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_99":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [368, 111, 174, 323, 156, 65, 365, 214, 137, 147, 345, 79, 342, 182, 362, 139, 360, 392, 207, 406, 93, 38, 99, 313, 90, 295, 326, 197, 82], [368, 111, 174, 323, 156, 65, 365, 214, 137, 147, 345, 79, 342, 182, 362, 139, 360, 392, 207, 406, 93, 38, 99, 313, 90, 295, 326, 197, 82], [111, 362, 139], [], [368, 174, 323, 156, 65, 365, 214, 137, 147, 345, 79, 342, 182, 360, 392, 207, 406, 93, 38, 99, 313, 90, 295, 326, 197, 82], [214, 137, 295], [], [368, 174, 323, 156, 65, 365, 147, 345, 79, 342, 182, 360, 392, 207, 406, 93, 38, 99, 313, 90, 326, 197, 82], [368, 174, 323, 156, 65, 365, 147, 345, 79, 342, 182, 360, 392, 207, 406, 93, 38, 99, 313, 90, 326, 197, 82], [], [], [], [], [], [26, 8, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20, 307], [], [], [], [], [], [], [], [368, 360, 207, 197], [368, 360, 207, 197], [], [], [174, 65, 365, 345, 110, 79, 182, 49, 406, 93, 38, 99, 313, 90], [174, 65, 365, 345, 110, 79, 182, 49, 406, 93, 38, 99, 313, 90], [], [], [174, 65, 365, 345, 110, 79, 182, 49, 307, 406, 93, 38, 99, 313, 90], [174, 65, 365, 345, 110, 79, 182, 49, 307, 406, 93, 38, 99, 313, 90], [], [], [26, 127, 174, 108, 103, 323, 156, 92, 365, 147, 183, 79, 342, 182, 36, 1, 97, 392, 184, 20, 406, 181, 93, 38, 136, 99, 313, 178, 90, 94, 132, 82], [], [26, 127, 174, 108, 103, 323, 156, 92, 365, 147, 183, 79, 342, 182, 36, 1, 97, 392, 184, 20, 406, 181, 93, 38, 136, 99, 313, 178, 90, 94, 132, 82], [], [], [26, 8, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20, 307], [], [26, 8, 103, 92, 256, 398, 183, 36, 1, 320, 97, 24, 20, 307], [], [], [], [45, 326], [], [45, 326], [45, 326], [45, 326], [45, 326], [], [], [326], [], [326], [], [326], [], [326], [], [326], [326], [326], [326], [], [], [345, 110, 49], [], [345, 110, 49], [], [], [], [], []]
