var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":114,"id":2253,"methods":[{"el":49,"sc":2,"sl":40},{"el":54,"sc":2,"sl":54},{"el":64,"sc":2,"sl":62},{"el":68,"sc":2,"sl":66},{"el":72,"sc":5,"sl":70},{"el":77,"sc":2,"sl":74},{"el":82,"sc":2,"sl":79},{"el":91,"sc":2,"sl":85},{"el":105,"sc":2,"sl":93},{"el":110,"sc":2,"sl":107}],"name":"SubjectAssurance","sl":28}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_103":{"methods":[{"sl":40},{"sl":66},{"sl":70}],"name":"Verify getAssurranceLevel and getConfidence","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71}]},"test_109":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_119":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 33 for assuranceLevel: 1 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_124":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_140":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_141":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[1]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_144":{"methods":[{"sl":85}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":87},{"sl":88},{"sl":89},{"sl":90}]},"test_162":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":81}]},"test_168":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_170":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_179":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 0 for assuranceLevel: 0 and confidenceLevel: 0","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_182":{"methods":[{"sl":74}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":76}]},"test_2":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_202":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[0]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_205":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_208":{"methods":[{"sl":40},{"sl":74}],"name":"Verify that serialization produces correct output[2]","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_210":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_226":{"methods":[{"sl":40},{"sl":85},{"sl":93}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":95},{"sl":97},{"sl":99},{"sl":101},{"sl":102},{"sl":103},{"sl":104}]},"test_25":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_259":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_26":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_275":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_276":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 1 for assuranceLevel: 0 and confidenceLevel: 1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_287":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":109}]},"test_288":{"methods":[{"sl":74}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_293":{"methods":[{"sl":54},{"sl":79}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":81}]},"test_311":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_313":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76}]},"test_314":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_322":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_324":{"methods":[{"sl":66},{"sl":70},{"sl":107}],"name":"Verify toString","pass":true,"statements":[{"sl":67},{"sl":71},{"sl":109}]},"test_325":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_334":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: 4","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_351":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 8","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_353":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_363":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_365":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_371":{"methods":[{"sl":74}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_372":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_379":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid assuranceLevel: 10","pass":true,"statements":[{"sl":41},{"sl":42}]},"test_381":{"methods":[{"sl":74}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":76}]},"test_384":{"methods":[{"sl":40},{"sl":62}],"name":"Verify that #Error:subjectAssurance calculates a byte value of: 227 for assuranceLevel: 7 and confidenceLevel: 3","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":63}]},"test_394":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_401":{"methods":[{"sl":54},{"sl":79}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":81}]},"test_50":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_55":{"methods":[{"sl":40},{"sl":66},{"sl":70},{"sl":74}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":67},{"sl":71},{"sl":76}]},"test_56":{"methods":[{"sl":40},{"sl":74}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":47},{"sl":48},{"sl":76}]},"test_59":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_61":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_65":{"methods":[{"sl":40}],"name":"Verify that #Error:subjectAssurance throws IllegalArgumentException on invalid confidenceLevel: -1","pass":true,"statements":[{"sl":41},{"sl":44},{"sl":45}]},"test_80":{"methods":[{"sl":54},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81}]},"test_88":{"methods":[{"sl":54},{"sl":74},{"sl":79}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":76},{"sl":81}]},"test_90":{"methods":[{"sl":74}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":76}]},"test_96":{"methods":[{"sl":54},{"sl":70},{"sl":79}],"name":"Verify deserialization","pass":true,"statements":[{"sl":71},{"sl":81}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [353, 170, 394, 141, 384, 50, 210, 226, 325, 372, 124, 379, 314, 140, 334, 275, 276, 202, 56, 65, 119, 109, 365, 208, 179, 287, 103, 55, 351], [353, 170, 394, 141, 384, 50, 210, 226, 325, 372, 124, 379, 314, 140, 334, 275, 276, 202, 56, 65, 119, 109, 365, 208, 179, 287, 103, 55, 351], [379, 314, 351], [], [353, 170, 394, 141, 384, 50, 210, 226, 325, 372, 124, 140, 334, 275, 276, 202, 56, 65, 119, 109, 365, 208, 179, 287, 103, 55], [170, 334, 65], [], [353, 394, 141, 384, 50, 210, 226, 325, 372, 124, 140, 275, 276, 202, 56, 119, 109, 365, 208, 179, 287, 103, 55], [353, 394, 141, 384, 50, 210, 226, 325, 372, 124, 140, 275, 276, 202, 56, 119, 109, 365, 208, 179, 287, 103, 55], [], [], [], [], [], [401, 162, 311, 293, 322, 363, 80, 88, 2, 96, 205, 59, 25, 61], [], [], [], [], [], [], [], [384, 276, 119, 179], [384, 276, 119, 179], [], [], [353, 394, 50, 210, 325, 372, 124, 275, 365, 259, 287, 103, 324, 55], [353, 394, 50, 210, 325, 372, 124, 275, 365, 259, 287, 103, 324, 55], [], [], [353, 394, 50, 210, 325, 372, 124, 275, 365, 259, 96, 287, 103, 324, 55], [353, 394, 50, 210, 325, 372, 124, 275, 365, 259, 96, 287, 103, 324, 55], [], [], [353, 311, 313, 381, 394, 90, 141, 50, 26, 168, 210, 325, 372, 124, 140, 275, 202, 322, 56, 363, 88, 109, 371, 365, 208, 2, 205, 59, 25, 288, 55, 182], [], [353, 311, 313, 381, 394, 90, 141, 50, 26, 168, 210, 325, 372, 124, 140, 275, 202, 322, 56, 363, 88, 109, 371, 365, 208, 2, 205, 59, 25, 288, 55, 182], [], [], [401, 162, 311, 293, 322, 363, 80, 88, 2, 96, 205, 59, 25, 61], [], [401, 162, 311, 293, 322, 363, 80, 88, 2, 96, 205, 59, 25, 61], [], [], [], [226, 144], [], [226, 144], [226, 144], [226, 144], [226, 144], [], [], [226], [], [226], [], [226], [], [226], [], [226], [226], [226], [226], [], [], [259, 287, 324], [], [259, 287, 324], [], [], [], [], []]
