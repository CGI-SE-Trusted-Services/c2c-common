var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":62,"id":2724,"methods":[{"el":42,"sc":2,"sl":40},{"el":46,"sc":2,"sl":44},{"el":58,"sc":2,"sl":51}],"name":"ValidityRestrictionType","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":44},{"sl":51}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_103":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_108":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_113":{"methods":[{"sl":44}],"name":"Verify that time_start_and_duration has bytevalue 2","pass":true,"statements":[{"sl":45}]},"test_118":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns region for 3","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_120":{"methods":[{"sl":44}],"name":"Verify that time_end has bytevalue 0","pass":true,"statements":[{"sl":45}]},"test_127":{"methods":[{"sl":44}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_132":{"methods":[{"sl":44}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":45}]},"test_174":{"methods":[{"sl":44}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_178":{"methods":[{"sl":44}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_181":{"methods":[{"sl":44}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":45}]},"test_182":{"methods":[{"sl":44}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_183":{"methods":[{"sl":44},{"sl":51}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_184":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_20":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_201":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns time_end for 0","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_22":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_231":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns time_start_and_duration for 2","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_24":{"methods":[{"sl":51}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_256":{"methods":[{"sl":51}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_26":{"methods":[{"sl":44},{"sl":51}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_313":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_320":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_325":{"methods":[{"sl":44}],"name":"Verify that time_start_and_end has bytevalue 1","pass":true,"statements":[{"sl":45}]},"test_342":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_36":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_365":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_367":{"methods":[{"sl":44}],"name":"Verify that region has bytevalue 3","pass":true,"statements":[{"sl":45}]},"test_38":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_392":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_394":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns time_start_and_end for 1","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_398":{"methods":[{"sl":51}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_406":{"methods":[{"sl":44}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_66":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_79":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_8":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_82":{"methods":[{"sl":44}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_90":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_92":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_93":{"methods":[{"sl":44}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":45}]},"test_94":{"methods":[{"sl":44}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_97":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_99":{"methods":[{"sl":44}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":45}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [127, 26, 174, 108, 103, 92, 365, 113, 325, 183, 79, 66, 342, 182, 120, 36, 1, 97, 392, 184, 20, 406, 181, 93, 38, 99, 178, 313, 90, 94, 132, 367, 82], [127, 26, 174, 108, 103, 92, 365, 113, 325, 183, 79, 66, 342, 182, 120, 36, 1, 97, 392, 184, 20, 406, 181, 93, 38, 99, 178, 313, 90, 94, 132, 367, 82], [], [], [], [], [], [26, 8, 394, 103, 231, 92, 118, 256, 398, 183, 36, 1, 201, 320, 97, 24, 20, 22], [26, 8, 394, 103, 231, 92, 118, 256, 398, 183, 36, 1, 201, 320, 97, 24, 20, 22], [26, 8, 394, 103, 231, 92, 118, 256, 398, 183, 36, 1, 201, 320, 97, 24, 20, 22], [26, 8, 394, 103, 231, 92, 118, 256, 398, 183, 36, 1, 201, 320, 97, 24, 20, 22], [], [], [], [], [], [], [], []]
