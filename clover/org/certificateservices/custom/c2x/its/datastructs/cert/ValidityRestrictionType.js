var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":62,"id":2724,"methods":[{"el":42,"sc":2,"sl":40},{"el":46,"sc":2,"sl":44},{"el":58,"sc":2,"sl":51}],"name":"ValidityRestrictionType","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_1":{"methods":[{"sl":44}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":45}]},"test_106":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns time_start_and_duration for 2","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_119":{"methods":[{"sl":44},{"sl":51}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_121":{"methods":[{"sl":44}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_123":{"methods":[{"sl":44}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_124":{"methods":[{"sl":44},{"sl":51}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_14":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_142":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_148":{"methods":[{"sl":51}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_150":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_155":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_159":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns region for 3","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_162":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_20":{"methods":[{"sl":44}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_203":{"methods":[{"sl":44}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_207":{"methods":[{"sl":44}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":45}]},"test_216":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_219":{"methods":[{"sl":44}],"name":"Verify that time_end has bytevalue 0","pass":true,"statements":[{"sl":45}]},"test_231":{"methods":[{"sl":51}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_252":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_265":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_266":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_270":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_28":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_288":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_289":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_296":{"methods":[{"sl":44}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":45}]},"test_341":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_35":{"methods":[{"sl":44}],"name":"Verify that region has bytevalue 3","pass":true,"statements":[{"sl":45}]},"test_350":{"methods":[{"sl":44},{"sl":51}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_361":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns time_end for 0","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_384":{"methods":[{"sl":44}],"name":"Verify that time_start_and_end has bytevalue 1","pass":true,"statements":[{"sl":45}]},"test_387":{"methods":[{"sl":44}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":45}]},"test_390":{"methods":[{"sl":51}],"name":"Verify that ValidityRestrictionType.getByValue returns time_start_and_end for 1","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_394":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_395":{"methods":[{"sl":44}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_49":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_56":{"methods":[{"sl":51}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_57":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_64":{"methods":[{"sl":44}],"name":"Verify that time_start_and_duration has bytevalue 2","pass":true,"statements":[{"sl":45}]},"test_80":{"methods":[{"sl":44}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_82":{"methods":[{"sl":44}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":45}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [288, 123, 395, 289, 57, 219, 203, 387, 207, 350, 162, 1, 119, 270, 82, 265, 216, 80, 0, 20, 121, 142, 14, 28, 296, 35, 124, 341, 394, 150, 384, 49, 64], [288, 123, 395, 289, 57, 219, 203, 387, 207, 350, 162, 1, 119, 270, 82, 265, 216, 80, 0, 20, 121, 142, 14, 28, 296, 35, 124, 341, 394, 150, 384, 49, 64], [], [], [], [], [], [266, 289, 252, 148, 57, 106, 56, 231, 350, 390, 119, 361, 265, 0, 14, 159, 124, 155], [266, 289, 252, 148, 57, 106, 56, 231, 350, 390, 119, 361, 265, 0, 14, 159, 124, 155], [266, 289, 252, 148, 57, 106, 56, 231, 350, 390, 119, 361, 265, 0, 14, 159, 124, 155], [266, 289, 252, 148, 57, 106, 56, 231, 350, 390, 119, 361, 265, 0, 14, 159, 124, 155], [], [], [], [], [], [], [], []]
