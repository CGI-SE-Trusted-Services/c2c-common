var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":124,"id":2491,"methods":[{"el":53,"sc":2,"sl":43},{"el":58,"sc":2,"sl":58},{"el":66,"sc":2,"sl":64},{"el":75,"sc":2,"sl":73},{"el":82,"sc":2,"sl":77},{"el":90,"sc":2,"sl":84},{"el":100,"sc":2,"sl":92},{"el":116,"sc":2,"sl":102},{"el":122,"sc":2,"sl":118}],"name":"SubjectInfo","sl":30}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_114":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_122":{"methods":[{"sl":43},{"sl":64},{"sl":73}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":49},{"sl":65},{"sl":74}]},"test_153":{"methods":[{"sl":77}],"name":"Verify serialization","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_160":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_163":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_173":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_191":{"methods":[{"sl":43},{"sl":77}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":79},{"sl":80},{"sl":81}]},"test_193":{"methods":[{"sl":77}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_196":{"methods":[{"sl":77}],"name":"Verify serialization","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_20":{"methods":[{"sl":58},{"sl":64},{"sl":84}],"name":"Verify deserialization","pass":true,"statements":[{"sl":65},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_201":{"methods":[{"sl":118}],"name":"Verify toString","pass":true,"statements":[{"sl":120}]},"test_209":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_22":{"methods":[{"sl":58},{"sl":84}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_222":{"methods":[{"sl":77}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_232":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_236":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_241":{"methods":[{"sl":58},{"sl":84}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_246":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_249":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_259":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_265":{"methods":[{"sl":77}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_270":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_283":{"methods":[{"sl":77}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_32":{"methods":[{"sl":43},{"sl":77}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":79},{"sl":80},{"sl":81}]},"test_339":{"methods":[{"sl":77}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_351":{"methods":[{"sl":58},{"sl":84}],"name":"Verify deserialization","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_367":{"methods":[{"sl":43},{"sl":77}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":79},{"sl":80},{"sl":81}]},"test_369":{"methods":[{"sl":64}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":65}]},"test_376":{"methods":[{"sl":58},{"sl":64},{"sl":73},{"sl":84}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":65},{"sl":74},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_38":{"methods":[{"sl":43},{"sl":92},{"sl":102}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":94},{"sl":95},{"sl":96},{"sl":97},{"sl":99},{"sl":104},{"sl":106},{"sl":108},{"sl":110},{"sl":111},{"sl":112},{"sl":113},{"sl":114},{"sl":115}]},"test_39":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_396":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_398":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_401":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_402":{"methods":[{"sl":118}],"name":"Verify toString","pass":true,"statements":[{"sl":120}]},"test_51":{"methods":[{"sl":58},{"sl":84}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_52":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_66":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_67":{"methods":[{"sl":77}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_96":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [367, 191, 38, 32, 232, 398, 114, 39, 236, 396, 259, 122, 209, 66, 270], [367, 191, 38, 32, 232, 398, 114, 39, 236, 396, 259, 122, 209, 66, 270], [367, 191, 38, 32, 232, 398, 114, 39, 236, 396, 259, 122, 209, 66, 270], [191, 396, 209, 66], [], [367, 38, 32, 232, 398, 114, 39, 236, 259, 122, 270], [122], [], [367, 38, 32, 232, 398, 114, 39, 236, 259, 270], [], [], [], [], [], [], [20, 246, 401, 160, 241, 173, 376, 351, 96, 52, 249, 51, 163, 22], [], [], [], [], [], [20, 232, 398, 114, 39, 236, 376, 369, 396, 259, 122, 209, 66, 270], [20, 232, 398, 114, 39, 236, 376, 369, 396, 259, 122, 209, 66, 270], [], [], [], [], [], [], [], [232, 398, 114, 39, 236, 376, 396, 259, 122, 209, 66, 270], [232, 398, 114, 39, 236, 376, 396, 259, 122, 209, 66, 270], [], [], [367, 191, 222, 283, 339, 67, 32, 232, 398, 114, 39, 265, 246, 236, 401, 196, 160, 173, 396, 193, 259, 96, 153, 209, 52, 66, 249, 163, 270], [], [367, 191, 222, 283, 339, 67, 32, 232, 398, 114, 39, 265, 246, 236, 401, 196, 160, 173, 396, 193, 259, 96, 153, 209, 52, 66, 249, 163, 270], [367, 191, 222, 283, 339, 67, 32, 232, 398, 114, 39, 265, 246, 236, 401, 196, 160, 173, 396, 193, 259, 96, 153, 209, 52, 66, 249, 163, 270], [367, 191, 222, 283, 339, 67, 32, 232, 398, 114, 39, 265, 246, 236, 401, 196, 160, 173, 396, 193, 259, 96, 153, 209, 52, 66, 249, 163, 270], [], [], [20, 246, 401, 160, 241, 173, 376, 351, 96, 52, 249, 51, 163, 22], [], [20, 246, 401, 160, 241, 173, 376, 351, 96, 52, 249, 51, 163, 22], [20, 246, 401, 160, 241, 173, 376, 351, 96, 52, 249, 51, 163, 22], [20, 246, 401, 160, 241, 173, 376, 351, 96, 52, 249, 51, 163, 22], [20, 246, 401, 160, 241, 173, 376, 351, 96, 52, 249, 51, 163, 22], [], [], [38], [], [38], [38], [38], [38], [], [38], [], [], [38], [], [38], [], [38], [], [38], [], [38], [38], [38], [38], [38], [38], [], [], [402, 201], [], [402, 201], [], [], [], []]
