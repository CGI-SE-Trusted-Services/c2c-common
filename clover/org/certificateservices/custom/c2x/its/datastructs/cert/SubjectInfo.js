var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":124,"id":2491,"methods":[{"el":53,"sc":2,"sl":43},{"el":58,"sc":2,"sl":58},{"el":66,"sc":2,"sl":64},{"el":75,"sc":2,"sl":73},{"el":82,"sc":2,"sl":77},{"el":90,"sc":2,"sl":84},{"el":100,"sc":2,"sl":92},{"el":116,"sc":2,"sl":102},{"el":122,"sc":2,"sl":118}],"name":"SubjectInfo","sl":30}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":118}],"name":"Verify toString","pass":true,"statements":[{"sl":120}]},"test_105":{"methods":[{"sl":58},{"sl":84}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_116":{"methods":[{"sl":43},{"sl":77}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":79},{"sl":80},{"sl":81}]},"test_120":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_123":{"methods":[{"sl":58},{"sl":84}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_13":{"methods":[{"sl":77}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_130":{"methods":[{"sl":58},{"sl":64},{"sl":73},{"sl":84}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":65},{"sl":74},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_135":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_152":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_158":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_166":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_170":{"methods":[{"sl":77}],"name":"Verify serialization","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_185":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_202":{"methods":[{"sl":58},{"sl":64},{"sl":84}],"name":"Verify deserialization","pass":true,"statements":[{"sl":65},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_216":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_221":{"methods":[{"sl":58},{"sl":84}],"name":"Verify deserialization","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_223":{"methods":[{"sl":118}],"name":"Verify toString","pass":true,"statements":[{"sl":120}]},"test_244":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_271":{"methods":[{"sl":58},{"sl":84}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_274":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_275":{"methods":[{"sl":77}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_284":{"methods":[{"sl":43},{"sl":77}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":79},{"sl":80},{"sl":81}]},"test_301":{"methods":[{"sl":77}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_314":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_322":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_335":{"methods":[{"sl":43},{"sl":64},{"sl":73}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":49},{"sl":65},{"sl":74}]},"test_336":{"methods":[{"sl":77}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_34":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_364":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_382":{"methods":[{"sl":43},{"sl":92},{"sl":102}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":94},{"sl":95},{"sl":96},{"sl":97},{"sl":99},{"sl":104},{"sl":106},{"sl":108},{"sl":110},{"sl":111},{"sl":112},{"sl":113},{"sl":114},{"sl":115}]},"test_402":{"methods":[{"sl":64}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":65}]},"test_403":{"methods":[{"sl":43},{"sl":77}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":79},{"sl":80},{"sl":81}]},"test_405":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_406":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":48},{"sl":51},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_64":{"methods":[{"sl":77}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_7":{"methods":[{"sl":77}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]},"test_73":{"methods":[{"sl":43},{"sl":64},{"sl":73},{"sl":77}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":44},{"sl":45},{"sl":46},{"sl":65},{"sl":74},{"sl":79},{"sl":80},{"sl":81}]},"test_81":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_85":{"methods":[{"sl":58},{"sl":77},{"sl":84}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81},{"sl":86},{"sl":87},{"sl":88},{"sl":89}]},"test_88":{"methods":[{"sl":77}],"name":"Verify serialization","pass":true,"statements":[{"sl":79},{"sl":80},{"sl":81}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [335, 120, 382, 73, 364, 284, 405, 403, 274, 314, 406, 185, 244, 116, 135], [335, 120, 382, 73, 364, 284, 405, 403, 274, 314, 406, 185, 244, 116, 135], [335, 120, 382, 73, 364, 284, 405, 403, 274, 314, 406, 185, 244, 116, 135], [73, 284, 274, 135], [], [335, 120, 382, 364, 405, 403, 314, 406, 185, 244, 116], [335], [], [120, 382, 364, 405, 403, 314, 406, 185, 244, 116], [], [], [], [], [], [], [158, 322, 202, 271, 34, 85, 81, 105, 130, 123, 166, 152, 216, 221], [], [], [], [], [], [335, 120, 73, 364, 402, 405, 202, 274, 314, 406, 185, 130, 244, 135], [335, 120, 73, 364, 402, 405, 202, 274, 314, 406, 185, 130, 244, 135], [], [], [], [], [], [], [], [335, 120, 73, 364, 405, 274, 314, 406, 185, 130, 244, 135], [335, 120, 73, 364, 405, 274, 314, 406, 185, 130, 244, 135], [], [], [120, 158, 73, 88, 13, 364, 284, 275, 322, 405, 403, 7, 34, 274, 85, 314, 336, 81, 406, 170, 185, 244, 166, 152, 116, 216, 135, 301, 64], [], [120, 158, 73, 88, 13, 364, 284, 275, 322, 405, 403, 7, 34, 274, 85, 314, 336, 81, 406, 170, 185, 244, 166, 152, 116, 216, 135, 301, 64], [120, 158, 73, 88, 13, 364, 284, 275, 322, 405, 403, 7, 34, 274, 85, 314, 336, 81, 406, 170, 185, 244, 166, 152, 116, 216, 135, 301, 64], [120, 158, 73, 88, 13, 364, 284, 275, 322, 405, 403, 7, 34, 274, 85, 314, 336, 81, 406, 170, 185, 244, 166, 152, 116, 216, 135, 301, 64], [], [], [158, 322, 202, 271, 34, 85, 81, 105, 130, 123, 166, 152, 216, 221], [], [158, 322, 202, 271, 34, 85, 81, 105, 130, 123, 166, 152, 216, 221], [158, 322, 202, 271, 34, 85, 81, 105, 130, 123, 166, 152, 216, 221], [158, 322, 202, 271, 34, 85, 81, 105, 130, 123, 166, 152, 216, 221], [158, 322, 202, 271, 34, 85, 81, 105, 130, 123, 166, 152, 216, 221], [], [], [382], [], [382], [382], [382], [382], [], [382], [], [], [382], [], [382], [], [382], [], [382], [], [382], [382], [382], [382], [382], [382], [], [], [223, 102], [], [223, 102], [], [], [], []]
