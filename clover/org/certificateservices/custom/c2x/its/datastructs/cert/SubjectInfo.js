var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":134,"id":7643,"methods":[{"el":55,"sc":2,"sl":45},{"el":60,"sc":2,"sl":60},{"el":68,"sc":2,"sl":66},{"el":77,"sc":2,"sl":75},{"el":84,"sc":2,"sl":79},{"el":92,"sc":2,"sl":86},{"el":102,"sc":2,"sl":94},{"el":118,"sc":2,"sl":104},{"el":132,"sc":2,"sl":120}],"name":"SubjectInfo","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1010":{"methods":[{"sl":79}],"name":"Verify that multiple payload works for version 1 of secured DENM message","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_102":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 2 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_105":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_13":{"methods":[{"sl":60},{"sl":79},{"sl":86},{"sl":120}],"name":"Verify interoperability with version 2 certificates generated by ETSI TS 10309603 test suite.","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91},{"sl":122},{"sl":123},{"sl":124}]},"test_15":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_158":{"methods":[{"sl":79}],"name":"Verify that multiple payload works for version 1 of secured CAM message","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_226":{"methods":[{"sl":79}],"name":"Verify serialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_231":{"methods":[{"sl":60},{"sl":66},{"sl":75},{"sl":86}],"name":"Verify deserialization of SubjectInfo","pass":true,"statements":[{"sl":67},{"sl":76},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_242":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_28":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_283":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_295":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_303":{"methods":[{"sl":45},{"sl":94},{"sl":104}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":96},{"sl":97},{"sl":98},{"sl":99},{"sl":101},{"sl":106},{"sl":108},{"sl":110},{"sl":112},{"sl":113},{"sl":114},{"sl":115},{"sl":116},{"sl":117}]},"test_306":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_34":{"methods":[{"sl":45},{"sl":66},{"sl":75}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":76}]},"test_350":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_361":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_368":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Verify that certificate signature R point normalises signature r value to X only","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_37":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 2 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_38":{"methods":[{"sl":60},{"sl":66},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":67},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_448":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_450":{"methods":[{"sl":66}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":67}]},"test_457":{"methods":[{"sl":79}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_505":{"methods":[{"sl":120}],"name":"Verify toString","pass":true,"statements":[{"sl":122},{"sl":123},{"sl":126}]},"test_545":{"methods":[{"sl":60},{"sl":86}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_561":{"methods":[{"sl":79}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_569":{"methods":[{"sl":79}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_572":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_576":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_579":{"methods":[{"sl":79}],"name":"Generate version 2 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_637":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_670":{"methods":[{"sl":79}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[1]","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_685":{"methods":[{"sl":120}],"name":"Verify toString","pass":true,"statements":[{"sl":122},{"sl":123},{"sl":126}]},"test_686":{"methods":[{"sl":79}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_699":{"methods":[{"sl":79}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_715":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_723":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_746":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_764":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_798":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 2 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_819":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 2 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_852":{"methods":[{"sl":79}],"name":"Generate version 1 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_853":{"methods":[{"sl":60},{"sl":79},{"sl":86}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_855":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_860":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 2 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_884":{"methods":[{"sl":120}],"name":"Verify toString","pass":true,"statements":[{"sl":122},{"sl":123},{"sl":126}]},"test_899":{"methods":[{"sl":79}],"name":"Generate version 1 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_90":{"methods":[{"sl":79}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[0]","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_950":{"methods":[{"sl":79}],"name":"Verify serialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83}]},"test_973":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 2 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]},"test_975":{"methods":[{"sl":120}],"name":"Verify toString","pass":true,"statements":[{"sl":122},{"sl":123},{"sl":124},{"sl":126}]},"test_995":{"methods":[{"sl":45},{"sl":66},{"sl":75},{"sl":79}],"name":"Generate version 1 Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":50},{"sl":53},{"sl":67},{"sl":76},{"sl":81},{"sl":82},{"sl":83}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [448, 102, 973, 723, 855, 798, 34, 295, 764, 819, 860, 28, 283, 995, 37, 572, 303, 576], [448, 102, 973, 723, 855, 798, 34, 295, 764, 819, 860, 28, 283, 995, 37, 572, 303, 576], [448, 102, 973, 723, 855, 798, 34, 295, 764, 819, 860, 28, 283, 995, 37, 572, 303, 576], [102, 855, 764, 572], [], [448, 973, 723, 798, 34, 295, 819, 860, 28, 283, 995, 37, 303, 576], [34], [], [448, 973, 723, 798, 295, 819, 860, 28, 283, 995, 37, 303, 576], [], [], [], [], [], [], [306, 853, 361, 13, 242, 105, 231, 15, 746, 38, 350, 637, 715, 545, 368], [], [], [], [], [], [448, 102, 973, 450, 723, 855, 798, 231, 34, 295, 764, 819, 860, 28, 38, 283, 995, 37, 572, 576], [448, 102, 973, 450, 723, 855, 798, 231, 34, 295, 764, 819, 860, 28, 38, 283, 995, 37, 572, 576], [], [], [], [], [], [], [], [448, 102, 973, 723, 855, 798, 231, 34, 295, 764, 819, 860, 28, 283, 995, 37, 572, 576], [448, 102, 973, 723, 855, 798, 231, 34, 295, 764, 819, 860, 28, 283, 995, 37, 572, 576], [], [], [306, 448, 102, 90, 569, 973, 853, 158, 852, 686, 361, 723, 855, 13, 798, 950, 242, 699, 1010, 457, 105, 561, 15, 670, 295, 764, 819, 226, 860, 899, 28, 283, 579, 995, 637, 37, 572, 576, 368], [], [306, 448, 102, 90, 569, 973, 853, 158, 852, 686, 361, 723, 855, 13, 798, 950, 242, 699, 1010, 457, 105, 561, 15, 670, 295, 764, 819, 226, 860, 899, 28, 283, 579, 995, 637, 37, 572, 576, 368], [306, 448, 102, 90, 569, 973, 853, 158, 852, 686, 361, 723, 855, 13, 798, 950, 242, 699, 1010, 457, 105, 561, 15, 670, 295, 764, 819, 226, 860, 899, 28, 283, 579, 995, 637, 37, 572, 576, 368], [306, 448, 102, 90, 569, 973, 853, 158, 852, 686, 361, 723, 855, 13, 798, 950, 242, 699, 1010, 457, 105, 561, 15, 670, 295, 764, 819, 226, 860, 899, 28, 283, 579, 995, 637, 37, 572, 576, 368], [], [], [306, 853, 361, 13, 242, 105, 231, 15, 746, 38, 350, 637, 715, 545, 368], [], [306, 853, 361, 13, 242, 105, 231, 15, 746, 38, 350, 637, 715, 545, 368], [306, 853, 361, 13, 242, 105, 231, 15, 746, 38, 350, 637, 715, 545, 368], [306, 853, 361, 13, 242, 105, 231, 15, 746, 38, 350, 637, 715, 545, 368], [306, 853, 361, 13, 242, 105, 231, 15, 746, 38, 350, 637, 715, 545, 368], [], [], [303], [], [303], [303], [303], [303], [], [303], [], [], [303], [], [303], [], [303], [], [303], [], [303], [303], [303], [303], [303], [303], [], [], [505, 13, 884, 685, 975], [], [505, 13, 884, 685, 975], [505, 13, 884, 685, 975], [13, 975], [], [505, 884, 685, 975], [], [], [], [], [], [], [], []]
