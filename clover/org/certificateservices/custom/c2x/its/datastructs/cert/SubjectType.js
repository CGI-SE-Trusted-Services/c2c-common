var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":76,"id":7707,"methods":[{"el":58,"sc":2,"sl":56},{"el":62,"sc":2,"sl":60},{"el":74,"sc":2,"sl":67}],"name":"SubjectType","sl":46}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1010":{"methods":[{"sl":60}],"name":"Verify that multiple payload works for version 1 of secured DENM message","pass":true,"statements":[{"sl":61}]},"test_102":{"methods":[{"sl":60}],"name":"Generate version 2 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_105":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_13":{"methods":[{"sl":60},{"sl":67}],"name":"Verify interoperability with version 2 certificates generated by ETSI TS 10309603 test suite.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_15":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_158":{"methods":[{"sl":60}],"name":"Verify that multiple payload works for version 1 of secured CAM message","pass":true,"statements":[{"sl":61}]},"test_226":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_231":{"methods":[{"sl":67}],"name":"Verify deserialization of SubjectInfo","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_242":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_278":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_authority for 2","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_28":{"methods":[{"sl":60}],"name":"Generate version 1 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":61}]},"test_283":{"methods":[{"sl":60}],"name":"Generate version 1 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_295":{"methods":[{"sl":60}],"name":"Generate version 1 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_306":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_350":{"methods":[{"sl":67}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_361":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_368":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that certificate signature R point normalises signature r value to X only","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_37":{"methods":[{"sl":60}],"name":"Generate version 2 Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_38":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_429":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns crl_signer for 5","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_448":{"methods":[{"sl":60}],"name":"Generate version 1 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_457":{"methods":[{"sl":60}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":61}]},"test_465":{"methods":[{"sl":60}],"name":"Verify that authorization_ticket has bytevalue 1","pass":true,"statements":[{"sl":61}]},"test_522":{"methods":[{"sl":60}],"name":"Verify that crl_signer has bytevalue 5","pass":true,"statements":[{"sl":61}]},"test_545":{"methods":[{"sl":67}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_554":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_ticket for 1","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_561":{"methods":[{"sl":60}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":61}]},"test_569":{"methods":[{"sl":60}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":61}]},"test_572":{"methods":[{"sl":60}],"name":"Generate version 1 Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_576":{"methods":[{"sl":60}],"name":"Generate version 1 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":61}]},"test_579":{"methods":[{"sl":60}],"name":"Generate version 2 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_591":{"methods":[{"sl":60}],"name":"Verify that enrollment_credential has bytevalue 0","pass":true,"statements":[{"sl":61}]},"test_637":{"methods":[{"sl":60},{"sl":67}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_666":{"methods":[{"sl":60}],"name":"Verify that root_ca has bytevalue 4","pass":true,"statements":[{"sl":61}]},"test_670":{"methods":[{"sl":60}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[1]","pass":true,"statements":[{"sl":61}]},"test_675":{"methods":[{"sl":60}],"name":"Verify that enrollment_authority has bytevalue 3","pass":true,"statements":[{"sl":61}]},"test_686":{"methods":[{"sl":60}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_699":{"methods":[{"sl":60}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":61}]},"test_715":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_723":{"methods":[{"sl":60}],"name":"Generate version 1 Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_746":{"methods":[{"sl":67}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_764":{"methods":[{"sl":60}],"name":"Generate version 1 Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_78":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_credential for 0","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_798":{"methods":[{"sl":60}],"name":"Generate version 2 RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":61}]},"test_819":{"methods":[{"sl":60}],"name":"Generate version 2 Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_852":{"methods":[{"sl":60}],"name":"Generate version 1 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_853":{"methods":[{"sl":60},{"sl":67}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_855":{"methods":[{"sl":60}],"name":"Generate version 1 Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_860":{"methods":[{"sl":60}],"name":"Generate version 2 RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":61}]},"test_863":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns root_ca for 4","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_868":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_authority for 3","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_899":{"methods":[{"sl":60}],"name":"Generate version 1 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_90":{"methods":[{"sl":60}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[0]","pass":true,"statements":[{"sl":61}]},"test_903":{"methods":[{"sl":60}],"name":"Verify that authorization_authority has bytevalue 2","pass":true,"statements":[{"sl":61}]},"test_950":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_973":{"methods":[{"sl":60}],"name":"Generate version 2 Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_995":{"methods":[{"sl":60}],"name":"Generate version 1 Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":61}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [306, 448, 102, 90, 569, 666, 973, 853, 158, 852, 686, 361, 723, 522, 855, 13, 798, 950, 242, 699, 1010, 457, 903, 105, 561, 15, 670, 295, 764, 819, 226, 860, 899, 28, 675, 283, 465, 579, 995, 637, 37, 572, 591, 576, 368], [306, 448, 102, 90, 569, 666, 973, 853, 158, 852, 686, 361, 723, 522, 855, 13, 798, 950, 242, 699, 1010, 457, 903, 105, 561, 15, 670, 295, 764, 819, 226, 860, 899, 28, 675, 283, 465, 579, 995, 637, 37, 572, 591, 576, 368], [], [], [], [], [], [306, 853, 868, 361, 13, 78, 242, 105, 231, 15, 863, 746, 429, 38, 554, 350, 637, 715, 278, 545, 368], [306, 853, 868, 361, 13, 78, 242, 105, 231, 15, 863, 746, 429, 38, 554, 350, 637, 715, 278, 545, 368], [306, 853, 868, 361, 13, 78, 242, 105, 231, 15, 863, 746, 429, 38, 554, 350, 637, 715, 278, 545, 368], [306, 853, 868, 361, 13, 78, 242, 105, 231, 15, 863, 746, 429, 38, 554, 350, 637, 715, 278, 545, 368], [], [], [], [], [], []]
