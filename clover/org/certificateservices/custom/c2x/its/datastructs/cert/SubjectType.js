var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":76,"id":2549,"methods":[{"el":58,"sc":2,"sl":56},{"el":62,"sc":2,"sl":60},{"el":74,"sc":2,"sl":67}],"name":"SubjectType","sl":46}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_1":{"methods":[{"sl":60}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":61}]},"test_108":{"methods":[{"sl":60}],"name":"Verify that enrollment_credential has bytevalue 0","pass":true,"statements":[{"sl":61}]},"test_119":{"methods":[{"sl":60},{"sl":67}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_12":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns root_ca for 4","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_121":{"methods":[{"sl":60}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_123":{"methods":[{"sl":60}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_124":{"methods":[{"sl":60},{"sl":67}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_14":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_142":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_148":{"methods":[{"sl":67}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_150":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_161":{"methods":[{"sl":60}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":61}]},"test_162":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_174":{"methods":[{"sl":60}],"name":"Verify that enrollment_authority has bytevalue 3","pass":true,"statements":[{"sl":61}]},"test_20":{"methods":[{"sl":60}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_203":{"methods":[{"sl":60}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_207":{"methods":[{"sl":60}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":61}]},"test_21":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_ticket for 1","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_216":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_231":{"methods":[{"sl":67}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_242":{"methods":[{"sl":67}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_252":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_265":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_266":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_28":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_288":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_289":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_292":{"methods":[{"sl":60}],"name":"Verify that crl_signer has bytevalue 5","pass":true,"statements":[{"sl":61}]},"test_296":{"methods":[{"sl":60}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_325":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns crl_signer for 5","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_332":{"methods":[{"sl":60}],"name":"Verify that authorization_authority has bytevalue 2","pass":true,"statements":[{"sl":61}]},"test_341":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_346":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_authority for 2","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_350":{"methods":[{"sl":60},{"sl":67}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_387":{"methods":[{"sl":60}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":61}]},"test_394":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_395":{"methods":[{"sl":60}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_405":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_authority for 3","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_44":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_credential for 0","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_49":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_56":{"methods":[{"sl":67}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_57":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_80":{"methods":[{"sl":60}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_82":{"methods":[{"sl":60}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":61}]},"test_89":{"methods":[{"sl":60}],"name":"Verify that root_ca has bytevalue 4","pass":true,"statements":[{"sl":61}]},"test_97":{"methods":[{"sl":60}],"name":"Verify that authorization_ticket has bytevalue 1","pass":true,"statements":[{"sl":61}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [288, 89, 123, 395, 289, 174, 57, 203, 387, 161, 207, 350, 162, 1, 119, 97, 82, 265, 216, 80, 0, 332, 20, 121, 142, 28, 14, 108, 296, 124, 341, 394, 150, 292, 49], [288, 89, 123, 395, 289, 174, 57, 203, 387, 161, 207, 350, 162, 1, 119, 97, 82, 265, 216, 80, 0, 332, 20, 121, 142, 28, 14, 108, 296, 124, 341, 394, 150, 292, 49], [], [], [], [], [], [325, 266, 289, 252, 148, 405, 57, 56, 242, 231, 12, 350, 346, 119, 265, 21, 44, 0, 14, 124], [325, 266, 289, 252, 148, 405, 57, 56, 242, 231, 12, 350, 346, 119, 265, 21, 44, 0, 14, 124], [325, 266, 289, 252, 148, 405, 57, 56, 242, 231, 12, 350, 346, 119, 265, 21, 44, 0, 14, 124], [325, 266, 289, 252, 148, 405, 57, 56, 242, 231, 12, 350, 346, 119, 265, 21, 44, 0, 14, 124], [], [], [], [], [], []]
