var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":76,"id":2549,"methods":[{"el":58,"sc":2,"sl":56},{"el":62,"sc":2,"sl":60},{"el":74,"sc":2,"sl":67}],"name":"SubjectType","sl":46}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_114":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_151":{"methods":[{"sl":60}],"name":"Verify that root_ca has bytevalue 4","pass":true,"statements":[{"sl":61}]},"test_153":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_160":{"methods":[{"sl":60},{"sl":67}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_163":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_173":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_191":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_193":{"methods":[{"sl":60}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":61}]},"test_196":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_20":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_208":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_ticket for 1","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_209":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_219":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_authority for 3","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_22":{"methods":[{"sl":67}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_222":{"methods":[{"sl":60}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_224":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_authority for 2","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_228":{"methods":[{"sl":60}],"name":"Verify that enrollment_credential has bytevalue 0","pass":true,"statements":[{"sl":61}]},"test_232":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_236":{"methods":[{"sl":60}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":61}]},"test_241":{"methods":[{"sl":67}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_246":{"methods":[{"sl":60},{"sl":67}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_249":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_255":{"methods":[{"sl":60}],"name":"Verify that enrollment_authority has bytevalue 3","pass":true,"statements":[{"sl":61}]},"test_259":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_265":{"methods":[{"sl":60}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_270":{"methods":[{"sl":60}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":61}]},"test_274":{"methods":[{"sl":60}],"name":"Verify that crl_signer has bytevalue 5","pass":true,"statements":[{"sl":61}]},"test_283":{"methods":[{"sl":60}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_293":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns root_ca for 4","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_32":{"methods":[{"sl":60}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_320":{"methods":[{"sl":60}],"name":"Verify that authorization_authority has bytevalue 2","pass":true,"statements":[{"sl":61}]},"test_339":{"methods":[{"sl":60}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":61}]},"test_351":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_367":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_376":{"methods":[{"sl":67}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_39":{"methods":[{"sl":60}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_396":{"methods":[{"sl":60}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_398":{"methods":[{"sl":60}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_401":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_406":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_credential for 0","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_51":{"methods":[{"sl":67}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_52":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_66":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_67":{"methods":[{"sl":60}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":61}]},"test_70":{"methods":[{"sl":60}],"name":"Verify that authorization_ticket has bytevalue 1","pass":true,"statements":[{"sl":61}]},"test_87":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns crl_signer for 5","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_96":{"methods":[{"sl":60},{"sl":67}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [367, 255, 191, 222, 283, 339, 228, 67, 32, 232, 398, 114, 39, 265, 246, 236, 401, 196, 160, 173, 396, 151, 193, 259, 96, 153, 320, 274, 209, 52, 66, 249, 70, 163, 270], [367, 255, 191, 222, 283, 339, 228, 67, 32, 232, 398, 114, 39, 265, 246, 236, 401, 196, 160, 173, 396, 151, 193, 259, 96, 153, 320, 274, 209, 52, 66, 249, 70, 163, 270], [], [], [], [], [], [406, 20, 224, 208, 246, 401, 160, 241, 173, 376, 219, 351, 87, 96, 293, 52, 249, 51, 163, 22], [406, 20, 224, 208, 246, 401, 160, 241, 173, 376, 219, 351, 87, 96, 293, 52, 249, 51, 163, 22], [406, 20, 224, 208, 246, 401, 160, 241, 173, 376, 219, 351, 87, 96, 293, 52, 249, 51, 163, 22], [406, 20, 224, 208, 246, 401, 160, 241, 173, 376, 219, 351, 87, 96, 293, 52, 249, 51, 163, 22], [], [], [], [], [], []]
