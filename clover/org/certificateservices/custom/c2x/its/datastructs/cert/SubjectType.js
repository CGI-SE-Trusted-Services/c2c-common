var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":76,"id":7417,"methods":[{"el":58,"sc":2,"sl":56},{"el":62,"sc":2,"sl":60},{"el":74,"sc":2,"sl":67}],"name":"SubjectType","sl":46}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":60},{"sl":67}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_159":{"methods":[{"sl":60}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_253":{"methods":[{"sl":60}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_28":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_285":{"methods":[{"sl":67}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_292":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_315":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_321":{"methods":[{"sl":60}],"name":"Verify that enrollment_credential has bytevalue 0","pass":true,"statements":[{"sl":61}]},"test_353":{"methods":[{"sl":60},{"sl":67}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_359":{"methods":[{"sl":60}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":61}]},"test_379":{"methods":[{"sl":60}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_408":{"methods":[{"sl":60}],"name":"Verify that enrollment_authority has bytevalue 3","pass":true,"statements":[{"sl":61}]},"test_450":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_462":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_authority for 3","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_479":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_494":{"methods":[{"sl":60}],"name":"Verify that root_ca has bytevalue 4","pass":true,"statements":[{"sl":61}]},"test_501":{"methods":[{"sl":60}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":61}]},"test_53":{"methods":[{"sl":60}],"name":"Verify that authorization_ticket has bytevalue 1","pass":true,"statements":[{"sl":61}]},"test_530":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_536":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_credential for 0","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_560":{"methods":[{"sl":60}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":61}]},"test_575":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_622":{"methods":[{"sl":67}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_66":{"methods":[{"sl":60}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_669":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_679":{"methods":[{"sl":60}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":61}]},"test_682":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_694":{"methods":[{"sl":67}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_703":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_ticket for 1","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_709":{"methods":[{"sl":60}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_808":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_843":{"methods":[{"sl":60}],"name":"Verify that authorization_authority has bytevalue 2","pass":true,"statements":[{"sl":61}]},"test_846":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_854":{"methods":[{"sl":67}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_857":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_863":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_868":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_877":{"methods":[{"sl":60}],"name":"Verify that crl_signer has bytevalue 5","pass":true,"statements":[{"sl":61}]},"test_897":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_authority for 2","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_915":{"methods":[{"sl":60}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_916":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns root_ca for 4","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_922":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns crl_signer for 5","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_949":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_95":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_959":{"methods":[{"sl":60}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_965":{"methods":[{"sl":60},{"sl":67}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_973":{"methods":[{"sl":60}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":61}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [868, 408, 575, 321, 877, 450, 843, 808, 857, 292, 494, 560, 253, 501, 353, 915, 66, 863, 53, 379, 105, 973, 669, 709, 846, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [868, 408, 575, 321, 877, 450, 843, 808, 857, 292, 494, 560, 253, 501, 353, 915, 66, 863, 53, 379, 105, 973, 669, 709, 846, 682, 479, 530, 28, 159, 965, 359, 315, 679, 959], [], [], [], [], [], [575, 292, 622, 949, 694, 536, 353, 922, 703, 863, 285, 105, 897, 854, 846, 95, 28, 965, 916, 462], [575, 292, 622, 949, 694, 536, 353, 922, 703, 863, 285, 105, 897, 854, 846, 95, 28, 965, 916, 462], [575, 292, 622, 949, 694, 536, 353, 922, 703, 863, 285, 105, 897, 854, 846, 95, 28, 965, 916, 462], [575, 292, 622, 949, 694, 536, 353, 922, 703, 863, 285, 105, 897, 854, 846, 95, 28, 965, 916, 462], [], [], [], [], [], []]
