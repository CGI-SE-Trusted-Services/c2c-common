var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":76,"id":2549,"methods":[{"el":58,"sc":2,"sl":56},{"el":62,"sc":2,"sl":60},{"el":74,"sc":2,"sl":67}],"name":"SubjectType","sl":46}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":67}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_11":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns crl_signer for 5","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_116":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_120":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_123":{"methods":[{"sl":67}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_13":{"methods":[{"sl":60}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_130":{"methods":[{"sl":67}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_135":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_151":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns root_ca for 4","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_152":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_158":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_164":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_credential for 0","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_166":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_170":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_182":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_authority for 2","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_185":{"methods":[{"sl":60}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":61}]},"test_195":{"methods":[{"sl":60}],"name":"Verify that authorization_ticket has bytevalue 1","pass":true,"statements":[{"sl":61}]},"test_202":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_216":{"methods":[{"sl":60},{"sl":67}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_221":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_240":{"methods":[{"sl":60}],"name":"Verify that authorization_authority has bytevalue 2","pass":true,"statements":[{"sl":61}]},"test_244":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_251":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_ticket for 1","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_271":{"methods":[{"sl":67}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_274":{"methods":[{"sl":60}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_275":{"methods":[{"sl":60}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":61}]},"test_284":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_301":{"methods":[{"sl":60}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_31":{"methods":[{"sl":60}],"name":"Verify that root_ca has bytevalue 4","pass":true,"statements":[{"sl":61}]},"test_314":{"methods":[{"sl":60}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_316":{"methods":[{"sl":60}],"name":"Verify that enrollment_credential has bytevalue 0","pass":true,"statements":[{"sl":61}]},"test_322":{"methods":[{"sl":60},{"sl":67}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_328":{"methods":[{"sl":60}],"name":"Verify that crl_signer has bytevalue 5","pass":true,"statements":[{"sl":61}]},"test_336":{"methods":[{"sl":60}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":61}]},"test_337":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_authority for 3","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_34":{"methods":[{"sl":60},{"sl":67}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_364":{"methods":[{"sl":60}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":61}]},"test_403":{"methods":[{"sl":60}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":61}]},"test_405":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_406":{"methods":[{"sl":60}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_64":{"methods":[{"sl":60}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":61}]},"test_7":{"methods":[{"sl":60}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_73":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_80":{"methods":[{"sl":60}],"name":"Verify that enrollment_authority has bytevalue 3","pass":true,"statements":[{"sl":61}]},"test_81":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_85":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_88":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [120, 158, 80, 73, 316, 195, 88, 13, 364, 284, 240, 275, 322, 328, 405, 403, 7, 34, 274, 85, 314, 336, 81, 406, 170, 185, 244, 166, 152, 116, 31, 216, 135, 301, 64], [120, 158, 80, 73, 316, 195, 88, 13, 364, 284, 240, 275, 322, 328, 405, 403, 7, 34, 274, 85, 314, 336, 81, 406, 170, 185, 244, 166, 152, 116, 31, 216, 135, 301, 64], [], [], [], [], [], [158, 322, 151, 202, 251, 271, 34, 85, 81, 105, 130, 164, 123, 166, 152, 11, 337, 216, 221, 182], [158, 322, 151, 202, 251, 271, 34, 85, 81, 105, 130, 164, 123, 166, 152, 11, 337, 216, 221, 182], [158, 322, 151, 202, 251, 271, 34, 85, 81, 105, 130, 164, 123, 166, 152, 11, 337, 216, 221, 182], [158, 322, 151, 202, 251, 271, 34, 85, 81, 105, 130, 164, 123, 166, 152, 11, 337, 216, 221, 182], [], [], [], [], [], []]
