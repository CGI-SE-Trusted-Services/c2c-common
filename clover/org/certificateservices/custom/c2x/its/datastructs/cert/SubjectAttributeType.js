var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":66,"id":7348,"methods":[{"el":48,"sc":2,"sl":46},{"el":52,"sc":2,"sl":50},{"el":64,"sc":2,"sl":57}],"name":"SubjectAttributeType","sl":33}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_10":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns assurance_level for 2","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_105":{"methods":[{"sl":50},{"sl":57}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_158":{"methods":[{"sl":50}],"name":"Verify that encryption_key has bytevalue 1","pass":true,"statements":[{"sl":51}]},"test_159":{"methods":[{"sl":50}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_188":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns reconstruction_value for 3","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_253":{"methods":[{"sl":50}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":51}]},"test_263":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_28":{"methods":[{"sl":50},{"sl":57}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_285":{"methods":[{"sl":57}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_292":{"methods":[{"sl":50},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_306":{"methods":[{"sl":50}],"name":"Verify that priority_its_aid_list has bytevalue 34","pass":true,"statements":[{"sl":51}]},"test_310":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns priority_its_aid_list for 34","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_315":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":51}]},"test_353":{"methods":[{"sl":50},{"sl":57}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_359":{"methods":[{"sl":50}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":51}]},"test_36":{"methods":[{"sl":50}],"name":"Verify that its_aid_ssp_list has bytevalue 33","pass":true,"statements":[{"sl":51}]},"test_379":{"methods":[{"sl":50}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":51}]},"test_425":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_442":{"methods":[{"sl":50}],"name":"Verify that reconstruction_value has bytevalue 3","pass":true,"statements":[{"sl":51}]},"test_450":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":51}]},"test_479":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_496":{"methods":[{"sl":50}],"name":"Verify that assurance_level has bytevalue 2","pass":true,"statements":[{"sl":51}]},"test_501":{"methods":[{"sl":50}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":51}]},"test_530":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":51}]},"test_555":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns its_aid_list for 32","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_575":{"methods":[{"sl":50},{"sl":57}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_622":{"methods":[{"sl":57}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_640":{"methods":[{"sl":50}],"name":"Verify that priority_ssp_list has bytevalue 35","pass":true,"statements":[{"sl":51}]},"test_66":{"methods":[{"sl":50}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":51}]},"test_669":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":51}]},"test_679":{"methods":[{"sl":50}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":51}]},"test_682":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":51}]},"test_694":{"methods":[{"sl":57}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_709":{"methods":[{"sl":50}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_750":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns encryption_key for 1","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_770":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns verification_key for 0","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_80":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns its_aid_ssp_list for 33","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_808":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":51}]},"test_81":{"methods":[{"sl":50}],"name":"Verify that its_aid_list has bytevalue 32","pass":true,"statements":[{"sl":51}]},"test_846":{"methods":[{"sl":50},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_852":{"methods":[{"sl":50}],"name":"Verify that verification_key has bytevalue 0","pass":true,"statements":[{"sl":51}]},"test_857":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_863":{"methods":[{"sl":50},{"sl":57}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_868":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":51}]},"test_869":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns priority_ssp_list for 35","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_915":{"methods":[{"sl":50}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_949":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_95":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_959":{"methods":[{"sl":50}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":51}]},"test_965":{"methods":[{"sl":50},{"sl":57}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_973":{"methods":[{"sl":50}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":51}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [868, 425, 575, 496, 450, 808, 857, 292, 442, 81, 253, 501, 353, 852, 915, 66, 863, 379, 105, 973, 669, 36, 709, 846, 306, 682, 479, 530, 28, 159, 965, 359, 315, 158, 679, 959, 640], [868, 425, 575, 496, 450, 808, 857, 292, 442, 81, 253, 501, 353, 852, 915, 66, 863, 379, 105, 973, 669, 36, 709, 846, 306, 682, 479, 530, 28, 159, 965, 359, 315, 158, 679, 959, 640], [], [], [], [], [], [575, 10, 555, 292, 80, 869, 622, 770, 949, 694, 353, 310, 863, 285, 105, 188, 846, 95, 750, 28, 965, 263], [575, 10, 555, 292, 80, 869, 622, 770, 949, 694, 353, 310, 863, 285, 105, 188, 846, 95, 750, 28, 965, 263], [575, 10, 555, 292, 80, 869, 622, 770, 949, 694, 353, 310, 863, 285, 105, 188, 846, 95, 750, 28, 965, 263], [575, 10, 555, 292, 80, 869, 622, 770, 949, 694, 353, 310, 863, 285, 105, 188, 846, 95, 750, 28, 965, 263], [], [], [], [], [], [], []]
