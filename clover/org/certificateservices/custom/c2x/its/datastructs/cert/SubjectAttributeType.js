var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":66,"id":2480,"methods":[{"el":48,"sc":2,"sl":46},{"el":52,"sc":2,"sl":50},{"el":64,"sc":2,"sl":57}],"name":"SubjectAttributeType","sl":33}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_0":{"methods":[{"sl":50},{"sl":57}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_1":{"methods":[{"sl":50}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":51}]},"test_110":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns priority_its_aid_list for 34","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_119":{"methods":[{"sl":50},{"sl":57}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_121":{"methods":[{"sl":50}],"name":"Generate Authorization Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":51}]},"test_123":{"methods":[{"sl":50}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_124":{"methods":[{"sl":50},{"sl":57}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_14":{"methods":[{"sl":50},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_142":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_148":{"methods":[{"sl":57}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_150":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential v1 for interoperability testing","pass":true,"statements":[{"sl":51}]},"test_153":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_162":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":51}]},"test_20":{"methods":[{"sl":50}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_203":{"methods":[{"sl":50}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_207":{"methods":[{"sl":50}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":51}]},"test_216":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":51}]},"test_226":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns its_aid_ssp_list for 33","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_228":{"methods":[{"sl":50}],"name":"Verify that assurance_level has bytevalue 2","pass":true,"statements":[{"sl":51}]},"test_231":{"methods":[{"sl":57}],"name":"Verify getEncryptionKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_238":{"methods":[{"sl":50}],"name":"Verify that priority_its_aid_list has bytevalue 34","pass":true,"statements":[{"sl":51}]},"test_239":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns encryption_key for 1","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_240":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns its_aid_list for 32","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_252":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_265":{"methods":[{"sl":50},{"sl":57}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_266":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_28":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_288":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":51}]},"test_289":{"methods":[{"sl":50},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_296":{"methods":[{"sl":50}],"name":"Generate Authorization CA v1 for interoperability testing","pass":true,"statements":[{"sl":51}]},"test_298":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_308":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns reconstruction_value for 3","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_321":{"methods":[{"sl":50}],"name":"Verify that encryption_key has bytevalue 1","pass":true,"statements":[{"sl":51}]},"test_328":{"methods":[{"sl":50}],"name":"Verify that verification_key has bytevalue 0","pass":true,"statements":[{"sl":51}]},"test_340":{"methods":[{"sl":50}],"name":"Verify that reconstruction_value has bytevalue 3","pass":true,"statements":[{"sl":51}]},"test_341":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":51}]},"test_344":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns verification_key for 0","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_348":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns assurance_level for 2","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_350":{"methods":[{"sl":50},{"sl":57}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_387":{"methods":[{"sl":50}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":51}]},"test_394":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":51}]},"test_395":{"methods":[{"sl":50}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":51}]},"test_49":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":51}]},"test_55":{"methods":[{"sl":50}],"name":"Verify that its_aid_list has bytevalue 32","pass":true,"statements":[{"sl":51}]},"test_56":{"methods":[{"sl":57}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_57":{"methods":[{"sl":50},{"sl":57}],"name":"Verify that findRecipientInfo find correct RecipientInfo","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_65":{"methods":[{"sl":50}],"name":"Verify that its_aid_ssp_list has bytevalue 33","pass":true,"statements":[{"sl":51}]},"test_67":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns priority_ssp_list for 35","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_78":{"methods":[{"sl":50}],"name":"Verify that priority_ssp_list has bytevalue 35","pass":true,"statements":[{"sl":51}]},"test_80":{"methods":[{"sl":50}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":51}]},"test_82":{"methods":[{"sl":50}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":51}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [288, 123, 395, 298, 289, 340, 55, 57, 78, 228, 203, 387, 321, 207, 350, 65, 162, 119, 1, 328, 82, 265, 216, 238, 80, 0, 20, 121, 142, 14, 28, 296, 124, 341, 394, 150, 49], [288, 123, 395, 298, 289, 340, 55, 57, 78, 228, 203, 387, 321, 207, 350, 65, 162, 119, 1, 328, 82, 265, 216, 238, 80, 0, 20, 121, 142, 14, 28, 296, 124, 341, 394, 150, 49], [], [], [], [], [], [266, 344, 289, 252, 348, 148, 57, 56, 226, 231, 67, 308, 350, 110, 240, 119, 265, 239, 0, 14, 124, 153], [266, 344, 289, 252, 348, 148, 57, 56, 226, 231, 67, 308, 350, 110, 240, 119, 265, 239, 0, 14, 124, 153], [266, 344, 289, 252, 348, 148, 57, 56, 226, 231, 67, 308, 350, 110, 240, 119, 265, 239, 0, 14, 124, 153], [266, 344, 289, 252, 348, 148, 57, 56, 226, 231, 67, 308, 350, 110, 240, 119, 265, 239, 0, 14, 124, 153], [], [], [], [], [], [], []]
