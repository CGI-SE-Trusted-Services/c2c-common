var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":62,"id":3031,"methods":[{"el":44,"sc":2,"sl":42},{"el":48,"sc":2,"sl":46},{"el":60,"sc":2,"sl":53}],"name":"PayloadType","sl":33}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":46}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47}]},"test_113":{"methods":[{"sl":53}],"name":"Verify deserialization","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]},"test_114":{"methods":[{"sl":46}],"name":"Verify that signed_and_encrypted has bytevalue 4","pass":true,"statements":[{"sl":47}]},"test_120":{"methods":[{"sl":53}],"name":"Verify that TrailerFieldType.getByValue returns signed_external for 3","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]},"test_13":{"methods":[{"sl":46}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47}]},"test_130":{"methods":[{"sl":46}],"name":"Verify that signed has bytevalue 1","pass":true,"statements":[{"sl":47}]},"test_133":{"methods":[{"sl":46}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":47}]},"test_148":{"methods":[{"sl":46},{"sl":53}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":54},{"sl":55},{"sl":56}]},"test_154":{"methods":[{"sl":46}],"name":"Verify serialization","pass":true,"statements":[{"sl":47}]},"test_220":{"methods":[{"sl":46}],"name":"Verify serialization","pass":true,"statements":[{"sl":47}]},"test_232":{"methods":[{"sl":46},{"sl":53}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":47},{"sl":54},{"sl":55},{"sl":56}]},"test_26":{"methods":[{"sl":46}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":47}]},"test_27":{"methods":[{"sl":46},{"sl":53}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":54},{"sl":55},{"sl":56}]},"test_277":{"methods":[{"sl":46}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47}]},"test_335":{"methods":[{"sl":53}],"name":"Verify that TrailerFieldType.getByValue returns unsecured for 0","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]},"test_348":{"methods":[{"sl":46}],"name":"Verify serializeTotalPayload calculates signature payload fields correctly","pass":true,"statements":[{"sl":47}]},"test_356":{"methods":[{"sl":46}],"name":"Verify that encrypted has bytevalue 2","pass":true,"statements":[{"sl":47}]},"test_357":{"methods":[{"sl":46},{"sl":53}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":47},{"sl":54},{"sl":55},{"sl":56}]},"test_360":{"methods":[{"sl":53}],"name":"Verify that TrailerFieldType.getByValue returns signed_and_encrypted for 4","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]},"test_376":{"methods":[{"sl":46},{"sl":53}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":47},{"sl":54},{"sl":55},{"sl":56}]},"test_380":{"methods":[{"sl":46}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":47}]},"test_388":{"methods":[{"sl":53}],"name":"Verify that TrailerFieldType.getByValue returns encrypted for 2","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]},"test_52":{"methods":[{"sl":46}],"name":"Verify that signed_external has bytevalue 3","pass":true,"statements":[{"sl":47}]},"test_54":{"methods":[{"sl":46}],"name":"Verify that unsecured has bytevalue 0","pass":true,"statements":[{"sl":47}]},"test_6":{"methods":[{"sl":53}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]},"test_63":{"methods":[{"sl":53}],"name":"Verify that TrailerFieldType.getByValue returns signed for 1","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]},"test_87":{"methods":[{"sl":53}],"name":"Verify deserialization","pass":true,"statements":[{"sl":54},{"sl":55},{"sl":56}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [130, 277, 357, 356, 220, 380, 154, 348, 26, 232, 52, 133, 13, 1, 114, 27, 148, 54, 376], [130, 277, 357, 356, 220, 380, 154, 348, 26, 232, 52, 133, 13, 1, 114, 27, 148, 54, 376], [], [], [], [], [], [357, 6, 232, 63, 360, 335, 27, 113, 120, 148, 376, 87, 388], [357, 6, 232, 63, 360, 335, 27, 113, 120, 148, 376, 87, 388], [357, 6, 232, 63, 360, 335, 27, 113, 120, 148, 376, 87, 388], [357, 6, 232, 63, 360, 335, 27, 113, 120, 148, 376, 87, 388], [], [], [], [], [], []]
