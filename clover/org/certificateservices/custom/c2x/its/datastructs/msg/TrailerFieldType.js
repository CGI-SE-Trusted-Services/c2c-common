var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":54,"id":3213,"methods":[{"el":36,"sc":2,"sl":34},{"el":40,"sc":2,"sl":38},{"el":52,"sc":2,"sl":45}],"name":"TrailerFieldType","sl":29}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":38}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":39}]},"test_13":{"methods":[{"sl":38}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":39}]},"test_133":{"methods":[{"sl":38}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":39}]},"test_135":{"methods":[{"sl":45}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48}]},"test_148":{"methods":[{"sl":38},{"sl":45}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":39},{"sl":46},{"sl":47},{"sl":48}]},"test_154":{"methods":[{"sl":38}],"name":"Verify serialization","pass":true,"statements":[{"sl":39}]},"test_201":{"methods":[{"sl":38}],"name":"Verify that signature has bytevalue 1","pass":true,"statements":[{"sl":39}]},"test_232":{"methods":[{"sl":38},{"sl":45}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":39},{"sl":46},{"sl":47},{"sl":48}]},"test_26":{"methods":[{"sl":38}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":39}]},"test_264":{"methods":[{"sl":38}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":39}]},"test_27":{"methods":[{"sl":38},{"sl":45}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":39},{"sl":46},{"sl":47},{"sl":48}]},"test_277":{"methods":[{"sl":38}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":39}]},"test_297":{"methods":[{"sl":45}],"name":"Verify that TrailerFieldType.getByValue returns signature for 1","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48}]},"test_376":{"methods":[{"sl":38},{"sl":45}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":39},{"sl":46},{"sl":47},{"sl":48}]},"test_380":{"methods":[{"sl":38}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":39}]},"test_6":{"methods":[{"sl":45}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48}]},"test_87":{"methods":[{"sl":45}],"name":"Verify deserialization","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [133, 13, 277, 1, 27, 201, 380, 154, 26, 148, 232, 376, 264], [133, 13, 277, 1, 27, 201, 380, 154, 26, 148, 232, 376, 264], [], [], [], [], [], [27, 135, 6, 148, 232, 297, 376, 87], [27, 135, 6, 148, 232, 297, 376, 87], [27, 135, 6, 148, 232, 297, 376, 87], [27, 135, 6, 148, 232, 297, 376, 87], [], [], [], [], [], []]
