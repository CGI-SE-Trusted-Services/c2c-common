var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":95,"id":8190,"methods":[{"el":58,"sc":2,"sl":55},{"el":65,"sc":2,"sl":60},{"el":75,"sc":2,"sl":70},{"el":93,"sc":2,"sl":80}],"name":"HeaderFieldType","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1010":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that multiple payload works for version 1 of secured DENM message","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":71},{"sl":72},{"sl":74}]},"test_108":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns recipient_info for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_125":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns its_aid for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_134":{"methods":[{"sl":80}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_15":{"methods":[{"sl":60},{"sl":70},{"sl":80}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":72},{"sl":74},{"sl":81},{"sl":82},{"sl":87},{"sl":88}]},"test_158":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that multiple payload works for version 1 of secured CAM message","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":71},{"sl":72},{"sl":74}]},"test_208":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that addHeader adds the header value in correct order","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":74}]},"test_223":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns signer_info for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_242":{"methods":[{"sl":60},{"sl":70},{"sl":80}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":72},{"sl":74},{"sl":81},{"sl":82},{"sl":87},{"sl":88}]},"test_259":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64}]},"test_281":{"methods":[{"sl":60}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64}]},"test_306":{"methods":[{"sl":60},{"sl":70},{"sl":80}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":72},{"sl":74},{"sl":81},{"sl":82},{"sl":87},{"sl":88}]},"test_363":{"methods":[{"sl":80}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_389":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that generation_time_confidence has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_438":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64}]},"test_457":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that version 2 Signed CAM Unrecognized Certificates Message  certificate, certificate_chain and certificate_digest_with_ecdsap256","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":72},{"sl":74}]},"test_466":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that generation_location has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_488":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that generation_time has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_51":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns expiration for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_545":{"methods":[{"sl":80}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84}]},"test_579":{"methods":[{"sl":60},{"sl":70}],"name":"Generate version 2 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":72},{"sl":74}]},"test_640":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns message_type for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_642":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that recipient_info has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_670":{"methods":[{"sl":60},{"sl":70}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[1]","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":72},{"sl":74}]},"test_672":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns generation_time_confidence for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_686":{"methods":[{"sl":60},{"sl":70}],"name":"Generate version 2 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":72},{"sl":74}]},"test_699":{"methods":[{"sl":60},{"sl":70},{"sl":80}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":61},{"sl":64},{"sl":71},{"sl":74},{"sl":81},{"sl":82},{"sl":87},{"sl":88}]},"test_705":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns generation_time for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_722":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that request_unrecognized_certificate has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_835":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that expiration has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_839":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns generation_location for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_84":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that signer_info has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":72}]},"test_845":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns request_unrecognized_certificate for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]},"test_847":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that its_aid has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_852":{"methods":[{"sl":60},{"sl":70}],"name":"Generate version 1 Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":71},{"sl":72},{"sl":74}]},"test_853":{"methods":[{"sl":60},{"sl":80}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":81},{"sl":82},{"sl":83},{"sl":84}]},"test_861":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that encryption_parameters has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_890":{"methods":[{"sl":60},{"sl":70}],"name":"Verify that message_type has bytevalue #Error:bytevalue","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":64},{"sl":71},{"sl":74}]},"test_899":{"methods":[{"sl":60},{"sl":70}],"name":"Generate version 1 Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":71},{"sl":72},{"sl":74}]},"test_90":{"methods":[{"sl":60},{"sl":70}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.[0]","pass":true,"statements":[{"sl":61},{"sl":62},{"sl":71},{"sl":72},{"sl":74}]},"test_932":{"methods":[{"sl":55},{"sl":60}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":61},{"sl":64}]},"test_952":{"methods":[{"sl":80}],"name":"Verify that HeaderFieldType.getByValue returns encryption_parameters for #Error:bytevalue","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":87},{"sl":88}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [932], [932], [932], [], [], [259, 1010, 457, 847, 306, 90, 15, 670, 438, 488, 932, 861, 642, 835, 281, 853, 899, 890, 84, 389, 158, 722, 852, 686, 579, 466, 242, 699, 208], [259, 1010, 457, 847, 306, 90, 15, 670, 438, 488, 932, 861, 642, 835, 281, 853, 899, 890, 84, 389, 158, 722, 852, 686, 579, 466, 242, 699, 208], [259, 1010, 847, 90, 438, 488, 861, 642, 835, 281, 853, 899, 890, 84, 389, 158, 722, 852, 466], [], [259, 457, 847, 306, 15, 670, 438, 488, 932, 861, 642, 835, 281, 890, 84, 389, 722, 686, 579, 466, 242, 699, 208], [], [], [], [], [], [1010, 457, 847, 306, 90, 15, 670, 488, 861, 642, 835, 899, 890, 84, 389, 158, 722, 852, 686, 579, 466, 242, 699, 208], [1010, 457, 847, 306, 90, 15, 670, 488, 861, 642, 835, 899, 890, 84, 389, 158, 722, 852, 686, 579, 466, 242, 699, 208], [1010, 457, 306, 90, 15, 670, 899, 84, 158, 852, 686, 579, 242], [], [1010, 457, 847, 306, 90, 15, 670, 488, 861, 642, 835, 899, 890, 389, 158, 722, 852, 686, 579, 466, 242, 699, 208], [], [], [], [], [], [640, 125, 306, 705, 134, 15, 845, 853, 952, 108, 51, 223, 672, 839, 545, 242, 699, 363], [640, 125, 306, 705, 134, 15, 845, 853, 952, 108, 51, 223, 672, 839, 545, 242, 699, 363], [640, 125, 306, 705, 134, 15, 845, 853, 952, 108, 51, 223, 672, 839, 545, 242, 699, 363], [640, 125, 705, 134, 845, 853, 952, 108, 51, 223, 672, 839, 545, 363], [640, 125, 705, 134, 845, 853, 952, 108, 51, 223, 672, 839, 545, 363], [], [], [640, 125, 306, 705, 134, 15, 845, 952, 108, 51, 223, 672, 839, 242, 699, 363], [640, 125, 306, 705, 134, 15, 845, 952, 108, 51, 223, 672, 839, 242, 699, 363], [], [], [], [], [], [], []]
