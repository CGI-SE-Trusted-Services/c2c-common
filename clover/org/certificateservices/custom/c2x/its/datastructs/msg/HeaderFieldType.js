var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":70,"id":2968,"methods":[{"el":52,"sc":2,"sl":50},{"el":56,"sc":2,"sl":54},{"el":68,"sc":2,"sl":61}],"name":"HeaderFieldType","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":54}],"name":"Verify that recipient_info has bytevalue 129","pass":true,"statements":[{"sl":55}]},"test_109":{"methods":[{"sl":54}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":55}]},"test_110":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns recipient_info for 129","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_142":{"methods":[{"sl":54}],"name":"Verify that encryption_parameters has bytevalue 130","pass":true,"statements":[{"sl":55}]},"test_146":{"methods":[{"sl":54}],"name":"Verify that message_type has bytevalue 5","pass":true,"statements":[{"sl":55}]},"test_160":{"methods":[{"sl":54}],"name":"Verify serialization","pass":true,"statements":[{"sl":55}]},"test_167":{"methods":[{"sl":54}],"name":"Verify that request_unrecognized_certificate has bytevalue 4","pass":true,"statements":[{"sl":55}]},"test_169":{"methods":[{"sl":54}],"name":"Verify that expiration has bytevalue 2","pass":true,"statements":[{"sl":55}]},"test_182":{"methods":[{"sl":54},{"sl":61}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_183":{"methods":[{"sl":61}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_186":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns expiration for 2","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_194":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns generation_location for 3","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_205":{"methods":[{"sl":54},{"sl":61}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_211":{"methods":[{"sl":54}],"name":"Verify that generation_time_confidence has bytevalue 1","pass":true,"statements":[{"sl":55}]},"test_214":{"methods":[{"sl":54}],"name":"Verify that generation_time has bytevalue 0","pass":true,"statements":[{"sl":55}]},"test_239":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns message_type for 5","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_25":{"methods":[{"sl":54},{"sl":61}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_253":{"methods":[{"sl":61}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_264":{"methods":[{"sl":54}],"name":"Verify that addHeader adds the header value in correct order","pass":true,"statements":[{"sl":55}]},"test_288":{"methods":[{"sl":54}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":55}]},"test_31":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns encryption_parameters for 130","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_315":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns signer_info for 128","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_368":{"methods":[{"sl":54}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":55}]},"test_371":{"methods":[{"sl":54}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":55}]},"test_382":{"methods":[{"sl":54}],"name":"Verify serialization","pass":true,"statements":[{"sl":55}]},"test_387":{"methods":[{"sl":54}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":55}]},"test_388":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns request_unrecognized_certificate for 4","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_401":{"methods":[{"sl":61}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_45":{"methods":[{"sl":54}],"name":"Verify that signer_info has bytevalue 128","pass":true,"statements":[{"sl":55}]},"test_59":{"methods":[{"sl":54},{"sl":61}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_69":{"methods":[{"sl":54}],"name":"Verify that generation_location has bytevalue 3","pass":true,"statements":[{"sl":55}]},"test_74":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns generation_time for 0","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_88":{"methods":[{"sl":54},{"sl":61}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_90":{"methods":[{"sl":54}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":55}]},"test_93":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns generation_time_confidence for 1","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [167, 146, 160, 90, 105, 387, 368, 88, 371, 109, 69, 382, 211, 214, 264, 205, 59, 25, 288, 142, 169, 45, 182], [167, 146, 160, 90, 105, 387, 368, 88, 371, 109, 69, 382, 211, 214, 264, 205, 59, 25, 288, 142, 169, 45, 182], [], [], [], [], [], [401, 93, 194, 183, 74, 88, 253, 388, 186, 110, 31, 239, 205, 59, 25, 315, 182], [401, 93, 194, 183, 74, 88, 253, 388, 186, 110, 31, 239, 205, 59, 25, 315, 182], [401, 93, 194, 183, 74, 88, 253, 388, 186, 110, 31, 239, 205, 59, 25, 315, 182], [401, 93, 194, 183, 74, 88, 253, 388, 186, 110, 31, 239, 205, 59, 25, 315, 182], [], [], [], [], [], []]
