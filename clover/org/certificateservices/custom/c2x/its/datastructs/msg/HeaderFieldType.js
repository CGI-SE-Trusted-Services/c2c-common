var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":70,"id":2968,"methods":[{"el":52,"sc":2,"sl":50},{"el":56,"sc":2,"sl":54},{"el":68,"sc":2,"sl":61}],"name":"HeaderFieldType","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_105":{"methods":[{"sl":54}],"name":"Verify serialization","pass":true,"statements":[{"sl":55}]},"test_107":{"methods":[{"sl":54}],"name":"Verify that signer_info has bytevalue 128","pass":true,"statements":[{"sl":55}]},"test_156":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns recipient_info for 129","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_157":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns generation_time for 0","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_170":{"methods":[{"sl":54}],"name":"Verify that expiration has bytevalue 2","pass":true,"statements":[{"sl":55}]},"test_173":{"methods":[{"sl":54},{"sl":61}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_180":{"methods":[{"sl":54}],"name":"Verify that message_type has bytevalue 5","pass":true,"statements":[{"sl":55}]},"test_191":{"methods":[{"sl":54}],"name":"Generate Authorization Ticket and Signed Secured Message v1 for interoperability testing","pass":true,"statements":[{"sl":55}]},"test_195":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns generation_location for 3","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_198":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns signer_info for 128","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_21":{"methods":[{"sl":54}],"name":"Verify that encryption_parameters has bytevalue 130","pass":true,"statements":[{"sl":55}]},"test_220":{"methods":[{"sl":54}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":55}]},"test_222":{"methods":[{"sl":54}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":55}]},"test_227":{"methods":[{"sl":54}],"name":"Verify that generation_time_confidence has bytevalue 1","pass":true,"statements":[{"sl":55}]},"test_230":{"methods":[{"sl":54}],"name":"Verify that addHeader adds the header value in correct order","pass":true,"statements":[{"sl":55}]},"test_241":{"methods":[{"sl":61}],"name":"Verify that it is possible to parse a SecureMessage generate by interoperability site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_246":{"methods":[{"sl":54},{"sl":61}],"name":"Verify signature of reference secure messages from interoperabiltity site at https://werkzeug.dcaiti.tu-berlin.de/etsi/ts103097/","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_248":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns request_unrecognized_certificate for 4","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_249":{"methods":[{"sl":54},{"sl":61}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_265":{"methods":[{"sl":54}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":55}]},"test_273":{"methods":[{"sl":54}],"name":"Verify that request_unrecognized_certificate has bytevalue 4","pass":true,"statements":[{"sl":55}]},"test_283":{"methods":[{"sl":54}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":55}]},"test_285":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns expiration for 2","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_302":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns message_type for 5","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_339":{"methods":[{"sl":54},{"sl":61}],"name":"verify that encryptSecureMessage and decryptSecureMessage encrypts and decrypts correctly","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_340":{"methods":[{"sl":54}],"name":"Verify serialization","pass":true,"statements":[{"sl":55}]},"test_349":{"methods":[{"sl":54}],"name":"Verify that generation_time has bytevalue 0","pass":true,"statements":[{"sl":55}]},"test_361":{"methods":[{"sl":61}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_364":{"methods":[{"sl":54}],"name":"Verify that generation_location has bytevalue 3","pass":true,"statements":[{"sl":55}]},"test_381":{"methods":[{"sl":61}],"name":"Verify deserialization","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_395":{"methods":[{"sl":54}],"name":"Verify that recipient_info has bytevalue 129","pass":true,"statements":[{"sl":55}]},"test_401":{"methods":[{"sl":54},{"sl":61}],"name":"Verify that signAndEncryptSecureMessage and verifyAndDecryptSecuredMessage both encrypts and signs properly","pass":true,"statements":[{"sl":55},{"sl":62},{"sl":63},{"sl":64}]},"test_5":{"methods":[{"sl":54}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":55}]},"test_69":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns generation_time_confidence for 1","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]},"test_7":{"methods":[{"sl":61}],"name":"Verify that TrailerFieldType.getByValue returns encryption_parameters for 130","pass":true,"statements":[{"sl":62},{"sl":63},{"sl":64}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [180, 349, 170, 173, 220, 191, 222, 283, 339, 105, 107, 227, 230, 273, 265, 340, 21, 246, 5, 249, 364, 401, 395], [180, 349, 170, 173, 220, 191, 222, 283, 339, 105, 107, 227, 230, 273, 265, 340, 21, 246, 5, 249, 364, 401, 395], [], [], [], [], [], [241, 173, 69, 7, 157, 339, 198, 195, 381, 156, 361, 248, 302, 246, 249, 285, 401], [241, 173, 69, 7, 157, 339, 198, 195, 381, 156, 361, 248, 302, 246, 249, 285, 401], [241, 173, 69, 7, 157, 339, 198, 195, 381, 156, 361, 248, 302, 246, 249, 285, 401], [241, 173, 69, 7, 157, 339, 198, 195, 381, 156, 361, 248, 302, 246, 249, 285, 401], [], [], [], [], [], []]
