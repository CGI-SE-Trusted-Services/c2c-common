/************************************************************************
 *                                                                       *
 *  Certificate Service -  Car2Car Core                                  *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Affero General Public License   *
 *  License as published by the Free Software Foundation; either         *
 *  version 3   of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.certificateservices.custom.c2x.ieee1609dot2.datastructs.p2p

import org.bouncycastle.util.encoders.Hex;
import org.certificateservices.custom.c2x.asn1.coer.COEREncodeHelper;
import org.certificateservices.custom.c2x.common.BaseStructSpec;
import org.certificateservices.custom.c2x.common.crypto.DefaultCryptoManagerParams;
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.Duration.DurationChoices;
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.EccP256CurvePoint.EccP256CurvePointChoices;
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.cert.Certificate;
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.cert.SubjectPermissions.SubjectPermissionsChoices;
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.p2p.CaCertP2pPDU;
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.p2p.Ieee1609dot2Peer2PeerPDU;
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.p2p.Ieee1609dot2Peer2PeerPDUContent;
import org.junit.Ignore;

import spock.lang.Shared;
import spock.lang.Specification;
import spock.lang.Unroll;

/**
 * Test for Ieee1609dot2Peer2PeerPDU
 * 
 * @author Philip Vendil, p.vendil@cgi.com
 *
 */

class Ieee1609dot2Peer2PeerPDUSpec extends BaseStructSpec {

	Certificate cert1 = CaCertP2pPDUSpec.genCertificate("cert1")
	Certificate cert2 = CaCertP2pPDUSpec.genCertificate("cert2")
	
	Ieee1609dot2Peer2PeerPDUContent caCert = new Ieee1609dot2Peer2PeerPDUContent(new CaCertP2pPDU([cert1,cert2]))
	
	def "Verify that constructor and getters are correct and it is correctly encoded"(){
		when:
		Ieee1609dot2Peer2PeerPDU d1 = new Ieee1609dot2Peer2PeerPDU(4,caCert)
		then:
		serializeToHex(d1) == "048001028003008100108105636572743131323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f58003008100108105636572743231323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f5"
		when:
		Ieee1609dot2Peer2PeerPDU d2 = deserializeFromHex(new Ieee1609dot2Peer2PeerPDU(), "048001028003008100108105636572743131323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f58003008100108105636572743231323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f5")
		then:
		d2.getVersion() == 04
		d2.getContent() == caCert
		
		when:
		Ieee1609dot2Peer2PeerPDU d3 = new Ieee1609dot2Peer2PeerPDU(caCert)
		then:
		serializeToHex(d3) == "018001028003008100108105636572743131323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f58003008100108105636572743231323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f5"
		when:
		Ieee1609dot2Peer2PeerPDU d4 = deserializeFromHex(new Ieee1609dot2Peer2PeerPDU(), "018001028003008100108105636572743131323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f58003008100108105636572743231323301b016a58f248400050102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f5808084000000000000000000000000000000000000000000000000000000000000015900000000000000000000000000000000000000000000000000000000000001bd8080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f5")
		then:
		d4.getVersion() == 01
		d4.getContent() == caCert
	}
	
	def "Verify that IOException is thrown when encoding if not all fields are set"(){
		when:
		new Ieee1609dot2Peer2PeerPDU(null)
		then:
		thrown IOException
	} 
	

	def "Verify toString"(){
		expect:
		new Ieee1609dot2Peer2PeerPDU(caCert).toString() == """Ieee1609dot2Peer2PeerPDU [
  version=1,
  content=[caCerts=[
  Certificate [
    version=3
    type=explicit
    issuer=[self=sha256]
    toBeSigned=[
      id=[name=[cert1]]
      cracaId=[313233]
      crlSeries=[432]
      validityPeriod=[start=Time32 [timeStamp=Fri Jan 15 14:20:33 CET 2016 (379948836)], duration=Duration [5 hours]]
      region=NONE
      assuranceLevel=NONE
      appPermissions=[[psid=[101(65)], ssp=[opaque=[0000000000000000000000000000000000000000000000000000000000f5]]],[psid=[202(ca)], ssp=[opaque=[0000000000000000000000000000000000000000000000000000000000f5]]]]
      certIssuePermissions=NONE
      certRequestPermissions=NONE
      canRequestRollover=false
      encryptionKey=NONE
      verifyKeyIndicator=[verificationKey=[ecdsaNistP256=[uncompressed=[x=0000000000000000000000000000000000000000000000000000000000000159, y=00000000000000000000000000000000000000000000000000000000000001bd]]]]
    ]
    signature=[ecdsaNistP256Signature=EcdsaP256[r=[xonly=000000000000000000000000000000000000000000000000000000000000007b], s=00000000000000000000000000000000000000000000000000000000000000f5]]
  ],
  Certificate [
    version=3
    type=explicit
    issuer=[self=sha256]
    toBeSigned=[
      id=[name=[cert2]]
      cracaId=[313233]
      crlSeries=[432]
      validityPeriod=[start=Time32 [timeStamp=Fri Jan 15 14:20:33 CET 2016 (379948836)], duration=Duration [5 hours]]
      region=NONE
      assuranceLevel=NONE
      appPermissions=[[psid=[101(65)], ssp=[opaque=[0000000000000000000000000000000000000000000000000000000000f5]]],[psid=[202(ca)], ssp=[opaque=[0000000000000000000000000000000000000000000000000000000000f5]]]]
      certIssuePermissions=NONE
      certRequestPermissions=NONE
      canRequestRollover=false
      encryptionKey=NONE
      verifyKeyIndicator=[verificationKey=[ecdsaNistP256=[uncompressed=[x=0000000000000000000000000000000000000000000000000000000000000159, y=00000000000000000000000000000000000000000000000000000000000001bd]]]]
    ]
    signature=[ecdsaNistP256Signature=EcdsaP256[r=[xonly=000000000000000000000000000000000000000000000000000000000000007b], s=00000000000000000000000000000000000000000000000000000000000000f5]]
  ]]]
]"""
	}
	

}
