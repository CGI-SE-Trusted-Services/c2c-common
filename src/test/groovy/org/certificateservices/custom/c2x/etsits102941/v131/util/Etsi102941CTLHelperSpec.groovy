package org.certificateservices.custom.c2x.etsits102941.v131.util

import org.bouncycastle.util.encoders.Hex
import org.certificateservices.custom.c2x.common.BaseStructSpec
import org.certificateservices.custom.c2x.etsits102941.v131.datastructs.trustlist.CtlEntry
import org.certificateservices.custom.c2x.etsits102941.v131.datastructs.trustlist.EtsiTs102941CTL
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.Hostname
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.cert.CertificateId

/**
 * Unit tests for Etsi102941CTLHelper
 *
 * @author Philip Vendil 2020-01-16
 */
class Etsi102941CTLHelperSpec extends BaseStructSpec {


    Etsi102941CTLHelper helper = new Etsi102941CTLHelper()
    EtsiTs102941CTL raCtl
    EtsiTs102941CTL tlmCtl
    CertificateId id1 = new CertificateId(new Hostname("SomeCertId"))
    CertificateId id2 = new CertificateId(new Hostname("someOtherId"))

    def setup(){
        raCtl = new EtsiTs102941CTL(rcaCTLData)
        tlmCtl = new EtsiTs102941CTL(tlmCTLData)
    }

    def "Verify that a list of two matching certificate is found for type ea"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.ea, id1)
        then:
        l.size() == 2
        l[0].getEaEntry() != null
        l[1].getEaEntry() != null
    }

    def "Verify that a list of one matching certificate is found for type ea with other id"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.ea, id2)
        then:
        l.size() == 1
        l[0].getEaEntry() != null
    }

    def "Verify that a list of one matching certificate is found for type aa"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.aa, id1)
        then:
        l.size() == 1
        l[0].getAaEntry() != null
    }

    def "Verify that an empty list is returned if no ids is matching"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.aa, new CertificateId(new Hostname("noexists")))
        then:
        l.size() == 0
    }

    def "Verify that an empty list is returned if no type is matching"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.tlm, id1)
        then:
        l.size() == 0
    }

    def "Verify that an tlm entries can be found."(){
        when:
        def l = helper.findCACtlEntries(tlmCtl, CtlEntry.CtlEntryChoices.tlm, id1)
        then:
        l.size() == 1
        l[0].getTlmEntry() != null
    }

    def "Verify that an rca entries can be found."(){
        when:
        def l = helper.findCACtlEntries(tlmCtl, CtlEntry.CtlEntryChoices.rca, id1)
        then:
        l.size() == 1
        l[0].getRcaEntry() != null
    }

    byte[] rcaCTLData = Hex.decode("0381004003808205680101860001011c9c36a9000c0105808100800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d808100800300810079810b736f6d654f74686572496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d808100800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d818034343535363637378082800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d4002026f0001cc6ca5703c288101018003008100198108736f6d654e616d6500000000001c105b1886002301028002026e80010180020270800201380101e081010301ffc00080820109647b5fa4d82e1e6ad0683fcfc76c5f7e7607cba107ad6893a9e940104cf88080820109647b5fa4d82e1e6ad0683fcfc76c5f7e7607cba107ad6893a9e940104cf880802d4a153da20639dd36a85c9ac65bc3c78267ca09034813a35b71b6a613d6407d8d44869f7fcdfa5745df151145f3966ceac05e40428b5072aab92cdd23aedb7980807f591ec97ec300945480f07b395d45e9dc62bf8dd88043bb46ea35ce6296d9c8df63651f39ee6f2d057059c68eed9f3a28cdb1561e226eabe82683e54605cf78")
    byte[] tlmCTLData = Hex.decode("0381004003808202a60101850001011c9c36a9ff0c0102808000800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f5808400800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d4002026f0001cc6cd45675e88101018003008100198108736f6d654e616d6500000000001c105b1886002301028002026e80010180020270800201380101e081010301ffc0008082fdc6095b5844f3dd8e5a270967b0f1762b07058052b5e396a2dc5004cadc242b808082fdc6095b5844f3dd8e5a270967b0f1762b07058052b5e396a2dc5004cadc242b808039de418816a33bad5855c64891c7095f461e563f3ec69ac044dcc8e8ddc5146918852ab04b30acc46c3eebf1c79e683e4fb7759fc410ccc3c0e601f63ec635698080fd22e5364c538c37dd6a48ff23f03f0547abfc2c90b443907122f7c7a1b6059c53bdf2a41ec079402773e0af3645cc4eba677e70fb75a27f745bcb5915fa7b0b")
}
