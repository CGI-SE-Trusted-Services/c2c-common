package org.certificateservices.custom.c2x.etsits102941.v131.util

import org.bouncycastle.util.encoders.Hex
import org.certificateservices.custom.c2x.common.BaseStructSpec
import org.certificateservices.custom.c2x.etsits102941.v131.datastructs.trustlist.CtlEntry
import org.certificateservices.custom.c2x.etsits102941.v131.datastructs.trustlist.EtsiTs102941CTL
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.basic.Hostname
import org.certificateservices.custom.c2x.ieee1609dot2.datastructs.cert.CertificateId

/**
 * Unit tests for Etsi102941CTLHelper
 *
 * @author Philip Vendil 2020-01-16
 */
class Etsi102941CTLHelperSpec extends BaseStructSpec {


    Etsi102941CTLHelper helper = new Etsi102941CTLHelper()
    EtsiTs102941CTL raCtl
    EtsiTs102941CTL tlmCtl
    CertificateId id1 = new CertificateId(new Hostname("SomeCertId"))
    CertificateId id2 = new CertificateId(new Hostname("someOtherId"))

    def setup(){
        raCtl = new EtsiTs102941CTL(rcaCTLData)
        tlmCtl = new EtsiTs102941CTL(tlmCTLData)
    }

    def "Verify that a list of two matching certificate is found for type ea"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.ea, id1)
        then:
        l.size() == 2
        l[0].getEaEntry() != null
        l[1].getEaEntry() != null
    }

    def "Verify that a list of one matching certificate is found for type ea with other id"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.ea, id2)
        then:
        l.size() == 1
        l[0].getEaEntry() != null
    }

    def "Verify that a list of one matching certificate is found for type aa"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.aa, id1)
        then:
        l.size() == 1
        l[0].getAaEntry() != null
    }

    def "Verify that an empty list is returned if no ids is matching"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.aa, new CertificateId(new Hostname("noexists")))
        then:
        l.size() == 0
    }

    def "Verify that an empty list is returned if no type is matching"(){
        when:
        def l = helper.findCACtlEntries(raCtl, CtlEntry.CtlEntryChoices.tlm, id1)
        then:
        l.size() == 0
    }

    def "Verify that an tlm entries can be found."(){
        when:
        def l = helper.findCACtlEntries(tlmCtl, CtlEntry.CtlEntryChoices.tlm, id1)
        then:
        l.size() == 1
        l[0].getTlmEntry() != null
    }

    def "Verify that an rca entries can be found."(){
        when:
        def l = helper.findCACtlEntries(tlmCtl, CtlEntry.CtlEntryChoices.rca, id1)
        then:
        l.size() == 1
        l[0].getRcaEntry() != null
    }

    byte[] rcaCTLData = Hex.decode("03810040038082056701860001011c9c36a9000c0105808100800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d808100800300810079810b736f6d654f74686572496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d808100800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d818034343535363637378082800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d4002026f0001cea785009d888101018003008100198108736f6d654e616d6500000000001c105b1886002301028002026e80010180020270800201380101e081010301ffc000808297a2b61968b92deb4917cf32af2f08a8b573a60dcbc75213657c12c345a16efa80808297a2b61968b92deb4917cf32af2f08a8b573a60dcbc75213657c12c345a16efa8080cb9315c41d37983db0fc3e795139cf9dceb389d08459cfad6f6f756c1d62f0ec3c7c0e38a1b0a6346610eb0a0828b2a883e0603d45d16376cfefba33b6240bd18080018b700a512349cb6217e22604cac4d7cb1160a1768aae401948ac5a90bfd60f45dd496725de08d39fb9277e2a556ecca8d4e480753c3bfc90dafdd0a5ae3568")
    byte[] tlmCTLData = Hex.decode("0381004003808202a501850001011c9c36a9ff0c0102808000800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f5808400800300810079810a536f6d6543657274496431323301b016a58f24840005830101800009620102800165801e0000000000000000000000000000000000000000000000000000000000f58001ca801e0000000000000000000000000000000000000000000000000000000000f501022081c0e0810102010340008084000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000df808084000000000000000000000000000000000000000000000000000000000000014300000000000000000000000000000000000000000000000000000000000001a78080000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000f50f687474703a2f2f746573742e636f6d4002026f0001cea78dcecfc08101018003008100198108736f6d654e616d6500000000001c105b1886002301028002026e80010180020270800201380101e081010301ffc00080820e90790d6333a6975d4b312238cb60a390f84dc8e8b0f2b467531c934d7a86d48080820e90790d6333a6975d4b312238cb60a390f84dc8e8b0f2b467531c934d7a86d4808012c6c881aa97de5fdaef83d47768735398e6c5f227dc2f7a0bdff87c0db0e50f66ee0f23e588ef03349b5ee08d27576a6015f4be8dc5a4fa2c01f260ce7e199780806cf47533884d2c90f3024c2c565eebdfee09d0d5213c4a237879c0b999dd01ec404abc15db634e6fdc6777e74a337a8d2259421c77bda037a72bbb123614b95a")
}
